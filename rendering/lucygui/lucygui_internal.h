// dear LucyGui, v1.90.5
// (internal structures/api)

// You may use this file to debug, understand or extend Dear LucyGui features but we don't provide any guarantee of forward compatibility.

/*

Index of this file:

// [SECTION] Header mess
// [SECTION] Forward declarations
// [SECTION] Context pointer
// [SECTION] STB libraries includes
// [SECTION] Macros
// [SECTION] Generic helpers
// [SECTION] ImDrawList support
// [SECTION] Widgets support: flags, enums, data structures
// [SECTION] Data types support
// [SECTION] Popup support
// [SECTION] Inputs support
// [SECTION] Clipper support
// [SECTION] Navigation support
// [SECTION] Typing-select support
// [SECTION] Columns support
// [SECTION] Multi-select support
// [SECTION] Docking support
// [SECTION] Viewport support
// [SECTION] Settings support
// [SECTION] Localization support
// [SECTION] Metrics, Debug tools
// [SECTION] Generic context hooks
// [SECTION] LucyGuiContext (main LucyGui context)
// [SECTION] LucyGuiWindowTempData, LucyGuiWindow
// [SECTION] Tab bar, Tab item support
// [SECTION] Table support
// [SECTION] LucyGui internal API
// [SECTION] ImFontAtlas internal API
// [SECTION] Test Engine specific hooks (LucyGui_test_engine)

*/

#pragma once
#ifndef LucyGui_DISABLE

//-----------------------------------------------------------------------------
// [SECTION] Header mess
//-----------------------------------------------------------------------------

#ifndef LucyGui_VERSION
#include "LucyGui.h"
#endif

#include <stdio.h>      // FILE*, sscanf
#include <stdlib.h>     // NULL, malloc, free, qsort, atoi, atof
#include <math.h>       // sqrtf, fabsf, fmodf, powf, floorf, ceilf, cosf, sinf
#include <limits.h>     // INT_MIN, INT_MAX

// Enable SSE intrinsics if available
#if (defined __SSE__ or defined __x86_64__ or defined _M_X64 or (defined(_M_IX86_FP) and (_M_IX86_FP >= 1))) and !defined(LucyGui_DISABLE_SSE)
#define LucyGui_ENABLE_SSE
#include <immintrin.h>
#endif

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (push)
#pragma warning (disable: 4251)     // class 'xxx' needs to have dll-interface to be used by clients of struct 'xxx' // when LucyGui_API is set to__declspec(dllexport)
#pragma warning (disable: 26812)    // The enum type 'xxx' is unscoped. Prefer 'enum class' over 'enum' (Enum.3). [MSVC Static Analyzer)
#pragma warning (disable: 26495)    // [Static Analyzer] Variable 'XXX' is uninitialized. Always initialize a member variable (type.6).
#if defined(_MSC_VER) and _MSC_VER >= 1922 // MSVC 2019 16.2 or later
#pragma warning (disable: 5054)     // operator '|': deprecated between enumerations of different types
#endif
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#pragma clang diagnostic push
#if __has_warning("-Wunknown-warning-option")
#pragma clang diagnostic ignored "-Wunknown-warning-option"         // warning: unknown warning group 'xxx'
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"                // warning: unknown warning group 'xxx'
#pragma clang diagnostic ignored "-Wfloat-equal"                    // warning: comparing floating point with == or != is unsafe // storing and comparing against same constants ok, for ImFloor()
#pragma clang diagnostic ignored "-Wunused-function"                // for stb_textedit.h
#pragma clang diagnostic ignored "-Wmissing-prototypes"             // for stb_textedit.h
#pragma clang diagnostic ignored "-Wold-style-cast"
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
#pragma clang diagnostic ignored "-Wdouble-promotion"
#pragma clang diagnostic ignored "-Wimplicit-int-float-conversion"  // warning: implicit conversion from 'xxx' to 'float' may lose precision
#pragma clang diagnostic ignored "-Wmissing-noreturn"               // warning: function 'xxx' could be declared with attribute 'noreturn'
#pragma clang diagnostic ignored "-Wdeprecated-enum-enum-conversion"// warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_') is deprecated
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"            // warning: 'xxx' is an unsafe pointer used for buffer access
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpragmas"              // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wclass-memaccess"      // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
#endif

// In 1.89.4, we moved the implementation of "courtesy maths operators" from LucyGui_internal.h in LucyGui.h
// As they are frequently requested, we do not want to encourage to many people using LucyGui_internal.h
#if defined(LucyGui_DEFINE_MATH_OPERATORS) and !defined(LucyGui_DEFINE_MATH_OPERATORS_IMPLEMENTED)
#error Please '#define LucyGui_DEFINE_MATH_OPERATORS' _BEFORE_ including LucyGui.h!
#endif

// Legacy defines
#ifdef LucyGui_DISABLE_FORMAT_STRING_FUNCTIONS            // Renamed in 1.74
#error Use LucyGui_DISABLE_DEFAULT_FORMAT_FUNCTIONS
#endif
#ifdef LucyGui_DISABLE_MATH_FUNCTIONS                     // Renamed in 1.74
#error Use LucyGui_DISABLE_DEFAULT_MATH_FUNCTIONS
#endif

// Enable stb_truetype by default unless FreeType is enabled.
// You can compile with both by defining both LucyGui_ENABLE_FREETYPE and LucyGui_ENABLE_STB_TRUETYPE together.
#ifndef LucyGui_ENABLE_FREETYPE
#define LucyGui_ENABLE_STB_TRUETYPE
#endif

//-----------------------------------------------------------------------------
// [SECTION] Forward declarations
//-----------------------------------------------------------------------------

struct ImBitVector;                 // Store 1-bit per value
struct ImRect;                      // An axis-aligned rectangle (2 points)
struct ImDrawDataBuilder;           // Helper to build a ImDrawData instance
struct ImDrawListSharedData;        // Data shared between all ImDrawList instances
struct LucyGuiColorMod;               // Stacked color modifier, backup of modified data so we can restore it
struct LucyGuiContext;                // Main Dear LucyGui context
struct LucyGuiContextHook;            // Hook for extensions like LucyGuiTestEngine
struct LucyGuiDataVarInfo;            // Variable information (e.g. to avoid style variables from an enum)
struct LucyGuiDataTypeInfo;           // Type information associated to a LucyGuiDataType enum
struct LucyGuiGroupData;              // Stacked storage data for BeginGroup()/EndGroup()
struct LucyGuiInputTextState;         // Internal state of the currently focused/edited text input box
struct LucyGuiInputTextDeactivateData;// Short term storage to backup text of a deactivating InputText() while another is stealing active id
struct LucyGuiLastItemData;           // Status storage for last submitted items
struct LucyGuiLocEntry;               // A localization entry.
struct LucyGuiMenuColumns;            // Simple column measurement, currently used for MenuItem() only
struct LucyGuiNavItemData;            // Result of a gamepad/keyboard directional navigation move query result
struct LucyGuiNavTreeNodeData;        // Temporary storage for last TreeNode() being a Left arrow landing candidate.
struct LucyGuiMetricsConfig;          // Storage for ShowMetricsWindow() and DebugNodeXXX() functions
struct LucyGuiNextWindowData;         // Storage for SetNextWindow** functions
struct LucyGuiNextItemData;           // Storage for SetNextItem** functions
struct LucyGuiOldColumnData;          // Storage data for a single column for legacy Columns() api
struct LucyGuiOldColumns;             // Storage data for a columns set for legacy Columns() api
struct LucyGuiPopupData;              // Storage for current popup stack
struct LucyGuiSettingsHandler;        // Storage for one type registered in the .ini file
struct LucyGuiStackSizes;             // Storage of stack sizes for debugging/asserting
struct LucyGuiStyleMod;               // Stacked style modifier, backup of modified data so we can restore it
struct LucyGuiTabBar;                 // Storage for a tab bar
struct LucyGuiTabItem;                // Storage for a tab item (within a tab bar)
struct LucyGuiTable;                  // Storage for a table
struct LucyGuiTableColumn;            // Storage for one column of a table
struct LucyGuiTableInstanceData;      // Storage for one instance of a same table
struct LucyGuiTableTempData;          // Temporary storage for one table (one per table in the stack), shared between tables.
struct LucyGuiTableSettings;          // Storage for a table .ini settings
struct LucyGuiTableColumnsSettings;   // Storage for a column .ini settings
struct LucyGuiTypingSelectState;      // Storage for GetTypingSelectRequest()
struct LucyGuiTypingSelectRequest;    // Storage for GetTypingSelectRequest() (aimed to be public)
struct LucyGuiWindow;                 // Storage for one window
struct LucyGuiWindowTempData;         // Temporary storage for one window (that's the data which in theory we could ditch at the end of the frame, in practice we currently keep it for each window)
struct LucyGuiWindowSettings;         // Storage for a window .ini settings (we keep one of those even if the actual window wasn't instanced during this session)

// Enumerations
// Use your programming IDE "Go to definition" facility on the names of the center columns to find the actual flags/enum lists.
enum LucyGuiLocKey : int;                 // -> enum LucyGuiLocKey              // Enum: a localization entry for translation.
typedef int LucyGuiLayoutType;            // -> enum LucyGuiLayoutType_         // Enum: Horizontal or vertical

// Flags
typedef int LucyGuiActivateFlags;         // -> enum LucyGuiActivateFlags_      // Flags: for navigation/focus function (will be for ActivateItem() later)
typedef int LucyGuiDebugLogFlags;         // -> enum LucyGuiDebugLogFlags_      // Flags: for ShowDebugLogWindow(), g.DebugLogFlags
typedef int LucyGuiFocusRequestFlags;     // -> enum LucyGuiFocusRequestFlags_  // Flags: for FocusWindow();
typedef int LucyGuiInputFlags;            // -> enum LucyGuiInputFlags_         // Flags: for IsKeyPressed(), IsMouseClicked(), SetKeyOwner(), SetItemKeyOwner() etc.
typedef int LucyGuiItemFlags;             // -> enum LucyGuiItemFlags_          // Flags: for PushItemFlag(), g.LastItemData.InFlags
typedef int LucyGuiItemStatusFlags;       // -> enum LucyGuiItemStatusFlags_    // Flags: for g.LastItemData.StatusFlags
typedef int LucyGuiOldColumnFlags;        // -> enum LucyGuiOldColumnFlags_     // Flags: for BeginColumns()
typedef int LucyGuiNavHighlightFlags;     // -> enum LucyGuiNavHighlightFlags_  // Flags: for RenderNavHighlight()
typedef int LucyGuiNavMoveFlags;          // -> enum LucyGuiNavMoveFlags_       // Flags: for navigation requests
typedef int LucyGuiNextItemDataFlags;     // -> enum LucyGuiNextItemDataFlags_  // Flags: for SetNextItemXXX() functions
typedef int LucyGuiNextWindowDataFlags;   // -> enum LucyGuiNextWindowDataFlags_// Flags: for SetNextWindowXXX() functions
typedef int LucyGuiScrollFlags;           // -> enum LucyGuiScrollFlags_        // Flags: for ScrollToItem() and navigation requests
typedef int LucyGuiSeparatorFlags;        // -> enum LucyGuiSeparatorFlags_     // Flags: for SeparatorEx()
typedef int LucyGuiTextFlags;             // -> enum LucyGuiTextFlags_          // Flags: for TextEx()
typedef int LucyGuiTooltipFlags;          // -> enum LucyGuiTooltipFlags_       // Flags: for BeginTooltipEx()
typedef int LucyGuiTypingSelectFlags;     // -> enum LucyGuiTypingSelectFlags_  // Flags: for GetTypingSelectRequest()

typedef void (*LucyGuiErrorLogCallback)(void* user_data, const char* fmt, ...);

//-----------------------------------------------------------------------------
// [SECTION] Context pointer
// See implementation of this variable in LucyGui.cpp for comments and details.
//-----------------------------------------------------------------------------

#ifndef GLucyGui
extern LucyGui_API LucyGuiContext* GLucyGui;  // Current implicit context pointer
#endif

//-------------------------------------------------------------------------
// [SECTION] STB libraries includes
//-------------------------------------------------------------------------

namespace ImStb
{

#undef IMSTB_TEXTEDIT_STRING
#undef IMSTB_TEXTEDIT_CHARTYPE
#define IMSTB_TEXTEDIT_STRING             LucyGuiInputTextState
#define IMSTB_TEXTEDIT_CHARTYPE           ImWchar
#define IMSTB_TEXTEDIT_GETWIDTH_NEWLINE   (-1.0f)
#define IMSTB_TEXTEDIT_UNDOSTATECOUNT     99
#define IMSTB_TEXTEDIT_UNDOCHARCOUNT      999
#include "imstb_textedit.h"

} // namespace ImStb

//-----------------------------------------------------------------------------
// [SECTION] Macros
//-----------------------------------------------------------------------------

// Debug Printing Into TTY
// (since LucyGui_VERSION_NUM >= 18729: LucyGui_DEBUG_LOG was reworked into LucyGui_DEBUG_PRINTF (and removed framecount from it). If you were using a #define LucyGui_DEBUG_LOG please rename)
#ifndef LucyGui_DEBUG_PRINTF
#ifndef LucyGui_DISABLE_DEFAULT_FORMAT_FUNCTIONS
#define LucyGui_DEBUG_PRINTF(_FMT,...)    printf(_FMT, __VA_ARGS__)
#else
#define LucyGui_DEBUG_PRINTF(_FMT,...)    ((void)0)
#endif
#endif

// Debug Logging for ShowDebugLogWindow(). This is designed for relatively rare events so please don't spam.
#ifndef LucyGui_DISABLE_DEBUG_TOOLS
#define LucyGui_DEBUG_LOG(...)            LucyGui::DebugLog(__VA_ARGS__)
#else
#define LucyGui_DEBUG_LOG(...)            ((void)0)
#endif
#define LucyGui_DEBUG_LOG_ACTIVEID(...)   do { if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventActiveId)    LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)
#define LucyGui_DEBUG_LOG_FOCUS(...)      do { if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventFocus)       LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)
#define LucyGui_DEBUG_LOG_POPUP(...)      do { if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventPopup)       LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)
#define LucyGui_DEBUG_LOG_NAV(...)        do { if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventNav)         LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)
#define LucyGui_DEBUG_LOG_SELECTION(...)  do { if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventSelection)   LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)
#define LucyGui_DEBUG_LOG_CLIPPER(...)    do { if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventClipper)     LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)
#define LucyGui_DEBUG_LOG_IO(...)         do { if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventIO)          LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)
#define LucyGui_DEBUG_LOG_INPUTROUTING(...) do{if (g.DebugLogFlags & LucyGuiDebugLogFlags_EventInputRouting)LucyGui_DEBUG_LOG(__VA_ARGS__); } while (0)

// Static Asserts
#define IM_STATIC_ASSERT(_COND)         static_assert(_COND, "")

// "Paranoid" Debug Asserts are meant to only be enabled during specific debugging/work, otherwise would slow down the code too much.
// We currently don't have many of those so the effect is currently negligible, but onward intent to add more aggressive ones in the code.
//#define LucyGui_DEBUG_PARANOID
#ifdef LucyGui_DEBUG_PARANOID
#define IM_ASSERT_PARANOID(_EXPR)       IM_ASSERT(_EXPR)
#else
#define IM_ASSERT_PARANOID(_EXPR)
#endif

// Error handling
// Down the line in some frameworks/languages we would like to have a way to redirect those to the programmer and recover from more faults.
#ifndef IM_ASSERT_USER_ERROR
#define IM_ASSERT_USER_ERROR(_EXP,_MSG) IM_ASSERT((_EXP) and _MSG)   // Recoverable User Error
#endif

// Misc Macros
#define IM_PI                           3.14159265358979323846f
#ifdef _WIN32
#define IM_NEWLINE                      "\r\n"   // Play it nice with Windows users (Update: since 2018-05, Notepad finally appears to support Unix-style carriage returns!)
#else
#define IM_NEWLINE                      "\n"
#endif
#ifndef IM_TABSIZE                      // Until we move this to runtime and/or add proper tab support, at least allow users to compile-time override
#define IM_TABSIZE                      (4)
#endif
#define IM_MEMALIGN(_OFF,_ALIGN)        (((_OFF) + ((_ALIGN) - 1)) & ~((_ALIGN) - 1))           // Memory align e.g. IM_ALIGN(0,4)=0, IM_ALIGN(1,4)=4, IM_ALIGN(4,4)=4, IM_ALIGN(5,4)=8
#define IM_F32_TO_INT8_UNBOUND(_VAL)    ((int)((_VAL) * 255.0f + ((_VAL)>=0 ? 0.5f : -0.5f)))   // Unsaturated, for display purpose
#define IM_F32_TO_INT8_SAT(_VAL)        ((int)(ImSaturate(_VAL) * 255.0f + 0.5f))               // Saturated, always output 0..255
#define IM_TRUNC(_VAL)                  ((float)(int)(_VAL))                                    // ImTrunc() is not inlined in MSVC debug builds
#define IM_ROUND(_VAL)                  ((float)(int)((_VAL) + 0.5f))                           //
#define IM_STRINGIFY_HELPER(_X)         #_X
#define IM_STRINGIFY(_X)                IM_STRINGIFY_HELPER(_X)                                 // Preprocessor idiom to stringify e.g. an integer.
#ifndef LucyGui_DISABLE_OBSOLETE_FUNCTIONS
#define IM_FLOOR IM_TRUNC
#endif

// Enforce cdecl calling convention for functions called by the standard library, in case compilation settings changed the default to e.g. __vectorcall
#ifdef _MSC_VER
#define LucyGui_CDECL __cdecl
#else
#define LucyGui_CDECL
#endif

// Warnings
#if defined(_MSC_VER) and !defined(__clang__)
#define IM_MSVC_WARNING_SUPPRESS(XXXX)  __pragma(warning(suppress: XXXX))
#else
#define IM_MSVC_WARNING_SUPPRESS(XXXX)
#endif

// Debug Tools
// Use 'Metrics/Debugger->Tools->Item Picker' to break into the call-stack of a specific item.
// This will call IM_DEBUG_BREAK() which you may redefine yourself. See https://github.com/scottt/debugbreak for more reference.
#ifndef IM_DEBUG_BREAK
#if defined (_MSC_VER)
#define IM_DEBUG_BREAK()    __debugbreak()
#elif defined(__clang__)
#define IM_DEBUG_BREAK()    __builtin_debugtrap()
#elif defined(__GNUC__) and (defined(__i386__) or defined(__x86_64__))
#define IM_DEBUG_BREAK()    __asm__ volatile("int3;nop")
#elif defined(__GNUC__) and defined(__thumb__)
#define IM_DEBUG_BREAK()    __asm__ volatile(".inst 0xde01")
#elif defined(__GNUC__) and defined(__arm__) and !defined(__thumb__)
#define IM_DEBUG_BREAK()    __asm__ volatile(".inst 0xe7f001f0")
#else
#define IM_DEBUG_BREAK()    IM_ASSERT(0)    // It is expected that you define IM_DEBUG_BREAK() into something that will break nicely in a debugger!
#endif
#endif // #ifndef IM_DEBUG_BREAK

// Format specifiers, printing 64-bit hasn't been decently standardized...
// In a real application you should be using PRId64 and PRIu64 from <inttypes.h> (non-windows) and on Windows define them yourself.
#if defined(_MSC_VER) and !defined(__clang__)
#define IM_PRId64   "I64d"
#define IM_PRIu64   "I64u"
#define IM_PRIX64   "I64X"
#else
#define IM_PRId64   "lld"
#define IM_PRIu64   "llu"
#define IM_PRIX64   "llX"
#endif

//-----------------------------------------------------------------------------
// [SECTION] Generic helpers
// Note that the ImXXX helpers functions are lower-level than LucyGui functions.
// LucyGui functions or the LucyGui context are never called/used from other ImXXX functions.
//-----------------------------------------------------------------------------
// - Helpers: Hashing
// - Helpers: Sorting
// - Helpers: Bit manipulation
// - Helpers: String
// - Helpers: Formatting
// - Helpers: UTF-8 <> wchar conversions
// - Helpers: ImVec2/ImVec4 operators
// - Helpers: Maths
// - Helpers: Geometry
// - Helper: ImVec1
// - Helper: ImVec2ih
// - Helper: ImRect
// - Helper: ImBitArray
// - Helper: ImBitVector
// - Helper: ImSpan<>, ImSpanAllocator<>
// - Helper: ImPool<>
// - Helper: ImChunkStream<>
// - Helper: LucyGuiTextIndex
//-----------------------------------------------------------------------------

// Helpers: Hashing
LucyGui_API LucyGuiID       ImHashData(const void* data, size_t data_size, LucyGuiID seed = 0);
LucyGui_API LucyGuiID       ImHashStr(const char* data, size_t data_size = 0, LucyGuiID seed = 0);

// Helpers: Sorting
#ifndef ImQsort
static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(LucyGui_CDECL *compare_func)(void const*, void const*)) { if (count > 1) qsort(base, count, size_of_element, compare_func); }
#endif

// Helpers: Color Blending
LucyGui_API ImU32         ImAlphaBlendColors(ImU32 col_a, ImU32 col_b);

// Helpers: Bit manipulation
static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 and (v & (v - 1)) == 0; }
static inline bool      ImIsPowerOfTwo(ImU64 v)         { return v != 0 and (v & (v - 1)) == 0; }
static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v >> 4; v |= v >> 8; v |= v >> 16; v++; return v; }

// Helpers: String
LucyGui_API int           ImStricmp(const char* str1, const char* str2);                      // Case insensitive compare.
LucyGui_API int           ImStrnicmp(const char* str1, const char* str2, size_t count);       // Case insensitive compare to a certain count.
LucyGui_API void          ImStrncpy(char* dst, const char* src, size_t count);                // Copy to a certain count and always zero terminate (strncpy doesn't).
LucyGui_API char*         ImStrdup(const char* str);                                          // Duplicate a string.
LucyGui_API char*         ImStrdupcpy(char* dst, size_t* p_dst_size, const char* str);        // Copy in provided buffer, recreate buffer if needed.
LucyGui_API const char*   ImStrchrRange(const char* str_begin, const char* str_end, char c);  // Find first occurrence of 'c' in string range.
LucyGui_API const char*   ImStreolRange(const char* str, const char* str_end);                // End end-of-line
LucyGui_API const char*   ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end);  // Find a substring in a string range.
LucyGui_API void          ImStrTrimBlanks(char* str);                                         // Remove leading and trailing blanks from a buffer.
LucyGui_API const char*   ImStrSkipBlank(const char* str);                                    // Find first non-blank character.
LucyGui_API int           ImStrlenW(const ImWchar* str);                                      // Computer string length (ImWchar string)
LucyGui_API const ImWchar*ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin);   // Find beginning-of-line (ImWchar string)
IM_MSVC_RUNTIME_CHECKS_OFF
static inline char      ImToUpper(char c)               { return (c >= 'a' and c <= 'z') ? c &= ~32 : c; }
static inline bool      ImCharIsBlankA(char c)          { return c == ' ' or c == '\t'; }
static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' or c == '\t' or c == 0x3000; }
IM_MSVC_RUNTIME_CHECKS_RESTORE

// Helpers: Formatting
LucyGui_API int           ImFormatString(char* buf, size_t buf_size, const char* fmt, ...) IM_FMTARGS(3);
LucyGui_API int           ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args) IM_FMTLIST(3);
LucyGui_API void          ImFormatStringToTempBuffer(const char** out_buf, const char** out_buf_end, const char* fmt, ...) IM_FMTARGS(3);
LucyGui_API void          ImFormatStringToTempBufferV(const char** out_buf, const char** out_buf_end, const char* fmt, va_list args) IM_FMTLIST(3);
LucyGui_API const char*   ImParseFormatFindStart(const char* format);
LucyGui_API const char*   ImParseFormatFindEnd(const char* format);
LucyGui_API const char*   ImParseFormatTrimDecorations(const char* format, char* buf, size_t buf_size);
LucyGui_API void          ImParseFormatSanitizeForPrinting(const char* fmt_in, char* fmt_out, size_t fmt_out_size);
LucyGui_API const char*   ImParseFormatSanitizeForScanning(const char* fmt_in, char* fmt_out, size_t fmt_out_size);
LucyGui_API int           ImParseFormatPrecision(const char* format, int default_value);

// Helpers: UTF-8 <> wchar conversions
LucyGui_API const char*   ImTextCharToUtf8(char out_buf[5], unsigned int c);                                                      // return out_buf
LucyGui_API int           ImTextStrToUtf8(char* out_buf, int out_buf_size, const ImWchar* in_text, const ImWchar* in_text_end);   // return output UTF-8 bytes count
LucyGui_API int           ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end);               // read one character. return input UTF-8 bytes count
LucyGui_API int           ImTextStrFromUtf8(ImWchar* out_buf, int out_buf_size, const char* in_text, const char* in_text_end, const char** in_remaining = NULL);   // return input UTF-8 bytes count
LucyGui_API int           ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end);                                 // return number of UTF-8 code-points (NOT bytes count)
LucyGui_API int           ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end);                             // return number of bytes to express one char in UTF-8
LucyGui_API int           ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end);                        // return number of bytes to express string in UTF-8
LucyGui_API const char*   ImTextFindPreviousUtf8Codepoint(const char* in_text_start, const char* in_text_curr);                   // return previous UTF-8 code-point.

// Helpers: File System
#ifdef LucyGui_DISABLE_FILE_FUNCTIONS
#define LucyGui_DISABLE_DEFAULT_FILE_FUNCTIONS
typedef void* ImFileHandle;
static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NULL; }
static inline bool          ImFileClose(ImFileHandle)                               { return false; }
static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (ImU64)-1; }
static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; }
static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; }
#endif
#ifndef LucyGui_DISABLE_DEFAULT_FILE_FUNCTIONS
typedef FILE* ImFileHandle;
LucyGui_API ImFileHandle      ImFileOpen(const char* filename, const char* mode);
LucyGui_API bool              ImFileClose(ImFileHandle file);
LucyGui_API ImU64             ImFileGetSize(ImFileHandle file);
LucyGui_API ImU64             ImFileRead(void* data, ImU64 size, ImU64 count, ImFileHandle file);
LucyGui_API ImU64             ImFileWrite(const void* data, ImU64 size, ImU64 count, ImFileHandle file);
#else
#define LucyGui_DISABLE_TTY_FUNCTIONS // Can't use stdout, fflush if we are not using default file functions
#endif
LucyGui_API void*             ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size = NULL, int padding_bytes = 0);

// Helpers: Maths
IM_MSVC_RUNTIME_CHECKS_OFF
// - Wrapper for standard libs functions. (Note that LucyGui_demo.cpp does _not_ use them to keep the code easy to copy)
#ifndef LucyGui_DISABLE_DEFAULT_MATH_FUNCTIONS
#define ImFabs(X)           fabsf(X)
#define ImSqrt(X)           sqrtf(X)
#define ImFmod(X, Y)        fmodf((X), (Y))
#define ImCos(X)            cosf(X)
#define ImSin(X)            sinf(X)
#define ImAcos(X)           acosf(X)
#define ImAtan2(Y, X)       atan2f((Y), (X))
#define ImAtof(STR)         atof(STR)
#define ImCeil(X)           ceilf(X)
static inline float  ImPow(float x, float y)    { return powf(x, y); }          // DragBehaviorT/SliderBehaviorT uses ImPow with either float/double and need the precision
static inline double ImPow(double x, double y)  { return pow(x, y); }
static inline float  ImLog(float x)             { return logf(x); }             // DragBehaviorT/SliderBehaviorT uses ImLog with either float/double and need the precision
static inline double ImLog(double x)            { return log(x); }
static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }
static inline float  ImAbs(float x)             { return fabsf(x); }
static inline double ImAbs(double x)            { return fabs(x); }
static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : (x > 0.0f) ? 1.0f : 0.0f; } // Sign operator - returns -1, 0 or 1 based on sign of argument
static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : (x > 0.0) ? 1.0 : 0.0; }
#ifdef LucyGui_ENABLE_SSE
static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x))); }
#else
static inline float  ImRsqrt(float x)           { return 1.0f / sqrtf(x); }
#endif
static inline double ImRsqrt(double x)          { return 1.0 / sqrt(x); }
#endif
// - ImMin/ImMax/ImClamp/ImLerp/ImSwap are used by widgets which support variety of types: signed/unsigned int/long long float/double
// (Exceptionally using templates here but we could also redefine them for those types)
template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < rhs ? lhs : rhs; }
template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= rhs ? lhs : rhs; }
template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn) ? mn : (v > mx) ? mx : v; }
template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a + (b - a) * t); }
template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a = b; b = tmp; }
template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 and (a < mn - b)) return mn; if (b > 0 and (a > mx - b)) return mx; return a + b; }
template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 and (a < mn + b)) return mn; if (b < 0 and (a > mx + b)) return mx; return a - b; }
// - Misc maths helpers
static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x < rhs.x ? lhs.x : rhs.x, lhs.y < rhs.y ? lhs.y : rhs.y); }
static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x >= rhs.x ? lhs.x : rhs.x, lhs.y >= rhs.y ? lhs.y : rhs.y); }
static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2((v.x < mn.x) ? mn.x : (v.x > mx.x) ? mx.x : v.x, (v.y < mn.y) ? mn.y : (v.y > mx.y) ? mx.y : v.y); }
static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t); }
static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(a.x + (b.x - a.x) * t.x, a.y + (b.y - a.y) * t.y); }
static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t, a.w + (b.w - a.w) * t); }
static inline float  ImSaturate(float f)                                        { return (f < 0.0f) ? 0.0f : (f > 1.0f) ? 1.0f : f; }
static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x * lhs.x) + (lhs.y * lhs.y); }
static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x * lhs.x) + (lhs.y * lhs.y) + (lhs.z * lhs.z) + (lhs.w * lhs.w); }
static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs.x * lhs.x) + (lhs.y * lhs.y); if (d > 0.0f) return ImRsqrt(d); return fail_value; }
static inline float  ImTrunc(float f)                                           { return (float)(int)(f); }
static inline ImVec2 ImTrunc(const ImVec2& v)                                   { return ImVec2((float)(int)(v.x), (float)(int)(v.y)); }
static inline float  ImFloor(float f)                                           { return (float)((f >= 0 or (float)(int)f == f) ? (int)f : (int)f - 1); } // Decent replacement for floorf()
static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(ImFloor(v.x), ImFloor(v.y)); }
static inline int    ImModPositive(int a, int b)                                { return (a + b) % b; }
static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b.x + a.y * b.y; }
static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(v.x * cos_a - v.y * sin_a, v.x * sin_a + v.y * cos_a); }
static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < target) return ImMin(current + speed, target); if (current > target) return ImMax(current - speed, target); return current; }
static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x * rhs.x, lhs.y * rhs.y); }
static inline bool   ImIsFloatAboveGuaranteedIntegerPrecision(float f)          { return f <= -16777216 or f >= 16777216; }
static inline float  ImExponentialMovingAverage(float avg, float sample, int n) { avg -= avg / n; avg += sample / n; return avg; }
IM_MSVC_RUNTIME_CHECKS_RESTORE

// Helpers: Geometry
LucyGui_API ImVec2     ImBezierCubicCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, float t);
LucyGui_API ImVec2     ImBezierCubicClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& p, int num_segments);       // For curves with explicit number of segments
LucyGui_API ImVec2     ImBezierCubicClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& p, float tess_tol);// For auto-tessellated curves you can use tess_tol = style.CurveTessellationTol
LucyGui_API ImVec2     ImBezierQuadraticCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, float t);
LucyGui_API ImVec2     ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p);
LucyGui_API bool       ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p);
LucyGui_API ImVec2     ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p);
LucyGui_API void       ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p, float& out_u, float& out_v, float& out_w);
inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c)          { return ImFabs((a.x * (b.y - c.y)) + (b.x * (c.y - a.y)) + (c.x * (a.y - b.y))) * 0.5f; }
inline bool          ImTriangleIsClockwise(const ImVec2& a, const ImVec2& b, const ImVec2& c)   { return ((b.x - a.x) * (c.y - b.y)) - ((c.x - b.x) * (b.y - a.y)) > 0.0f; }

// Helper: ImVec1 (1D vector)
// (this odd construct is used to facilitate the transition between 1D and 2D, and the maintenance of some branches/patches)
IM_MSVC_RUNTIME_CHECKS_OFF
struct ImVec1
{
    float   x;
    constexpr ImVec1()         : x(0.0f) { }
    constexpr ImVec1(float _x) : x(_x) { }
};

// Helper: ImVec2ih (2D vector, half-size integer, for long-term packed storage)
struct ImVec2ih
{
    short   x, y;
    constexpr ImVec2ih()                           : x(0), y(0) {}
    constexpr ImVec2ih(short _x, short _y)         : x(_x), y(_y) {}
    constexpr explicit ImVec2ih(const ImVec2& rhs) : x((short)rhs.x), y((short)rhs.y) {}
};

// Helper: ImRect (2D axis aligned bounding-box)
// NB: we can't rely on ImVec2 math operators being available here!
struct LucyGui_API ImRect
{
    ImVec2      Min;    // Upper-left
    ImVec2      Max;    // Lower-right

    constexpr ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)  {}
    constexpr ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)                {}
    constexpr ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)      {}
    constexpr ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)          {}

    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min.y + Max.y) * 0.5f); }
    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y); }
    float       GetWidth() const                    { return Max.x - Min.x; }
    float       GetHeight() const                   { return Max.y - Min.y; }
    float       GetArea() const                     { return (Max.x - Min.x) * (Max.y - Min.y); }
    ImVec2      GetTL() const                       { return Min; }                   // Top-left
    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  // Top-right
    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  // Bottom-left
    ImVec2      GetBR() const                       { return Max; }                   // Bottom-right
    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x and p.y     >= Min.y and p.x     <  Max.x and p.y     <  Max.y; }
    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x and r.Min.y >= Min.y and r.Max.x <= Max.x and r.Max.y <= Max.y; }
    bool        ContainsWithPad(const ImVec2& p, const ImVec2& pad) const { return p.x >= Min.x - pad.x and p.y >= Min.y - pad.y and p.x < Max.x + pad.x and p.y < Max.y + pad.y; }
    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y and r.Max.y >  Min.y and r.Min.x <  Max.x and r.Max.x >  Min.x; }
    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (Min.y > p.y)     Min.y = p.y;     if (Max.x < p.x)     Max.x = p.x;     if (Max.y < p.y)     Max.y = p.y; }
    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (Min.y > r.Min.y) Min.y = r.Min.y; if (Max.x < r.Max.x) Max.x = r.Max.x; if (Max.y < r.Max.y) Max.y = r.Max.y; }
    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max.x += amount;   Max.y += amount; }
    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max.x += amount.x; Max.y += amount.y; }
    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; Max.y += d.y; }
    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }
    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }
    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, r.Max); }                   // Simple version, may lead to an inverted rectangle, which is fine for Contains/Overlaps test but not for display.
    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = ImClamp(Max, r.Min, r.Max); } // Full version, ensure both points are fully clipped.
    void        Floor()                             { Min.x = IM_TRUNC(Min.x); Min.y = IM_TRUNC(Min.y); Max.x = IM_TRUNC(Max.x); Max.y = IM_TRUNC(Max.y); }
    bool        IsInverted() const                  { return Min.x > Max.x or Min.y > Max.y; }
    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y); }
};

// Helper: ImBitArray
#define         IM_BITARRAY_TESTBIT(_ARRAY, _N)                 ((_ARRAY[(_N) >> 5] & ((ImU32)1 << ((_N) & 31))) != 0) // Macro version of ImBitArrayTestBit(): ensure args have side-effect or are costly!
#define         IM_BITARRAY_CLEARBIT(_ARRAY, _N)                ((_ARRAY[(_N) >> 5] &= ~((ImU32)1 << ((_N) & 31))))    // Macro version of ImBitArrayClearBit(): ensure args have side-effect or are costly!
inline size_t   ImBitArrayGetStorageSizeInBytes(int bitcount)   { return (size_t)((bitcount + 31) >> 5) << 2; }
inline void     ImBitArrayClearAllBits(ImU32* arr, int bitcount){ memset(arr, 0, ImBitArrayGetStorageSizeInBytes(bitcount)); }
inline bool     ImBitArrayTestBit(const ImU32* arr, int n)      { ImU32 mask = (ImU32)1 << (n & 31); return (arr[n >> 5] & mask) != 0; }
inline void     ImBitArrayClearBit(ImU32* arr, int n)           { ImU32 mask = (ImU32)1 << (n & 31); arr[n >> 5] &= ~mask; }
inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & 31); arr[n >> 5] |= mask; }
inline void     ImBitArraySetBitRange(ImU32* arr, int n, int n2) // Works on range [n..n2)
{
    n2--;
    while (n <= n2)
    {
        int a_mod = (n & 31);
        int b_mod = (n2 > (n | 31) ? 31 : (n2 & 31)) + 1;
        ImU32 mask = (ImU32)(((ImU64)1 << b_mod) - 1) & ~(ImU32)(((ImU64)1 << a_mod) - 1);
        arr[n >> 5] |= mask;
        n = (n + 32) & ~31;
    }
}

typedef ImU32* ImBitArrayPtr; // Name for use in structs

// Helper: ImBitArray class (wrapper over ImBitArray functions)
// Store 1-bit per value.
template<int BITCOUNT, int OFFSET = 0>
struct ImBitArray
{
    ImU32           Storage[(BITCOUNT + 31) >> 5];
    ImBitArray()                                { ClearAllBits(); }
    void            ClearAllBits()              { memset(Storage, 0, sizeof(Storage)); }
    void            SetAllBits()                { memset(Storage, 255, sizeof(Storage)); }
    bool            TestBit(int n) const        { n += OFFSET; IM_ASSERT(n >= 0 and n < BITCOUNT); return IM_BITARRAY_TESTBIT(Storage, n); }
    void            SetBit(int n)               { n += OFFSET; IM_ASSERT(n >= 0 and n < BITCOUNT); ImBitArraySetBit(Storage, n); }
    void            ClearBit(int n)             { n += OFFSET; IM_ASSERT(n >= 0 and n < BITCOUNT); ImBitArrayClearBit(Storage, n); }
    void            SetBitRange(int n, int n2)  { n += OFFSET; n2 += OFFSET; IM_ASSERT(n >= 0 and n < BITCOUNT and n2 > n and n2 <= BITCOUNT); ImBitArraySetBitRange(Storage, n, n2); } // Works on range [n..n2)
    bool            operator[](int n) const     { n += OFFSET; IM_ASSERT(n >= 0 and n < BITCOUNT); return IM_BITARRAY_TESTBIT(Storage, n); }
};

// Helper: ImBitVector
// Store 1-bit per value.
struct LucyGui_API ImBitVector
{
    ImVector<ImU32> Storage;
    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage.Data, 0, (size_t)Storage.Size * sizeof(Storage.Data[0])); }
    void            Clear()                     { Storage.clear(); }
    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return IM_BITARRAY_TESTBIT(Storage.Data, n); }
    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArraySetBit(Storage.Data, n); }
    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArrayClearBit(Storage.Data, n); }
};
IM_MSVC_RUNTIME_CHECKS_RESTORE

// Helper: ImSpan<>
// Pointing to a span of data we don't own.
template<typename T>
struct ImSpan
{
    T*                  Data;
    T*                  DataEnd;

    // Constructors, destructor
    inline ImSpan()                                 { Data = DataEnd = NULL; }
    inline ImSpan(T* data, int size)                { Data = data; DataEnd = data + size; }
    inline ImSpan(T* data, T* data_end)             { Data = data; DataEnd = data_end; }

    inline void         set(T* data, int size)      { Data = data; DataEnd = data + size; }
    inline void         set(T* data, T* data_end)   { Data = data; DataEnd = data_end; }
    inline int          size() const                { return (int)(ptrdiff_t)(DataEnd - Data); }
    inline int          size_in_bytes() const       { return (int)(ptrdiff_t)(DataEnd - Data) * (int)sizeof(T); }
    inline T&           operator[](int i)           { T* p = Data + i; IM_ASSERT(p >= Data and p < DataEnd); return *p; }
    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data and p < DataEnd); return *p; }

    inline T*           begin()                     { return Data; }
    inline const T*     begin() const               { return Data; }
    inline T*           end()                       { return DataEnd; }
    inline const T*     end() const                 { return DataEnd; }

    // Utilities
    inline int  index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data and it < DataEnd); const ptrdiff_t off = it - Data; return (int)off; }
};

// Helper: ImSpanAllocator<>
// Facilitate storing multiple chunks into a single large block (the "arena")
// - Usage: call Reserve() N times, allocate GetArenaSizeInBytes() worth, pass it to SetArenaBasePtr(), call GetSpan() N times to retrieve the aligned ranges.
template<int CHUNKS>
struct ImSpanAllocator
{
    char*   BasePtr;
    int     CurrOff;
    int     CurrIdx;
    int     Offsets[CHUNKS];
    int     Sizes[CHUNKS];

    ImSpanAllocator()                               { memset(this, 0, sizeof(*this)); }
    inline void  Reserve(int n, size_t sz, int a=4) { IM_ASSERT(n == CurrIdx and n < CHUNKS); CurrOff = IM_MEMALIGN(CurrOff, a); Offsets[n] = CurrOff; Sizes[n] = (int)sz; CurrIdx++; CurrOff += (int)sz; }
    inline int   GetArenaSizeInBytes()              { return CurrOff; }
    inline void  SetArenaBasePtr(void* base_ptr)    { BasePtr = (char*)base_ptr; }
    inline void* GetSpanPtrBegin(int n)             { IM_ASSERT(n >= 0 and n < CHUNKS and CurrIdx == CHUNKS); return (void*)(BasePtr + Offsets[n]); }
    inline void* GetSpanPtrEnd(int n)               { IM_ASSERT(n >= 0 and n < CHUNKS and CurrIdx == CHUNKS); return (void*)(BasePtr + Offsets[n] + Sizes[n]); }
    template<typename T>
    inline void  GetSpan(int n, ImSpan<T>* span)    { span->set((T*)GetSpanPtrBegin(n), (T*)GetSpanPtrEnd(n)); }
};

// Helper: ImPool<>
// Basic keyed storage for contiguous instances, slow/amortized insertion, O(1) indexable, O(Log N) queries by ID over a dense/hot buffer,
// Honor constructor/destructor. Add/remove invalidate all pointers. Indexes have the same lifetime as the associated object.
typedef int ImPoolIdx;
template<typename T>
struct ImPool
{
    ImVector<T>     Buf;        // Contiguous data
    LucyGuiStorage    Map;        // ID->Index
    ImPoolIdx       FreeIdx;    // Next free idx to use
    ImPoolIdx       AliveCount; // Number of active/alive items (for display purpose)

    ImPool()    { FreeIdx = AliveCount = 0; }
    ~ImPool()   { Clear(); }
    T*          GetByKey(LucyGuiID key)               { int idx = Map.GetInt(key, -1); return (idx != -1) ? &Buf[idx] : NULL; }
    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }
    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data and p < Buf.Data + Buf.Size); return (ImPoolIdx)(p - Buf.Data); }
    T*          GetOrAddByKey(LucyGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*p_idx != -1) return &Buf[*p_idx]; *p_idx = FreeIdx; return Add(); }
    bool        Contains(const T* p) const          { return (p >= Buf.Data and p < Buf.Data + Buf.Size); }
    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { int idx = Map.Data[n].val_i; if (idx != -1) Buf[idx].~T(); } Map.Clear(); Buf.clear(); FreeIdx = AliveCount = 0; }
    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { Buf.resize(Buf.Size + 1); FreeIdx++; } else { FreeIdx = *(int*)&Buf[idx]; } IM_PLACEMENT_NEW(&Buf[idx]) T(); AliveCount++; return &Buf[idx]; }
    void        Remove(LucyGuiID key, const T* p)     { Remove(key, GetIndex(p)); }
    void        Remove(LucyGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx; FreeIdx = idx; Map.SetInt(key, -1); AliveCount--; }
    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(capacity); }

    // To iterate a ImPool: for (int n = 0; n < pool.GetMapSize(); n++) if (T* t = pool.TryGetMapData(n)) { ... }
    // Can be avoided if you know .Remove() has never been called on the pool, or AliveCount == GetMapSize()
    int         GetAliveCount() const               { return AliveCount; }      // Number of active/alive items in the pool (for display purpose)
    int         GetBufSize() const                  { return Buf.Size; }
    int         GetMapSize() const                  { return Map.Data.Size; }   // It is the map we need iterate to find valid items, since we don't have "alive" storage anywhere
    T*          TryGetMapData(ImPoolIdx n)          { int idx = Map.Data[n].val_i; if (idx == -1) return NULL; return GetByIndex(idx); }
};

// Helper: ImChunkStream<>
// Build and iterate a contiguous stream of variable-sized structures.
// This is used by Settings to store persistent data while reducing allocation count.
// We store the chunk size first, and align the final size on 4 bytes boundaries.
// The tedious/zealous amount of casting is to avoid -Wcast-align warnings.
template<typename T>
struct ImChunkStream
{
    ImVector<char>  Buf;

    void    clear()                     { Buf.clear(); }
    bool    empty() const               { return Buf.Size == 0; }
    int     size() const                { return Buf.Size; }
    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); int off = Buf.Size; Buf.resize(off + (int)sz); ((int*)(void*)(Buf.Data + off))[0] = (int)sz; return (T*)(void*)(Buf.Data + off + (int)HDR_SZ); }
    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return (T*)(void*)(Buf.Data + HDR_SZ); }
    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() and p < end()); p = (T*)(void*)((char*)(void*)p + chunk_size(p)); if (p == (T*)(void*)((char*)end() + HDR_SZ)) return (T*)0; IM_ASSERT(p < end()); return p; }
    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }
    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }
    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() and p < end()); const ptrdiff_t off = (const char*)p - Buf.Data; return (int)off; }
    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 and off < Buf.Size); return (T*)(void*)(Buf.Data + off); }
    void    swap(ImChunkStream<T>& rhs) { rhs.Buf.swap(Buf); }
};

// Helper: LucyGuiTextIndex<>
// Maintain a line index for a text buffer. This is a strong candidate to be moved into the public API.
struct LucyGuiTextIndex
{
    ImVector<int>   LineOffsets;
    int             EndOffset = 0;                          // Because we don't own text buffer we need to maintain EndOffset (may bake in LineOffsets?)

    void            clear()                                 { LineOffsets.clear(); EndOffset = 0; }
    int             size()                                  { return LineOffsets.Size; }
    const char*     get_line_begin(const char* base, int n) { return base + LineOffsets[n]; }
    const char*     get_line_end(const char* base, int n)   { return base + (n + 1 < LineOffsets.Size ? (LineOffsets[n + 1] - 1) : EndOffset); }
    void            append(const char* base, int old_size, int new_size);
};

//-----------------------------------------------------------------------------
// [SECTION] ImDrawList support
//-----------------------------------------------------------------------------

// ImDrawList: Helper function to calculate a circle's segment count given its radius and a "maximum error" value.
// Estimation of number of circle segment based on error is derived using method described in https://stackoverflow.com/a/2244088/15194693
// Number of segments (N) is calculated using equation:
//   N = ceil ( pi / acos(1 - error / r) )     where r > 0, error <= r
// Our equation is significantly simpler that one in the post thanks for choosing segment that is
// perpendicular to X axis. Follow steps in the article from this starting condition and you will
// will get this result.
//
// Rendering circles with an odd number of segments, while mathematically correct will produce
// asymmetrical results on the raster grid. Therefore we're rounding N to next even number (7->8, 8->8, 9->10 etc.)
#define IM_ROUNDUP_TO_EVEN(_V)                                  ((((_V) + 1) / 2) * 2)
#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN                     4
#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX                     512
#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(_RAD,_MAXERROR)    ImClamp(IM_ROUNDUP_TO_EVEN((int)ImCeil(IM_PI / ImAcos(1 - ImMin((_MAXERROR), (_RAD)) / (_RAD)))), IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN, IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX)

// Raw equation from IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC rewritten for 'r' and 'error'.
#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(_N,_MAXERROR)    ((_MAXERROR) / (1 - ImCos(IM_PI / ImMax((float)(_N), IM_PI))))
#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR(_N,_RAD)     ((1 - ImCos(IM_PI / ImMax((float)(_N), IM_PI))) / (_RAD))

// ImDrawList: Lookup table size for adaptive arc drawing, cover full circle.
#ifndef IM_DRAWLIST_ARCFAST_TABLE_SIZE
#define IM_DRAWLIST_ARCFAST_TABLE_SIZE                          48 // Number of samples in lookup table.
#endif
#define IM_DRAWLIST_ARCFAST_SAMPLE_MAX                          IM_DRAWLIST_ARCFAST_TABLE_SIZE // Sample index _PathArcToFastEx() for 360 angle.

// Data shared between all ImDrawList instances
// You may want to create your own instance of this if you want to use ImDrawList completely without LucyGui. In that case, watch out for future changes to this structure.
struct LucyGui_API ImDrawListSharedData
{
    ImVec2          TexUvWhitePixel;            // UV of white pixel in the atlas
    ImFont*         Font;                       // Current/default font (optional, for simplified AddText overload)
    float           FontSize;                   // Current/default font size (optional, for simplified AddText overload)
    float           CurveTessellationTol;       // Tessellation tolerance when using PathBezierCurveTo()
    float           CircleSegmentMaxError;      // Number of circle segments to use per pixel of radius for AddCircle() etc
    ImVec4          ClipRectFullscreen;         // Value for PushClipRectFullscreen()
    ImDrawListFlags InitialFlags;               // Initial flags at the beginning of the frame (it is possible to alter flags on a per-drawlist basis afterwards)

    // [Internal] Temp write buffer
    ImVector<ImVec2> TempBuffer;

    // [Internal] Lookup tables
    ImVec2          ArcFastVtx[IM_DRAWLIST_ARCFAST_TABLE_SIZE]; // Sample points on the quarter of the circle.
    float           ArcFastRadiusCutoff;                        // Cutoff radius after which arc drawing will fallback to slower PathArcTo()
    ImU8            CircleSegmentCounts[64];    // Precomputed segment count for given radius before we calculate it dynamically (to avoid calculation overhead)
    const ImVec4*   TexUvLines;                 // UV of anti-aliased lines in the atlas

    ImDrawListSharedData();
    void SetCircleTessellationMaxError(float max_error);
};

struct ImDrawDataBuilder
{
    ImVector<ImDrawList*>*  Layers[2];      // Pointers to global layers for: regular, tooltip. LayersP[0] is owned by DrawData.
    ImVector<ImDrawList*>   LayerData1;

    ImDrawDataBuilder()                     { memset(this, 0, sizeof(*this)); }
};

//-----------------------------------------------------------------------------
// [SECTION] Widgets support: flags, enums, data structures
//-----------------------------------------------------------------------------

// Flags used by upcoming items
// - input: PushItemFlag() manipulates g.CurrentItemFlags, ItemAdd() calls may add extra flags.
// - output: stored in g.LastItemData.InFlags
// Current window shared by all windows.
// This is going to be exposed in LucyGui.h when stabilized enough.
enum LucyGuiItemFlags_
{
    // Controlled by user
    LucyGuiItemFlags_None                     = 0,
    LucyGuiItemFlags_NoTabStop                = 1 << 0,  // false     // Disable keyboard tabbing. This is a "lighter" version of LucyGuiItemFlags_NoNav.
    LucyGuiItemFlags_ButtonRepeat             = 1 << 1,  // false     // Button() will return true multiple times based on io.KeyRepeatDelay and io.KeyRepeatRate settings.
    LucyGuiItemFlags_Disabled                 = 1 << 2,  // false     // Disable interactions but doesn't affect visuals. See BeginDisabled()/EndDisabled(). See github.com/ocornut/LucyGui/issues/211
    LucyGuiItemFlags_NoNav                    = 1 << 3,  // false     // Disable any form of focusing (keyboard/gamepad directional navigation and SetKeyboardFocusHere() calls)
    LucyGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  // false     // Disable item being a candidate for default focus (e.g. used by title bar items)
    LucyGuiItemFlags_SelectableDontClosePopup = 1 << 5,  // false     // Disable MenuItem/Selectable() automatically closing their popup window
    LucyGuiItemFlags_MixedValue               = 1 << 6,  // false     // [BETA] Represent a mixed/indeterminate value, generally multi-selection where values differ. Currently only supported by Checkbox() (later should support all sorts of widgets)
    LucyGuiItemFlags_ReadOnly                 = 1 << 7,  // false     // [ALPHA] Allow hovering interactions but underlying value is not changed.
    LucyGuiItemFlags_NoWindowHoverableCheck   = 1 << 8,  // false     // Disable hoverable check in ItemHoverable()
    LucyGuiItemFlags_AllowOverlap             = 1 << 9,  // false     // Allow being overlapped by another widget. Not-hovered to Hovered transition deferred by a frame.

    // Controlled by widget code
    LucyGuiItemFlags_Inputable                = 1 << 10, // false     // [WIP] Auto-activate input mode when tab focused. Currently only used and supported by a few items before it becomes a generic feature.
    LucyGuiItemFlags_HasSelectionUserData     = 1 << 11, // false     // Set by SetNextItemSelectionUserData()
};

// Status flags for an already submitted item
// - output: stored in g.LastItemData.StatusFlags
enum LucyGuiItemStatusFlags_
{
    LucyGuiItemStatusFlags_None               = 0,
    LucyGuiItemStatusFlags_HoveredRect        = 1 << 0,   // Mouse position is within item rectangle (does NOT mean that the window is in correct z-order and can be hovered!, this is only one part of the most-common IsItemHovered test)
    LucyGuiItemStatusFlags_HasDisplayRect     = 1 << 1,   // g.LastItemData.DisplayRect is valid
    LucyGuiItemStatusFlags_Edited             = 1 << 2,   // Value exposed by item was edited in the current frame (should match the bool return value of most widgets)
    LucyGuiItemStatusFlags_ToggledSelection   = 1 << 3,   // Set when Selectable(), TreeNode() reports toggling a selection. We can't report "Selected", only state changes, in order to easily handle clipping with less issues.
    LucyGuiItemStatusFlags_ToggledOpen        = 1 << 4,   // Set when TreeNode() reports toggling their open state.
    LucyGuiItemStatusFlags_HasDeactivated     = 1 << 5,   // Set if the widget/group is able to provide data for the LucyGuiItemStatusFlags_Deactivated flag.
    LucyGuiItemStatusFlags_Deactivated        = 1 << 6,   // Only valid if LucyGuiItemStatusFlags_HasDeactivated is set.
    LucyGuiItemStatusFlags_HoveredWindow      = 1 << 7,   // Override the HoveredWindow test to allow cross-window hover testing.
    LucyGuiItemStatusFlags_Visible            = 1 << 8,   // [WIP] Set when item is overlapping the current clipping rectangle (Used internally. Please don't use yet: API/system will change as we refactor Itemadd()).
    LucyGuiItemStatusFlags_HasClipRect        = 1 << 9,   // g.LastItemData.ClipRect is valid

    // Additional status + semantic for LucyGuiTestEngine
#ifdef LucyGui_ENABLE_TEST_ENGINE
    LucyGuiItemStatusFlags_Openable           = 1 << 20,  // Item is an openable (e.g. TreeNode)
    LucyGuiItemStatusFlags_Opened             = 1 << 21,  // Opened status
    LucyGuiItemStatusFlags_Checkable          = 1 << 22,  // Item is a checkable (e.g. CheckBox, MenuItem)
    LucyGuiItemStatusFlags_Checked            = 1 << 23,  // Checked status
    LucyGuiItemStatusFlags_Inputable          = 1 << 24,  // Item is a text-inputable (e.g. InputText, SliderXXX, DragXXX)
#endif
};

// Extend LucyGuiHoveredFlags_
enum LucyGuiHoveredFlagsPrivate_
{
    LucyGuiHoveredFlags_DelayMask_                    = LucyGuiHoveredFlags_DelayNone | LucyGuiHoveredFlags_DelayShort | LucyGuiHoveredFlags_DelayNormal | LucyGuiHoveredFlags_NoSharedDelay,
    LucyGuiHoveredFlags_AllowedMaskForIsWindowHovered = LucyGuiHoveredFlags_ChildWindows | LucyGuiHoveredFlags_RootWindow | LucyGuiHoveredFlags_AnyWindow | LucyGuiHoveredFlags_NoPopupHierarchy | LucyGuiHoveredFlags_AllowWhenBlockedByPopup | LucyGuiHoveredFlags_AllowWhenBlockedByActiveItem | LucyGuiHoveredFlags_ForTooltip | LucyGuiHoveredFlags_Stationary,
    LucyGuiHoveredFlags_AllowedMaskForIsItemHovered   = LucyGuiHoveredFlags_AllowWhenBlockedByPopup | LucyGuiHoveredFlags_AllowWhenBlockedByActiveItem | LucyGuiHoveredFlags_AllowWhenOverlapped | LucyGuiHoveredFlags_AllowWhenDisabled | LucyGuiHoveredFlags_NoNavOverride | LucyGuiHoveredFlags_ForTooltip | LucyGuiHoveredFlags_Stationary | LucyGuiHoveredFlags_DelayMask_,
};

// Extend LucyGuiInputTextFlags_
enum LucyGuiInputTextFlagsPrivate_
{
    // [Internal]
    LucyGuiInputTextFlags_Multiline           = 1 << 26,  // For internal use by InputTextMultiline()
    LucyGuiInputTextFlags_NoMarkEdited        = 1 << 27,  // For internal use by functions using InputText() before reformatting data
    LucyGuiInputTextFlags_MergedItem          = 1 << 28,  // For internal use by TempInputText(), will skip calling ItemAdd(). Require bounding-box to strictly match.
    LucyGuiInputTextFlags_LocalizeDecimalPoint= 1 << 29,  // For internal use by InputScalar() and TempInputScalar()
};

// Extend LucyGuiButtonFlags_
enum LucyGuiButtonFlagsPrivate_
{
    LucyGuiButtonFlags_PressedOnClick         = 1 << 4,   // return true on click (mouse down event)
    LucyGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   // [Default] return true on click + release on same item <-- this is what the majority of Button are using
    LucyGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, // return true on click + release even if the release event is not done while hovering the item
    LucyGuiButtonFlags_PressedOnRelease       = 1 << 7,   // return true on release (default requires click+release)
    LucyGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   // return true on double-click (default requires click+release)
    LucyGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   // return true when held into while we are drag and dropping another item (used by e.g. tree nodes, collapsing headers)
    LucyGuiButtonFlags_Repeat                 = 1 << 10,  // hold to repeat
    LucyGuiButtonFlags_FlattenChildren        = 1 << 11,  // allow interactions even if a child window is overlapping
    LucyGuiButtonFlags_AllowOverlap           = 1 << 12,  // require previous frame HoveredId to either match id or be null before being usable.
    LucyGuiButtonFlags_DontClosePopups        = 1 << 13,  // disable automatically closing parent popup on press // [UNUSED]
    //LucyGuiButtonFlags_Disabled             = 1 << 14,  // disable interactions -> use BeginDisabled() or LucyGuiItemFlags_Disabled
    LucyGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  // vertically align button to match text baseline - ButtonEx() only // FIXME: Should be removed and handled by SmallButton(), not possible currently because of DC.CursorPosPrevLine
    LucyGuiButtonFlags_NoKeyModifiers         = 1 << 16,  // disable mouse interaction if a key modifier is held
    LucyGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  // don't set ActiveId while holding the mouse (LucyGuiButtonFlags_PressedOnClick only)
    LucyGuiButtonFlags_NoNavFocus             = 1 << 18,  // don't override navigation focus when activated (FIXME: this is essentially used everytime an item uses LucyGuiItemFlags_NoNav, but because legacy specs don't requires LastItemData to be set ButtonBehavior(), we can't poll g.LastItemData.InFlags)
    LucyGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  // don't report as hovered when nav focus is on this item
    LucyGuiButtonFlags_NoSetKeyOwner          = 1 << 20,  // don't set key/input owner on the initial click (note: mouse buttons are keys! often, the key in question will be LucyGuiKey_MouseLeft!)
    LucyGuiButtonFlags_NoTestKeyOwner         = 1 << 21,  // don't test key/input owner when polling the key (note: mouse buttons are keys! often, the key in question will be LucyGuiKey_MouseLeft!)
    LucyGuiButtonFlags_PressedOnMask_         = LucyGuiButtonFlags_PressedOnClick | LucyGuiButtonFlags_PressedOnClickRelease | LucyGuiButtonFlags_PressedOnClickReleaseAnywhere | LucyGuiButtonFlags_PressedOnRelease | LucyGuiButtonFlags_PressedOnDoubleClick | LucyGuiButtonFlags_PressedOnDragDropHold,
    LucyGuiButtonFlags_PressedOnDefault_      = LucyGuiButtonFlags_PressedOnClickRelease,
};

// Extend LucyGuiComboFlags_
enum LucyGuiComboFlagsPrivate_
{
    LucyGuiComboFlags_CustomPreview           = 1 << 20,  // enable BeginComboPreview()
};

// Extend LucyGuiSliderFlags_
enum LucyGuiSliderFlagsPrivate_
{
    LucyGuiSliderFlags_Vertical               = 1 << 20,  // Should this slider be orientated vertically?
    LucyGuiSliderFlags_ReadOnly               = 1 << 21,  // Consider using g.NextItemData.ItemFlags |= LucyGuiItemFlags_ReadOnly instead.
};

// Extend LucyGuiSelectableFlags_
enum LucyGuiSelectableFlagsPrivate_
{
    // NB: need to be in sync with last value of LucyGuiSelectableFlags_
    LucyGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,
    LucyGuiSelectableFlags_SelectOnNav            = 1 << 21,  // (WIP) Auto-select when moved into. This is not exposed in public API as to handle multi-select and modifiers we will need user to explicitly control focus scope. May be replaced with a BeginSelection() API.
    LucyGuiSelectableFlags_SelectOnClick          = 1 << 22,  // Override button behavior to react on Click (default is Click+Release)
    LucyGuiSelectableFlags_SelectOnRelease        = 1 << 23,  // Override button behavior to react on Release (default is Click+Release)
    LucyGuiSelectableFlags_SpanAvailWidth         = 1 << 24,  // Span all avail width even if we declared less for layout purpose. FIXME: We may be able to remove this (added in 6251d379, 2bcafc86 for menus)
    LucyGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,  // Set Nav/Focus ID on mouse hover (used by MenuItem)
    LucyGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26,  // Disable padding each side with ItemSpacing * 0.5f
    LucyGuiSelectableFlags_NoSetKeyOwner          = 1 << 27,  // Don't set key/input owner on the initial click (note: mouse buttons are keys! often, the key in question will be LucyGuiKey_MouseLeft!)
};

// Extend LucyGuiTreeNodeFlags_
enum LucyGuiTreeNodeFlagsPrivate_
{
    LucyGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20,
    LucyGuiTreeNodeFlags_UpsideDownArrow            = 1 << 21,// (FIXME-WIP) Turn Down arrow into an Up arrow, but reversed trees (#6517)
};

enum LucyGuiSeparatorFlags_
{
    LucyGuiSeparatorFlags_None                    = 0,
    LucyGuiSeparatorFlags_Horizontal              = 1 << 0,   // Axis default to current layout type, so generally Horizontal unless e.g. in a menu bar
    LucyGuiSeparatorFlags_Vertical                = 1 << 1,
    LucyGuiSeparatorFlags_SpanAllColumns          = 1 << 2,   // Make separator cover all columns of a legacy Columns() set.
};

// Flags for FocusWindow(). This is not called LucyGuiFocusFlags to avoid confusion with public-facing LucyGuiFocusedFlags.
// FIXME: Once we finishing replacing more uses of GetTopMostPopupModal()+IsWindowWithinBeginStackOf()
// and FindBlockingModal() with this, we may want to change the flag to be opt-out instead of opt-in.
enum LucyGuiFocusRequestFlags_
{
    LucyGuiFocusRequestFlags_None                 = 0,
    LucyGuiFocusRequestFlags_RestoreFocusedChild  = 1 << 0,   // Find last focused child (if any) and focus it instead.
    LucyGuiFocusRequestFlags_UnlessBelowModal     = 1 << 1,   // Do not set focus if the window is below a modal.
};

enum LucyGuiTextFlags_
{
    LucyGuiTextFlags_None                         = 0,
    LucyGuiTextFlags_NoWidthForLargeClippedText   = 1 << 0,
};

enum LucyGuiTooltipFlags_
{
    LucyGuiTooltipFlags_None                      = 0,
    LucyGuiTooltipFlags_OverridePrevious          = 1 << 1,   // Clear/ignore previously submitted tooltip (defaults to append)
};

// FIXME: this is in development, not exposed/functional as a generic feature yet.
// Horizontal/Vertical enums are fixed to 0/1 so they may be used to index ImVec2
enum LucyGuiLayoutType_
{
    LucyGuiLayoutType_Horizontal = 0,
    LucyGuiLayoutType_Vertical = 1
};

enum LucyGuiLogType
{
    LucyGuiLogType_None = 0,
    LucyGuiLogType_TTY,
    LucyGuiLogType_File,
    LucyGuiLogType_Buffer,
    LucyGuiLogType_Clipboard,
};

// X/Y enums are fixed to 0/1 so they may be used to index ImVec2
enum LucyGuiAxis
{
    LucyGuiAxis_None = -1,
    LucyGuiAxis_X = 0,
    LucyGuiAxis_Y = 1
};

enum LucyGuiPlotType
{
    LucyGuiPlotType_Lines,
    LucyGuiPlotType_Histogram,
};

// Stacked color modifier, backup of modified data so we can restore it
struct LucyGuiColorMod
{
    LucyGuiCol        Col;
    ImVec4          BackupValue;
};

// Stacked style modifier, backup of modified data so we can restore it. Data type inferred from the variable.
struct LucyGuiStyleMod
{
    LucyGuiStyleVar   VarIdx;
    union           { int BackupInt[2]; float BackupFloat[2]; };
    LucyGuiStyleMod(LucyGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }
    LucyGuiStyleMod(LucyGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }
    LucyGuiStyleMod(LucyGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloat[1] = v.y; }
};

// Storage data for BeginComboPreview()/EndComboPreview()
struct LucyGui_API LucyGuiComboPreviewData
{
    ImRect          PreviewRect;
    ImVec2          BackupCursorPos;
    ImVec2          BackupCursorMaxPos;
    ImVec2          BackupCursorPosPrevLine;
    float           BackupPrevLineTextBaseOffset;
    LucyGuiLayoutType BackupLayout;

    LucyGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }
};

// Stacked storage data for BeginGroup()/EndGroup()
struct LucyGui_API LucyGuiGroupData
{
    LucyGuiID     WindowID;
    ImVec2      BackupCursorPos;
    ImVec2      BackupCursorMaxPos;
    ImVec2      BackupCursorPosPrevLine;
    ImVec1      BackupIndent;
    ImVec1      BackupGroupOffset;
    ImVec2      BackupCurrLineSize;
    float       BackupCurrLineTextBaseOffset;
    LucyGuiID     BackupActiveIdIsAlive;
    bool        BackupActiveIdPreviousFrameIsAlive;
    bool        BackupHoveredIdIsAlive;
    bool        BackupIsSameLine;
    bool        EmitItem;
};

// Simple column measurement, currently used for MenuItem() only.. This is very short-sighted/throw-away code and NOT a generic helper.
struct LucyGui_API LucyGuiMenuColumns
{
    ImU32       TotalWidth;
    ImU32       NextTotalWidth;
    ImU16       Spacing;
    ImU16       OffsetIcon;         // Always zero for now
    ImU16       OffsetLabel;        // Offsets are locked in Update()
    ImU16       OffsetShortcut;
    ImU16       OffsetMark;
    ImU16       Widths[4];          // Width of:   Icon, Label, Shortcut, Mark  (accumulators for current frame)

    LucyGuiMenuColumns() { memset(this, 0, sizeof(*this)); }
    void        Update(float spacing, bool window_reappearing);
    float       DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark);
    void        CalcNextTotalWidth(bool update_offsets);
};

// Internal temporary state for deactivating InputText() instances.
struct LucyGui_API LucyGuiInputTextDeactivatedState
{
    LucyGuiID            ID;              // widget id owning the text state (which just got deactivated)
    ImVector<char>     TextA;           // text buffer

    LucyGuiInputTextDeactivatedState()    { memset(this, 0, sizeof(*this)); }
    void    ClearFreeMemory()           { ID = 0; TextA.clear(); }
};
// Internal state of the currently focused/edited text input box
// For a given item ID, access with LucyGui::GetInputTextState()
struct LucyGui_API LucyGuiInputTextState
{
    LucyGuiContext*           Ctx;                    // parent UI context (needs to be set explicitly by parent).
    LucyGuiID                 ID;                     // widget id owning the text state
    int                     CurLenW, CurLenA;       // we need to maintain our buffer length in both UTF-8 and wchar format. UTF-8 length is valid even if TextA is not.
    ImVector<ImWchar>       TextW;                  // edit buffer, we need to persist but can't guarantee the persistence of the user-provided buffer. so we copy into own buffer.
    ImVector<char>          TextA;                  // temporary UTF8 buffer for callbacks and other operations. this is not updated in every code-path! size=capacity.
    ImVector<char>          InitialTextA;           // value to revert to when pressing Escape = backup of end-user buffer at the time of focus (in UTF-8, unaltered)
    bool                    TextAIsValid;           // temporary UTF8 buffer is not initially valid before we make the widget active (until then we pull the data from user argument)
    int                     BufCapacityA;           // end-user buffer capacity
    float                   ScrollX;                // horizontal scrolling/offset
    ImStb::STB_TexteditState Stb;                   // state for stb_textedit.h
    float                   CursorAnim;             // timer for cursor blink, reset on every user action so the cursor reappears immediately
    bool                    CursorFollow;           // set when we want scrolling to follow the current cursor position (not always!)
    bool                    SelectedAllMouseLock;   // after a double-click to select all, we ignore further mouse drags to update selection
    bool                    Edited;                 // edited this frame
    LucyGuiInputTextFlags     Flags;                  // copy of InputText() flags. may be used to check if e.g. LucyGuiInputTextFlags_Password is set.
    bool                    ReloadUserBuf;          // force a reload of user buf so it may be modified externally. may be automatic in future version.
    int                     ReloadSelectionStart;   // POSITIONS ARE IN IMWCHAR units *NOT* UTF-8 this is why this is not exposed yet.
    int                     ReloadSelectionEnd;

    LucyGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }
    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0; CursorClamp(); }
    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear(); }
    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }
    int         GetRedoAvailCount() const   { return IMSTB_TEXTEDIT_UNDOSTATECOUNT - Stb.undostate.redo_point; }
    void        OnKeyPressed(int key);      // Cannot be inline because we call in code in stb_textedit.h implementation

    // Cursor & Selection
    void        CursorAnimReset()           { CursorAnim = -0.30f; }                                   // After a user-input the cursor stays on for a while without blinking
    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.select_start = ImMin(Stb.select_start, CurLenW); Stb.select_end = ImMin(Stb.select_end, CurLenW); }
    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }
    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }
    int         GetCursorPos() const        { return Stb.cursor; }
    int         GetSelectionStart() const   { return Stb.select_start; }
    int         GetSelectionEnd() const     { return Stb.select_end; }
    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end = CurLenW; Stb.has_preferred_x = 0; }

    // Reload user buf (WIP #2890)
    // If you modify underlying user-passed const char* while active you need to call this (InputText V2 may lift this)
    //   strcpy(my_buf, "hello");
    //   if (LucyGuiInputTextState* state = LucyGui::GetInputTextState(id)) // id may be LucyGui::GetItemID() is last item
    //       state->ReloadUserBufAndSelectAll();
    void        ReloadUserBufAndSelectAll()     { ReloadUserBuf = true; ReloadSelectionStart = 0; ReloadSelectionEnd = INT_MAX; }
    void        ReloadUserBufAndKeepSelection() { ReloadUserBuf = true; ReloadSelectionStart = Stb.select_start; ReloadSelectionEnd = Stb.select_end; }
    void        ReloadUserBufAndMoveToEnd()     { ReloadUserBuf = true; ReloadSelectionStart = ReloadSelectionEnd = INT_MAX; }

};

enum LucyGuiNextWindowDataFlags_
{
    LucyGuiNextWindowDataFlags_None               = 0,
    LucyGuiNextWindowDataFlags_HasPos             = 1 << 0,
    LucyGuiNextWindowDataFlags_HasSize            = 1 << 1,
    LucyGuiNextWindowDataFlags_HasContentSize     = 1 << 2,
    LucyGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,
    LucyGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,
    LucyGuiNextWindowDataFlags_HasFocus           = 1 << 5,
    LucyGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,
    LucyGuiNextWindowDataFlags_HasScroll          = 1 << 7,
    LucyGuiNextWindowDataFlags_HasChildFlags      = 1 << 8,
};

// Storage for SetNexWindow** functions
struct LucyGuiNextWindowData
{
    LucyGuiNextWindowDataFlags    Flags;
    LucyGuiCond                   PosCond;
    LucyGuiCond                   SizeCond;
    LucyGuiCond                   CollapsedCond;
    ImVec2                      PosVal;
    ImVec2                      PosPivotVal;
    ImVec2                      SizeVal;
    ImVec2                      ContentSizeVal;
    ImVec2                      ScrollVal;
    LucyGuiChildFlags             ChildFlags;
    bool                        CollapsedVal;
    ImRect                      SizeConstraintRect;
    LucyGuiSizeCallback           SizeCallback;
    void*                       SizeCallbackUserData;
    float                       BgAlphaVal;             // Override background alpha
    ImVec2                      MenuBarOffsetMinVal;    // (Always on) This is not exposed publicly, so we don't clear it and it doesn't have a corresponding flag (could we? for consistency?)

    LucyGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }
    inline void ClearFlags()    { Flags = LucyGuiNextWindowDataFlags_None; }
};

// Multi-Selection item index or identifier when using SetNextItemSelectionUserData()/BeginMultiSelect()
// (Most users are likely to use this store an item INDEX but this may be used to store a POINTER as well.)
typedef ImS64 LucyGuiSelectionUserData;

enum LucyGuiNextItemDataFlags_
{
    LucyGuiNextItemDataFlags_None         = 0,
    LucyGuiNextItemDataFlags_HasWidth     = 1 << 0,
    LucyGuiNextItemDataFlags_HasOpen      = 1 << 1,
    LucyGuiNextItemDataFlags_HasShortcut  = 1 << 2,
};

struct LucyGuiNextItemData
{
    LucyGuiNextItemDataFlags      Flags;
    LucyGuiItemFlags              ItemFlags;          // Currently only tested/used for LucyGuiItemFlags_AllowOverlap.
    // Non-flags members are NOT cleared by ItemAdd() meaning they are still valid during NavProcessItem()
    LucyGuiSelectionUserData      SelectionUserData;  // Set by SetNextItemSelectionUserData() (note that NULL/0 is a valid value, we use -1 == LucyGuiSelectionUserData_Invalid to mark invalid values)
    float                       Width;              // Set by SetNextItemWidth()
    LucyGuiKeyChord               Shortcut;           // Set by SetNextItemShortcut()
    bool                        OpenVal;            // Set by SetNextItemOpen()
    LucyGuiCond                   OpenCond : 8;

    LucyGuiNextItemData()         { memset(this, 0, sizeof(*this)); SelectionUserData = -1; }
    inline void ClearFlags()    { Flags = LucyGuiNextItemDataFlags_None; ItemFlags = LucyGuiItemFlags_None; } // Also cleared manually by ItemAdd()!
};

// Status storage for the last submitted item
struct LucyGuiLastItemData
{
    LucyGuiID                 ID;
    LucyGuiItemFlags          InFlags;            // See LucyGuiItemFlags_
    LucyGuiItemStatusFlags    StatusFlags;        // See LucyGuiItemStatusFlags_
    ImRect                  Rect;               // Full rectangle
    ImRect                  NavRect;            // Navigation scoring rectangle (not displayed)
    // Rarely used fields are not explicitly cleared, only valid when the corresponding LucyGuiItemStatusFlags is set.
    ImRect                  DisplayRect;        // Display rectangle (ONLY VALID IF LucyGuiItemStatusFlags_HasDisplayRect is set)
    ImRect                  ClipRect;           // Clip rectangle at the time of submitting item (ONLY VALID IF LucyGuiItemStatusFlags_HasClipRect is set)

    LucyGuiLastItemData()     { memset(this, 0, sizeof(*this)); }
};

// Store data emitted by TreeNode() for usage by TreePop() to implement LucyGuiTreeNodeFlags_NavLeftJumpsBackHere.
// This is the minimum amount of data that we need to perform the equivalent of NavApplyItemToResult() and which we can't infer in TreePop()
// Only stored when the node is a potential candidate for landing on a Left arrow jump.
struct LucyGuiNavTreeNodeData
{
    LucyGuiID                 ID;
    LucyGuiItemFlags          InFlags;
    ImRect                  NavRect;
};

struct LucyGui_API LucyGuiStackSizes
{
    short   SizeOfIDStack;
    short   SizeOfColorStack;
    short   SizeOfStyleVarStack;
    short   SizeOfFontStack;
    short   SizeOfFocusScopeStack;
    short   SizeOfGroupStack;
    short   SizeOfItemFlagsStack;
    short   SizeOfBeginPopupStack;
    short   SizeOfDisabledStack;

    LucyGuiStackSizes() { memset(this, 0, sizeof(*this)); }
    void SetToContextState(LucyGuiContext* ctx);
    void CompareWithContextState(LucyGuiContext* ctx);
};

// Data saved for each window pushed into the stack
struct LucyGuiWindowStackData
{
    LucyGuiWindow*        Window;
    LucyGuiLastItemData   ParentLastItemDataBackup;
    LucyGuiStackSizes     StackSizesOnBegin;      // Store size of various stacks for asserting
};

struct LucyGuiShrinkWidthItem
{
    int         Index;
    float       Width;
    float       InitialWidth;
};

struct LucyGuiPtrOrIndex
{
    void*       Ptr;            // Either field can be set, not both. e.g. Dock node tab bars are loose while BeginTabBar() ones are in a pool.
    int         Index;          // Usually index in a main pool.

    LucyGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }
    LucyGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }
};

//-----------------------------------------------------------------------------
// [SECTION] Data types support
//-----------------------------------------------------------------------------

struct LucyGuiDataVarInfo
{
    LucyGuiDataType   Type;
    ImU32           Count;      // 1+
    ImU32           Offset;     // Offset in parent structure
    void* GetVarPtr(void* parent) const { return (void*)((unsigned char*)parent + Offset); }
};

struct LucyGuiDataTypeTempStorage
{
    ImU8        Data[8];        // Can fit any data up to LucyGuiDataType_COUNT
};

// Type information associated to one LucyGuiDataType. Retrieve with DataTypeGetInfo().
struct LucyGuiDataTypeInfo
{
    size_t      Size;           // Size in bytes
    const char* Name;           // Short descriptive name for the type, for debugging
    const char* PrintFmt;       // Default printf format for the type
    const char* ScanFmt;        // Default scanf format for the type
};

// Extend LucyGuiDataType_
enum LucyGuiDataTypePrivate_
{
    LucyGuiDataType_String = LucyGuiDataType_COUNT + 1,
    LucyGuiDataType_Pointer,
    LucyGuiDataType_ID,
};

//-----------------------------------------------------------------------------
// [SECTION] Popup support
//-----------------------------------------------------------------------------

enum LucyGuiPopupPositionPolicy
{
    LucyGuiPopupPositionPolicy_Default,
    LucyGuiPopupPositionPolicy_ComboBox,
    LucyGuiPopupPositionPolicy_Tooltip,
};

// Storage for popup stacks (g.OpenPopupStack and g.BeginPopupStack)
struct LucyGuiPopupData
{
    LucyGuiID             PopupId;        // Set on OpenPopup()
    LucyGuiWindow*        Window;         // Resolved on BeginPopup() - may stay unresolved if user never calls OpenPopup()
    LucyGuiWindow*        RestoreNavWindow;// Set on OpenPopup(), a NavWindow that will be restored on popup close
    int                 ParentNavLayer; // Resolved on BeginPopup(). Actually a LucyGuiNavLayer type (declared down below), initialized to -1 which is not part of an enum, but serves well-enough as "not any of layers" value
    int                 OpenFrameCount; // Set on OpenPopup()
    LucyGuiID             OpenParentId;   // Set on OpenPopup(), we need this to differentiate multiple menu sets from each others (e.g. inside menu bar vs loose menu items)
    ImVec2              OpenPopupPos;   // Set on OpenPopup(), preferred popup position (typically == OpenMousePos when using mouse)
    ImVec2              OpenMousePos;   // Set on OpenPopup(), copy of mouse position at the time of opening popup

    LucyGuiPopupData()    { memset(this, 0, sizeof(*this)); ParentNavLayer = OpenFrameCount = -1; }
};

//-----------------------------------------------------------------------------
// [SECTION] Inputs support
//-----------------------------------------------------------------------------

// Bit array for named keys
typedef ImBitArray<LucyGuiKey_NamedKey_COUNT, -LucyGuiKey_NamedKey_BEGIN>    ImBitArrayForNamedKeys;

// [Internal] Key ranges
#define LucyGuiKey_LegacyNativeKey_BEGIN  0
#define LucyGuiKey_LegacyNativeKey_END    512
#define LucyGuiKey_Keyboard_BEGIN         (LucyGuiKey_NamedKey_BEGIN)
#define LucyGuiKey_Keyboard_END           (LucyGuiKey_GamepadStart)
#define LucyGuiKey_Gamepad_BEGIN          (LucyGuiKey_GamepadStart)
#define LucyGuiKey_Gamepad_END            (LucyGuiKey_GamepadRStickDown + 1)
#define LucyGuiKey_Mouse_BEGIN            (LucyGuiKey_MouseLeft)
#define LucyGuiKey_Mouse_END              (LucyGuiKey_MouseWheelY + 1)
#define LucyGuiKey_Aliases_BEGIN          (LucyGuiKey_Mouse_BEGIN)
#define LucyGuiKey_Aliases_END            (LucyGuiKey_Mouse_END)

// [Internal] Named shortcuts for Navigation
#define LucyGuiKey_NavKeyboardTweakSlow   LucyGuiMod_Ctrl
#define LucyGuiKey_NavKeyboardTweakFast   LucyGuiMod_Shift
#define LucyGuiKey_NavGamepadTweakSlow    LucyGuiKey_GamepadL1
#define LucyGuiKey_NavGamepadTweakFast    LucyGuiKey_GamepadR1
#define LucyGuiKey_NavGamepadActivate     LucyGuiKey_GamepadFaceDown
#define LucyGuiKey_NavGamepadCancel       LucyGuiKey_GamepadFaceRight
#define LucyGuiKey_NavGamepadMenu         LucyGuiKey_GamepadFaceLeft
#define LucyGuiKey_NavGamepadInput        LucyGuiKey_GamepadFaceUp

enum LucyGuiInputEventType
{
    LucyGuiInputEventType_None = 0,
    LucyGuiInputEventType_MousePos,
    LucyGuiInputEventType_MouseWheel,
    LucyGuiInputEventType_MouseButton,
    LucyGuiInputEventType_Key,
    LucyGuiInputEventType_Text,
    LucyGuiInputEventType_Focus,
    LucyGuiInputEventType_COUNT
};

enum LucyGuiInputSource
{
    LucyGuiInputSource_None = 0,
    LucyGuiInputSource_Mouse,         // Note: may be Mouse or TouchScreen or Pen. See io.MouseSource to distinguish them.
    LucyGuiInputSource_Keyboard,
    LucyGuiInputSource_Gamepad,
    LucyGuiInputSource_COUNT
};

// FIXME: Structures in the union below need to be declared as anonymous unions appears to be an extension?
// Using ImVec2() would fail on Clang 'union member 'MousePos' has a non-trivial default constructor'
struct LucyGuiInputEventMousePos      { float PosX, PosY; LucyGuiMouseSource MouseSource; };
struct LucyGuiInputEventMouseWheel    { float WheelX, WheelY; LucyGuiMouseSource MouseSource; };
struct LucyGuiInputEventMouseButton   { int Button; bool Down; LucyGuiMouseSource MouseSource; };
struct LucyGuiInputEventKey           { LucyGuiKey Key; bool Down; float AnalogValue; };
struct LucyGuiInputEventText          { unsigned int Char; };
struct LucyGuiInputEventAppFocused    { bool Focused; };

struct LucyGuiInputEvent
{
    LucyGuiInputEventType             Type;
    LucyGuiInputSource                Source;
    ImU32                           EventId;        // Unique, sequential increasing integer to identify an event (if you need to correlate them to other data).
    union
    {
        LucyGuiInputEventMousePos     MousePos;       // if Type == LucyGuiInputEventType_MousePos
        LucyGuiInputEventMouseWheel   MouseWheel;     // if Type == LucyGuiInputEventType_MouseWheel
        LucyGuiInputEventMouseButton  MouseButton;    // if Type == LucyGuiInputEventType_MouseButton
        LucyGuiInputEventKey          Key;            // if Type == LucyGuiInputEventType_Key
        LucyGuiInputEventText         Text;           // if Type == LucyGuiInputEventType_Text
        LucyGuiInputEventAppFocused   AppFocused;     // if Type == LucyGuiInputEventType_Focus
    };
    bool                            AddedByTestEngine;

    LucyGuiInputEvent() { memset(this, 0, sizeof(*this)); }
};

// Input function taking an 'LucyGuiID owner_id' argument defaults to (LucyGuiKeyOwner_Any == 0) aka don't test ownership, which matches legacy behavior.
#define LucyGuiKeyOwner_Any           ((LucyGuiID)0)    // Accept key that have an owner, UNLESS a call to SetKeyOwner() explicitly used LucyGuiInputFlags_LockThisFrame or LucyGuiInputFlags_LockUntilRelease.
#define LucyGuiKeyOwner_None          ((LucyGuiID)-1)   // Require key to have no owner.

typedef ImS16 LucyGuiKeyRoutingIndex;

// Routing table entry (sizeof() == 16 bytes)
struct LucyGuiKeyRoutingData
{
    LucyGuiKeyRoutingIndex            NextEntryIndex;
    ImU16                           Mods;               // Technically we'd only need 4-bits but for simplify we store LucyGuiMod_ values which need 16-bits. LucyGuiMod_Shortcut is already translated to Ctrl/Super.
    ImU8                            RoutingCurrScore;   // [DEBUG] For debug display
    ImU8                            RoutingNextScore;   // Lower is better (0: perfect score)
    LucyGuiID                         RoutingCurr;
    LucyGuiID                         RoutingNext;

    LucyGuiKeyRoutingData()           { NextEntryIndex = -1; Mods = 0; RoutingCurrScore = RoutingNextScore = 255; RoutingCurr = RoutingNext = LucyGuiKeyOwner_None; }
};

// Routing table: maintain a desired owner for each possible key-chord (key + mods), and setup owner in NewFrame() when mods are matching.
// Stored in main context (1 instance)
struct LucyGuiKeyRoutingTable
{
    LucyGuiKeyRoutingIndex            Index[LucyGuiKey_NamedKey_COUNT]; // Index of first entry in Entries[]
    ImVector<LucyGuiKeyRoutingData>   Entries;
    ImVector<LucyGuiKeyRoutingData>   EntriesNext;                    // Double-buffer to avoid reallocation (could use a shared buffer)

    LucyGuiKeyRoutingTable()          { Clear(); }
    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Index); n++) Index[n] = -1; Entries.clear(); EntriesNext.clear(); }
};

// This extends LucyGuiKeyData but only for named keys (legacy keys don't support the new features)
// Stored in main context (1 per named key). In the future it might be merged into LucyGuiKeyData.
struct LucyGuiKeyOwnerData
{
    LucyGuiID     OwnerCurr;
    LucyGuiID     OwnerNext;
    bool        LockThisFrame;      // Reading this key requires explicit owner id (until end of frame). Set by LucyGuiInputFlags_LockThisFrame.
    bool        LockUntilRelease;   // Reading this key requires explicit owner id (until key is released). Set by LucyGuiInputFlags_LockUntilRelease. When this is true LockThisFrame is always true as well.

    LucyGuiKeyOwnerData()             { OwnerCurr = OwnerNext = LucyGuiKeyOwner_None; LockThisFrame = LockUntilRelease = false; }
};

// Flags for extended versions of IsKeyPressed(), IsMouseClicked(), Shortcut(), SetKeyOwner(), SetItemKeyOwner()
// Don't mistake with LucyGuiInputTextFlags! (which is for LucyGui::InputText() function)
enum LucyGuiInputFlags_
{
    // Flags for IsKeyPressed(), IsKeyChordPressed(), IsMouseClicked(), Shortcut()
    LucyGuiInputFlags_None                = 0,

    // Repeat mode
    LucyGuiInputFlags_Repeat              = 1 << 0,   // Enable repeat. Return true on successive repeats. Default for legacy IsKeyPressed(). NOT Default for legacy IsMouseClicked(). MUST BE == 1.
    LucyGuiInputFlags_RepeatRateDefault   = 1 << 1,   // Repeat rate: Regular (default)
    LucyGuiInputFlags_RepeatRateNavMove   = 1 << 2,   // Repeat rate: Fast
    LucyGuiInputFlags_RepeatRateNavTweak  = 1 << 3,   // Repeat rate: Faster

    // Repeat mode: Specify when repeating key pressed can be interrupted.
    // In theory LucyGuiInputFlags_RepeatUntilOtherKeyPress may be a desirable default, but it would break too many behavior so everything is opt-in.
    LucyGuiInputFlags_RepeatUntilRelease               = 1 << 4,  // Stop repeating when released (default for all functions except Shortcut). This only exists to allow overriding Shortcut() default behavior.
    LucyGuiInputFlags_RepeatUntilKeyModsChange         = 1 << 5,  // Stop repeating when released OR if keyboard mods are changed (default for Shortcut)
    LucyGuiInputFlags_RepeatUntilKeyModsChangeFromNone = 1 << 6,  // Stop repeating when released OR if keyboard mods are leaving the None state. Allows going from Mod+Key to Key by releasing Mod.
    LucyGuiInputFlags_RepeatUntilOtherKeyPress         = 1 << 7,  // Stop repeating when released OR if any other keyboard key is pressed during the repeat

    // Flags for SetItemKeyOwner()
    LucyGuiInputFlags_CondHovered         = 1 << 8,   // Only set if item is hovered (default to both)
    LucyGuiInputFlags_CondActive          = 1 << 9,   // Only set if item is active (default to both)
    LucyGuiInputFlags_CondDefault_        = LucyGuiInputFlags_CondHovered | LucyGuiInputFlags_CondActive,

    // Flags for SetKeyOwner(), SetItemKeyOwner()
    // Locking is useful to make input-owner-aware code steal keys from non-input-owner-aware code. If all code is input-owner-aware locking would never be necessary.
    LucyGuiInputFlags_LockThisFrame       = 1 << 10,  // Further accesses to key data will require EXPLICIT owner ID (LucyGuiKeyOwner_Any/0 will NOT accepted for polling). Cleared at end of frame.
    LucyGuiInputFlags_LockUntilRelease    = 1 << 11,  // Further accesses to key data will require EXPLICIT owner ID (LucyGuiKeyOwner_Any/0 will NOT accepted for polling). Cleared when the key is released or at end of each frame if key is released.

    // Routing policies for Shortcut() + low-level SetShortcutRouting()
    // - The general idea is that several callers register interest in a shortcut, and only one owner gets it.
    //      Parent   -> call Shortcut(Ctrl+S)    // When Parent is focused, Parent gets the shortcut.
    //        Child1 -> call Shortcut(Ctrl+S)    // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)
    //        Child2 -> no call                  // When Child2 is focused, Parent gets the shortcut.
    //   The whole system is order independent, so if Child1 does it calls before Parent results will be identical.
    //   This is an important property as it facilitate working with foreign code or larger codebase.
    // - Visualize registered routes in 'Metrics->Inputs' and submitted routes in 'Debug Log->InputRouting'.
    // - When a policy (except for _RouteAlways *) is set, Shortcut() will register itself with SetShortcutRouting(),
    //   allowing the system to decide where to route the input among other route-aware calls.
    //   (* Using LucyGuiInputFlags_RouteAlways is roughly equivalent to calling IsKeyChordPressed(key)).
    // - Shortcut() uses LucyGuiInputFlags_RouteFocused by default. Meaning that a Shortcut() call will register
    //   a route and only succeed when parent window is in the focus-stack and if no-one with a higher priority
    //   is claiming the same shortcut.
    // - You can chain two unrelated windows in the focus stack using SetWindowParentWindowForFocusRoute().
    // - Priorities: GlobalHigh > Focused (when owner is active item) > Global > Focused (when focused window) > GlobalLow.
    // - Can select only 1 policy among all available.
    LucyGuiInputFlags_RouteFocused        = 1 << 12,  // (Default) Honor focus route: Accept inputs if window is in focus stack. Deep-most focused window takes inputs. ActiveId takes inputs over deep-most focused window.
    LucyGuiInputFlags_RouteGlobalLow      = 1 << 13,  // Register route globally (lowest priority: unless a focused window or active item registered the route) -> recommended Global priority IF you need a Global priority.
    LucyGuiInputFlags_RouteGlobal         = 1 << 14,  // Register route globally (medium priority: unless an active item registered the route, e.g. CTRL+A registered by InputText will take priority over this).
    LucyGuiInputFlags_RouteGlobalHigh     = 1 << 15,  // Register route globally (higher priority: unlikely you need to use that: will interfere with every active items, e.g. CTRL+A registered by InputText will be overriden by this)
    LucyGuiInputFlags_RouteAlways         = 1 << 16,  // Do not register route, poll keys directly.
    // Routing polices: extra options
    LucyGuiInputFlags_RouteUnlessBgFocused= 1 << 17,  // Global routes will not be applied if underlying background/void is focused (== no Dear LucyGui windows are focused). Useful for overlay applications.

    // [Internal] Mask of which function support which flags
    LucyGuiInputFlags_RepeatRateMask_             = LucyGuiInputFlags_RepeatRateDefault | LucyGuiInputFlags_RepeatRateNavMove | LucyGuiInputFlags_RepeatRateNavTweak,
    LucyGuiInputFlags_RepeatUntilMask_            = LucyGuiInputFlags_RepeatUntilRelease | LucyGuiInputFlags_RepeatUntilKeyModsChange | LucyGuiInputFlags_RepeatUntilKeyModsChangeFromNone | LucyGuiInputFlags_RepeatUntilOtherKeyPress,
    LucyGuiInputFlags_RepeatMask_                 = LucyGuiInputFlags_Repeat | LucyGuiInputFlags_RepeatRateMask_ | LucyGuiInputFlags_RepeatUntilMask_,
    LucyGuiInputFlags_CondMask_                   = LucyGuiInputFlags_CondHovered | LucyGuiInputFlags_CondActive,
    LucyGuiInputFlags_RouteMask_                  = LucyGuiInputFlags_RouteFocused | LucyGuiInputFlags_RouteGlobal | LucyGuiInputFlags_RouteGlobalLow | LucyGuiInputFlags_RouteGlobalHigh, // _Always not part of this!
    LucyGuiInputFlags_SupportedByIsKeyPressed     = LucyGuiInputFlags_RepeatMask_,
    LucyGuiInputFlags_SupportedByIsMouseClicked   = LucyGuiInputFlags_Repeat,
    LucyGuiInputFlags_SupportedByShortcut         = LucyGuiInputFlags_RepeatMask_ | LucyGuiInputFlags_RouteMask_ | LucyGuiInputFlags_RouteAlways | LucyGuiInputFlags_RouteUnlessBgFocused,
    LucyGuiInputFlags_SupportedBySetKeyOwner      = LucyGuiInputFlags_LockThisFrame | LucyGuiInputFlags_LockUntilRelease,
    LucyGuiInputFlags_SupportedBySetItemKeyOwner  = LucyGuiInputFlags_SupportedBySetKeyOwner | LucyGuiInputFlags_CondMask_,
};

//-----------------------------------------------------------------------------
// [SECTION] Clipper support
//-----------------------------------------------------------------------------

// Note that Max is exclusive, so perhaps should be using a Begin/End convention.
struct LucyGuiListClipperRange
{
    int     Min;
    int     Max;
    bool    PosToIndexConvert;      // Begin/End are absolute position (will be converted to indices later)
    ImS8    PosToIndexOffsetMin;    // Add to Min after converting to indices
    ImS8    PosToIndexOffsetMax;    // Add to Min after converting to indices

    static LucyGuiListClipperRange    FromIndices(int min, int max)                               { LucyGuiListClipperRange r = { min, max, false, 0, 0 }; return r; }
    static LucyGuiListClipperRange    FromPositions(float y1, float y2, int off_min, int off_max) { LucyGuiListClipperRange r = { (int)y1, (int)y2, true, (ImS8)off_min, (ImS8)off_max }; return r; }
};

// Temporary clipper data, buffers shared/reused between instances
struct LucyGuiListClipperData
{
    LucyGuiListClipper*               ListClipper;
    float                           LossynessOffset;
    int                             StepNo;
    int                             ItemsFrozen;
    ImVector<LucyGuiListClipperRange> Ranges;

    LucyGuiListClipperData()          { memset(this, 0, sizeof(*this)); }
    void                            Reset(LucyGuiListClipper* clipper) { ListClipper = clipper; StepNo = ItemsFrozen = 0; Ranges.resize(0); }
};

//-----------------------------------------------------------------------------
// [SECTION] Navigation support
//-----------------------------------------------------------------------------

enum LucyGuiActivateFlags_
{
    LucyGuiActivateFlags_None                 = 0,
    LucyGuiActivateFlags_PreferInput          = 1 << 0,       // Favor activation that requires keyboard text input (e.g. for Slider/Drag). Default for Enter key.
    LucyGuiActivateFlags_PreferTweak          = 1 << 1,       // Favor activation for tweaking with arrows or gamepad (e.g. for Slider/Drag). Default for Space key and if keyboard is not used.
    LucyGuiActivateFlags_TryToPreserveState   = 1 << 2,       // Request widget to preserve state if it can (e.g. InputText will try to preserve cursor/selection)
    LucyGuiActivateFlags_FromTabbing          = 1 << 3,       // Activation requested by a tabbing request
    LucyGuiActivateFlags_FromShortcut         = 1 << 4,       // Activation requested by an item shortcut via SetNextItemShortcut() function.
};

// Early work-in-progress API for ScrollToItem()
enum LucyGuiScrollFlags_
{
    LucyGuiScrollFlags_None                   = 0,
    LucyGuiScrollFlags_KeepVisibleEdgeX       = 1 << 0,       // If item is not visible: scroll as little as possible on X axis to bring item back into view [default for X axis]
    LucyGuiScrollFlags_KeepVisibleEdgeY       = 1 << 1,       // If item is not visible: scroll as little as possible on Y axis to bring item back into view [default for Y axis for windows that are already visible]
    LucyGuiScrollFlags_KeepVisibleCenterX     = 1 << 2,       // If item is not visible: scroll to make the item centered on X axis [rarely used]
    LucyGuiScrollFlags_KeepVisibleCenterY     = 1 << 3,       // If item is not visible: scroll to make the item centered on Y axis
    LucyGuiScrollFlags_AlwaysCenterX          = 1 << 4,       // Always center the result item on X axis [rarely used]
    LucyGuiScrollFlags_AlwaysCenterY          = 1 << 5,       // Always center the result item on Y axis [default for Y axis for appearing window)
    LucyGuiScrollFlags_NoScrollParent         = 1 << 6,       // Disable forwarding scrolling to parent window if required to keep item/rect visible (only scroll window the function was applied to).
    LucyGuiScrollFlags_MaskX_                 = LucyGuiScrollFlags_KeepVisibleEdgeX | LucyGuiScrollFlags_KeepVisibleCenterX | LucyGuiScrollFlags_AlwaysCenterX,
    LucyGuiScrollFlags_MaskY_                 = LucyGuiScrollFlags_KeepVisibleEdgeY | LucyGuiScrollFlags_KeepVisibleCenterY | LucyGuiScrollFlags_AlwaysCenterY,
};

enum LucyGuiNavHighlightFlags_
{
    LucyGuiNavHighlightFlags_None             = 0,
    LucyGuiNavHighlightFlags_Compact          = 1 << 1,       // Compact highlight, no padding
    LucyGuiNavHighlightFlags_AlwaysDraw       = 1 << 2,       // Draw rectangular highlight if (g.NavId == id) _even_ when using the mouse.
    LucyGuiNavHighlightFlags_NoRounding       = 1 << 3,
};

enum LucyGuiNavMoveFlags_
{
    LucyGuiNavMoveFlags_None                  = 0,
    LucyGuiNavMoveFlags_LoopX                 = 1 << 0,   // On failed request, restart from opposite side
    LucyGuiNavMoveFlags_LoopY                 = 1 << 1,
    LucyGuiNavMoveFlags_WrapX                 = 1 << 2,   // On failed request, request from opposite side one line down (when NavDir==right) or one line up (when NavDir==left)
    LucyGuiNavMoveFlags_WrapY                 = 1 << 3,   // This is not super useful but provided for completeness
    LucyGuiNavMoveFlags_WrapMask_             = LucyGuiNavMoveFlags_LoopX | LucyGuiNavMoveFlags_LoopY | LucyGuiNavMoveFlags_WrapX | LucyGuiNavMoveFlags_WrapY,
    LucyGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   // Allow scoring and considering the current NavId as a move target candidate. This is used when the move source is offset (e.g. pressing PageDown actually needs to send a Up move request, if we are pressing PageDown from the bottom-most item we need to stay in place)
    LucyGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   // Store alternate result in NavMoveResultLocalVisible that only comprise elements that are already fully visible (used by PageUp/PageDown)
    LucyGuiNavMoveFlags_ScrollToEdgeY         = 1 << 6,   // Force scrolling to min/max (used by Home/End) // FIXME-NAV: Aim to remove or reword, probably unnecessary
    LucyGuiNavMoveFlags_Forwarded             = 1 << 7,
    LucyGuiNavMoveFlags_DebugNoResult         = 1 << 8,   // Dummy scoring for debug purpose, don't apply result
    LucyGuiNavMoveFlags_FocusApi              = 1 << 9,   // Requests from focus API can land/focus/activate items even if they are marked with _NoTabStop (see NavProcessItemForTabbingRequest() for details)
    LucyGuiNavMoveFlags_IsTabbing             = 1 << 10,  // == Focus + Activate if item is Inputable + DontChangeNavHighlight
    LucyGuiNavMoveFlags_IsPageMove            = 1 << 11,  // Identify a PageDown/PageUp request.
    LucyGuiNavMoveFlags_Activate              = 1 << 12,  // Activate/select target item.
    LucyGuiNavMoveFlags_NoSelect              = 1 << 13,  // Don't trigger selection by not setting g.NavJustMovedTo
    LucyGuiNavMoveFlags_NoSetNavHighlight     = 1 << 14,  // Do not alter the visible state of keyboard vs mouse nav highlight
    LucyGuiNavMoveFlags_NoClearActiveId       = 1 << 15,  // (Experimental) Do not clear active id when applying move result
};

enum LucyGuiNavLayer
{
    LucyGuiNavLayer_Main  = 0,    // Main scrolling layer
    LucyGuiNavLayer_Menu  = 1,    // Menu layer (access with Alt)
    LucyGuiNavLayer_COUNT
};

struct LucyGuiNavItemData
{
    LucyGuiWindow*        Window;         // Init,Move    // Best candidate window (result->ItemWindow->RootWindowForNav == request->Window)
    LucyGuiID             ID;             // Init,Move    // Best candidate item ID
    LucyGuiID             FocusScopeId;   // Init,Move    // Best candidate focus scope ID
    ImRect              RectRel;        // Init,Move    // Best candidate bounding box in window relative space
    LucyGuiItemFlags      InFlags;        // ????,Move    // Best candidate item flags
    LucyGuiSelectionUserData SelectionUserData;//I+Mov    // Best candidate SetNextItemSelectionData() value.
    float               DistBox;        //      Move    // Best candidate box distance to current NavId
    float               DistCenter;     //      Move    // Best candidate center distance to current NavId
    float               DistAxial;      //      Move    // Best candidate axial distance to current NavId

    LucyGuiNavItemData()  { Clear(); }
    void Clear()        { Window = NULL; ID = FocusScopeId = 0; InFlags = 0; SelectionUserData = -1; DistBox = DistCenter = DistAxial = FLT_MAX; }
};

struct LucyGuiFocusScopeData
{
    LucyGuiID             ID;
    LucyGuiID             WindowID;
};

//-----------------------------------------------------------------------------
// [SECTION] Typing-select support
//-----------------------------------------------------------------------------

// Flags for GetTypingSelectRequest()
enum LucyGuiTypingSelectFlags_
{
    LucyGuiTypingSelectFlags_None                 = 0,
    LucyGuiTypingSelectFlags_AllowBackspace       = 1 << 0,   // Backspace to delete character inputs. If using: ensure GetTypingSelectRequest() is not called more than once per frame (filter by e.g. focus state)
    LucyGuiTypingSelectFlags_AllowSingleCharMode  = 1 << 1,   // Allow "single char" search mode which is activated when pressing the same character multiple times.
};

// Returned by GetTypingSelectRequest(), designed to eventually be public.
struct LucyGui_API LucyGuiTypingSelectRequest
{
    LucyGuiTypingSelectFlags  Flags;              // Flags passed to GetTypingSelectRequest()
    int                     SearchBufferLen;
    const char*             SearchBuffer;       // Search buffer contents (use full string. unless SingleCharMode is set, in which case use SingleCharSize).
    bool                    SelectRequest;      // Set when buffer was modified this frame, requesting a selection.
    bool                    SingleCharMode;     // Notify when buffer contains same character repeated, to implement special mode. In this situation it preferred to not display any on-screen search indication.
    ImS8                    SingleCharSize;     // Length in bytes of first letter codepoint (1 for ascii, 2-4 for UTF-8). If (SearchBufferLen==RepeatCharSize) only 1 letter has been input.
};

// Storage for GetTypingSelectRequest()
struct LucyGui_API LucyGuiTypingSelectState
{
    LucyGuiTypingSelectRequest Request;           // User-facing data
    char            SearchBuffer[64];           // Search buffer: no need to make dynamic as this search is very transient.
    LucyGuiID         FocusScope;
    int             LastRequestFrame = 0;
    float           LastRequestTime = 0.0f;
    bool            SingleCharModeLock = false; // After a certain single char repeat count we lock into SingleCharMode. Two benefits: 1) buffer never fill, 2) we can provide an immediate SingleChar mode without timer elapsing.

    LucyGuiTypingSelectState() { memset(this, 0, sizeof(*this)); }
    void            Clear()  { SearchBuffer[0] = 0; SingleCharModeLock = false; } // We preserve remaining data for easier debugging
};

//-----------------------------------------------------------------------------
// [SECTION] Columns support
//-----------------------------------------------------------------------------

// Flags for internal's BeginColumns(). This is an obsolete API. Prefer using BeginTable() nowadays!
enum LucyGuiOldColumnFlags_
{
    LucyGuiOldColumnFlags_None                    = 0,
    LucyGuiOldColumnFlags_NoBorder                = 1 << 0,   // Disable column dividers
    LucyGuiOldColumnFlags_NoResize                = 1 << 1,   // Disable resizing columns when clicking on the dividers
    LucyGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,   // Disable column width preservation when adjusting columns
    LucyGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,   // Disable forcing columns to fit within window
    LucyGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4,   // Restore pre-1.51 behavior of extending the parent window contents size but _without affecting the columns width at all_. Will eventually remove.

    // Obsolete names (will be removed)
#ifndef LucyGui_DISABLE_OBSOLETE_FUNCTIONS
    //LucyGuiColumnsFlags_None                    = LucyGuiOldColumnFlags_None,
    //LucyGuiColumnsFlags_NoBorder                = LucyGuiOldColumnFlags_NoBorder,
    //LucyGuiColumnsFlags_NoResize                = LucyGuiOldColumnFlags_NoResize,
    //LucyGuiColumnsFlags_NoPreserveWidths        = LucyGuiOldColumnFlags_NoPreserveWidths,
    //LucyGuiColumnsFlags_NoForceWithinWindow     = LucyGuiOldColumnFlags_NoForceWithinWindow,
    //LucyGuiColumnsFlags_GrowParentContentsSize  = LucyGuiOldColumnFlags_GrowParentContentsSize,
#endif
};

struct LucyGuiOldColumnData
{
    float               OffsetNorm;             // Column start offset, normalized 0.0 (far left) -> 1.0 (far right)
    float               OffsetNormBeforeResize;
    LucyGuiOldColumnFlags Flags;                  // Not exposed
    ImRect              ClipRect;

    LucyGuiOldColumnData() { memset(this, 0, sizeof(*this)); }
};

struct LucyGuiOldColumns
{
    LucyGuiID             ID;
    LucyGuiOldColumnFlags Flags;
    bool                IsFirstFrame;
    bool                IsBeingResized;
    int                 Current;
    int                 Count;
    float               OffMinX, OffMaxX;       // Offsets from HostWorkRect.Min.x
    float               LineMinY, LineMaxY;
    float               HostCursorPosY;         // Backup of CursorPos at the time of BeginColumns()
    float               HostCursorMaxPosX;      // Backup of CursorMaxPos at the time of BeginColumns()
    ImRect              HostInitialClipRect;    // Backup of ClipRect at the time of BeginColumns()
    ImRect              HostBackupClipRect;     // Backup of ClipRect during PushColumnsBackground()/PopColumnsBackground()
    ImRect              HostBackupParentWorkRect;//Backup of WorkRect at the time of BeginColumns()
    ImVector<LucyGuiOldColumnData> Columns;
    ImDrawListSplitter  Splitter;

    LucyGuiOldColumns()   { memset(this, 0, sizeof(*this)); }
};

//-----------------------------------------------------------------------------
// [SECTION] Multi-select support
//-----------------------------------------------------------------------------

// We always assume that -1 is an invalid value (which works for indices and pointers)
#define LucyGuiSelectionUserData_Invalid        ((LucyGuiSelectionUserData)-1)

#ifdef LucyGui_HAS_MULTI_SELECT
// <this is filled in 'range_select' branch>
#endif // #ifdef LucyGui_HAS_MULTI_SELECT

//-----------------------------------------------------------------------------
// [SECTION] Docking support
//-----------------------------------------------------------------------------

#ifdef LucyGui_HAS_DOCK
// <this is filled in 'docking' branch>
#endif // #ifdef LucyGui_HAS_DOCK

//-----------------------------------------------------------------------------
// [SECTION] Viewport support
//-----------------------------------------------------------------------------

// LucyGuiViewport Private/Internals fields (cardinal sin: we are using inheritance!)
// Every instance of LucyGuiViewport is in fact a LucyGuiViewportP.
struct LucyGuiViewportP : public LucyGuiViewport
{
    int                 BgFgDrawListsLastFrame[2]; // Last frame number the background (0) and foreground (1) draw lists were used
    ImDrawList*         BgFgDrawLists[2];       // Convenience background (0) and foreground (1) draw lists. We use them to draw software mouser cursor when io.MouseDrawCursor is set and to draw most debug overlays.
    ImDrawData          DrawDataP;
    ImDrawDataBuilder   DrawDataBuilder;        // Temporary data while building final ImDrawData
    ImVec2              WorkOffsetMin;          // Work Area: Offset from Pos to top-left corner of Work Area. Generally (0,0) or (0,+main_menu_bar_height). Work Area is Full Area but without menu-bars/status-bars (so WorkArea always fit inside Pos/Size!)
    ImVec2              WorkOffsetMax;          // Work Area: Offset from Pos+Size to bottom-right corner of Work Area. Generally (0,0) or (0,-status_bar_height).
    ImVec2              BuildWorkOffsetMin;     // Work Area: Offset being built during current frame. Generally >= 0.0f.
    ImVec2              BuildWorkOffsetMax;     // Work Area: Offset being built during current frame. Generally <= 0.0f.

    LucyGuiViewportP()    { BgFgDrawListsLastFrame[0] = BgFgDrawListsLastFrame[1] = -1; BgFgDrawLists[0] = BgFgDrawLists[1] = NULL; }
    ~LucyGuiViewportP()   { if (BgFgDrawLists[0]) IM_DELETE(BgFgDrawLists[0]); if (BgFgDrawLists[1]) IM_DELETE(BgFgDrawLists[1]); }

    // Calculate work rect pos/size given a set of offset (we have 1 pair of offset for rect locked from last frame data, and 1 pair for currently building rect)
    ImVec2  CalcWorkRectPos(const ImVec2& off_min) const                            { return ImVec2(Pos.x + off_min.x, Pos.y + off_min.y); }
    ImVec2  CalcWorkRectSize(const ImVec2& off_min, const ImVec2& off_max) const    { return ImVec2(ImMax(0.0f, Size.x - off_min.x + off_max.x), ImMax(0.0f, Size.y - off_min.y + off_max.y)); }
    void    UpdateWorkRect()            { WorkPos = CalcWorkRectPos(WorkOffsetMin); WorkSize = CalcWorkRectSize(WorkOffsetMin, WorkOffsetMax); } // Update public fields

    // Helpers to retrieve ImRect (we don't need to store BuildWorkRect as every access tend to change it, hence the code asymmetry)
    ImRect  GetMainRect() const         { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Size.y); }
    ImRect  GetWorkRect() const         { return ImRect(WorkPos.x, WorkPos.y, WorkPos.x + WorkSize.x, WorkPos.y + WorkSize.y); }
    ImRect  GetBuildWorkRect() const    { ImVec2 pos = CalcWorkRectPos(BuildWorkOffsetMin); ImVec2 size = CalcWorkRectSize(BuildWorkOffsetMin, BuildWorkOffsetMax); return ImRect(pos.x, pos.y, pos.x + size.x, pos.y + size.y); }
};

//-----------------------------------------------------------------------------
// [SECTION] Settings support
//-----------------------------------------------------------------------------

// Windows data saved in LucyGui.ini file
// Because we never destroy or rename LucyGuiWindowSettings, we can store the names in a separate buffer easily.
// (this is designed to be stored in a ImChunkStream buffer, with the variable-length Name following our structure)
struct LucyGuiWindowSettings
{
    LucyGuiID     ID;
    ImVec2ih    Pos;
    ImVec2ih    Size;
    bool        Collapsed;
    bool        IsChild;
    bool        WantApply;      // Set when loaded from .ini data (to enable merging/loading .ini data into an already running context)
    bool        WantDelete;     // Set to invalidate/delete the settings entry

    LucyGuiWindowSettings()       { memset(this, 0, sizeof(*this)); }
    char* GetName()             { return (char*)(this + 1); }
};

struct LucyGuiSettingsHandler
{
    const char* TypeName;       // Short description stored in .ini file. Disallowed characters: '[' ']'
    LucyGuiID     TypeHash;       // == ImHashStr(TypeName)
    void        (*ClearAllFn)(LucyGuiContext* ctx, LucyGuiSettingsHandler* handler);                                // Clear all settings data
    void        (*ReadInitFn)(LucyGuiContext* ctx, LucyGuiSettingsHandler* handler);                                // Read: Called before reading (in registration order)
    void*       (*ReadOpenFn)(LucyGuiContext* ctx, LucyGuiSettingsHandler* handler, const char* name);              // Read: Called when entering into a new ini entry e.g. "[Window][Name]"
    void        (*ReadLineFn)(LucyGuiContext* ctx, LucyGuiSettingsHandler* handler, void* entry, const char* line); // Read: Called for every line of text within an ini entry
    void        (*ApplyAllFn)(LucyGuiContext* ctx, LucyGuiSettingsHandler* handler);                                // Read: Called after reading (in registration order)
    void        (*WriteAllFn)(LucyGuiContext* ctx, LucyGuiSettingsHandler* handler, LucyGuiTextBuffer* out_buf);      // Write: Output every entries into 'out_buf'
    void*       UserData;

    LucyGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }
};

//-----------------------------------------------------------------------------
// [SECTION] Localization support
//-----------------------------------------------------------------------------

// This is experimental and not officially supported, it'll probably fall short of features, if/when it does we may backtrack.
enum LucyGuiLocKey : int
{
    LucyGuiLocKey_VersionStr,
    LucyGuiLocKey_TableSizeOne,
    LucyGuiLocKey_TableSizeAllFit,
    LucyGuiLocKey_TableSizeAllDefault,
    LucyGuiLocKey_TableResetOrder,
    LucyGuiLocKey_WindowingMainMenuBar,
    LucyGuiLocKey_WindowingPopup,
    LucyGuiLocKey_WindowingUntitled,
    LucyGuiLocKey_COUNT
};

struct LucyGuiLocEntry
{
    LucyGuiLocKey     Key;
    const char*     Text;
};


//-----------------------------------------------------------------------------
// [SECTION] Metrics, Debug Tools
//-----------------------------------------------------------------------------

enum LucyGuiDebugLogFlags_
{
    // Event types
    LucyGuiDebugLogFlags_None                 = 0,
    LucyGuiDebugLogFlags_EventActiveId        = 1 << 0,
    LucyGuiDebugLogFlags_EventFocus           = 1 << 1,
    LucyGuiDebugLogFlags_EventPopup           = 1 << 2,
    LucyGuiDebugLogFlags_EventNav             = 1 << 3,
    LucyGuiDebugLogFlags_EventClipper         = 1 << 4,
    LucyGuiDebugLogFlags_EventSelection       = 1 << 5,
    LucyGuiDebugLogFlags_EventIO              = 1 << 6,
    LucyGuiDebugLogFlags_EventInputRouting    = 1 << 7,

    LucyGuiDebugLogFlags_EventMask_           = LucyGuiDebugLogFlags_EventActiveId  | LucyGuiDebugLogFlags_EventFocus | LucyGuiDebugLogFlags_EventPopup | LucyGuiDebugLogFlags_EventNav | LucyGuiDebugLogFlags_EventClipper | LucyGuiDebugLogFlags_EventSelection | LucyGuiDebugLogFlags_EventIO | LucyGuiDebugLogFlags_EventInputRouting,
    LucyGuiDebugLogFlags_OutputToTTY          = 1 << 20,  // Also send output to TTY
    LucyGuiDebugLogFlags_OutputToTestEngine   = 1 << 21,  // Also send output to Test Engine
};

struct LucyGuiDebugAllocEntry
{
    int         FrameCount;
    ImS16       AllocCount;
    ImS16       FreeCount;
};

struct LucyGuiDebugAllocInfo
{
    int         TotalAllocCount;            // Number of call to MemAlloc().
    int         TotalFreeCount;
    ImS16       LastEntriesIdx;             // Current index in buffer
    LucyGuiDebugAllocEntry LastEntriesBuf[6]; // Track last 6 frames that had allocations

    LucyGuiDebugAllocInfo() { memset(this, 0, sizeof(*this)); }
};

struct LucyGuiMetricsConfig
{
    bool        ShowDebugLog = false;
    bool        ShowIDStackTool = false;
    bool        ShowWindowsRects = false;
    bool        ShowWindowsBeginOrder = false;
    bool        ShowTablesRects = false;
    bool        ShowDrawCmdMesh = true;
    bool        ShowDrawCmdBoundingBoxes = true;
    bool        ShowTextEncodingViewer = false;
    bool        ShowAtlasTintedWithTextColor = false;
    int         ShowWindowsRectsType = -1;
    int         ShowTablesRectsType = -1;
    int         HighlightMonitorIdx = -1;
    LucyGuiID     HighlightViewportID = 0;
};

struct LucyGuiStackLevelInfo
{
    LucyGuiID                 ID;
    ImS8                    QueryFrameCount;            // >= 1: Query in progress
    bool                    QuerySuccess;               // Obtained result from DebugHookIdInfo()
    LucyGuiDataType           DataType : 8;
    char                    Desc[57];                   // Arbitrarily sized buffer to hold a result (FIXME: could replace Results[] with a chunk stream?) FIXME: Now that we added CTRL+C this should be fixed.

    LucyGuiStackLevelInfo()   { memset(this, 0, sizeof(*this)); }
};

// State for ID Stack tool queries
struct LucyGuiIDStackTool
{
    int                     LastActiveFrame;
    int                     StackLevel;                 // -1: query stack and resize Results, >= 0: individual stack level
    LucyGuiID                 QueryId;                    // ID to query details for
    ImVector<LucyGuiStackLevelInfo> Results;
    bool                    CopyToClipboardOnCtrlC;
    float                   CopyToClipboardLastTime;

    LucyGuiIDStackTool()      { memset(this, 0, sizeof(*this)); CopyToClipboardLastTime = -FLT_MAX; }
};

//-----------------------------------------------------------------------------
// [SECTION] Generic context hooks
//-----------------------------------------------------------------------------

typedef void (*LucyGuiContextHookCallback)(LucyGuiContext* ctx, LucyGuiContextHook* hook);
enum LucyGuiContextHookType { LucyGuiContextHookType_NewFramePre, LucyGuiContextHookType_NewFramePost, LucyGuiContextHookType_EndFramePre, LucyGuiContextHookType_EndFramePost, LucyGuiContextHookType_RenderPre, LucyGuiContextHookType_RenderPost, LucyGuiContextHookType_Shutdown, LucyGuiContextHookType_PendingRemoval_ };

struct LucyGuiContextHook
{
    LucyGuiID                     HookId;     // A unique ID assigned by AddContextHook()
    LucyGuiContextHookType        Type;
    LucyGuiID                     Owner;
    LucyGuiContextHookCallback    Callback;
    void*                       UserData;

    LucyGuiContextHook()          { memset(this, 0, sizeof(*this)); }
};

//-----------------------------------------------------------------------------
// [SECTION] LucyGuiContext (main Dear LucyGui context)
//-----------------------------------------------------------------------------

struct LucyGuiContext
{
    bool                    Initialized;
    bool                    FontAtlasOwnedByContext;            // IO.Fonts-> is owned by the LucyGuiContext and will be destructed along with it.
    LucyGuiIO                 IO;
    LucyGuiStyle              Style;
    ImFont*                 Font;                               // (Shortcut) == FontStack.empty() ? IO.Font : FontStack.back()
    float                   FontSize;                           // (Shortcut) == FontBaseSize * g.CurrentWindow->FontWindowScale == window->FontSize(). Text height for current window.
    float                   FontBaseSize;                       // (Shortcut) == IO.FontGlobalScale * Font->Scale * Font->FontSize. Base text height.
    ImDrawListSharedData    DrawListSharedData;
    double                  Time;
    int                     FrameCount;
    int                     FrameCountEnded;
    int                     FrameCountRendered;
    bool                    WithinFrameScope;                   // Set by NewFrame(), cleared by EndFrame()
    bool                    WithinFrameScopeWithImplicitWindow; // Set by NewFrame(), cleared by EndFrame() when the implicit debug window has been pushed
    bool                    WithinEndChild;                     // Set within EndChild()
    bool                    GcCompactAll;                       // Request full GC
    bool                    TestEngineHookItems;                // Will call test engine hooks: LucyGuiTestEngineHook_ItemAdd(), LucyGuiTestEngineHook_ItemInfo(), LucyGuiTestEngineHook_Log()
    void*                   TestEngine;                         // Test engine user data

    // Inputs
    ImVector<LucyGuiInputEvent> InputEventsQueue;                 // Input events which will be trickled/written into IO structure.
    ImVector<LucyGuiInputEvent> InputEventsTrail;                 // Past input events processed in NewFrame(). This is to allow domain-specific application to access e.g mouse/pen trail.
    LucyGuiMouseSource        InputEventsNextMouseSource;
    ImU32                   InputEventsNextEventId;

    // Windows state
    ImVector<LucyGuiWindow*>  Windows;                            // Windows, sorted in display order, back to front
    ImVector<LucyGuiWindow*>  WindowsFocusOrder;                  // Root windows, sorted in focus order, back to front.
    ImVector<LucyGuiWindow*>  WindowsTempSortBuffer;              // Temporary buffer used in EndFrame() to reorder windows so parents are kept before their child
    ImVector<LucyGuiWindowStackData> CurrentWindowStack;
    LucyGuiStorage            WindowsById;                        // Map window's LucyGuiID to LucyGuiWindow*
    int                     WindowsActiveCount;                 // Number of unique windows submitted by frame
    ImVec2                  WindowsHoverPadding;                // Padding around resizable windows for which hovering on counts as hovering the window == ImMax(style.TouchExtraPadding, WINDOWS_HOVER_PADDING)
    LucyGuiID                 DebugBreakInWindow;                 // Set to break in Begin() call.
    LucyGuiWindow*            CurrentWindow;                      // Window being drawn into
    LucyGuiWindow*            HoveredWindow;                      // Window the mouse is hovering. Will typically catch mouse inputs.
    LucyGuiWindow*            HoveredWindowUnderMovingWindow;     // Hovered window ignoring MovingWindow. Only set if MovingWindow is set.
    LucyGuiWindow*            MovingWindow;                       // Track the window we clicked on (in order to preserve focus). The actual window that is moved is generally MovingWindow->RootWindow.
    LucyGuiWindow*            WheelingWindow;                     // Track the window we started mouse-wheeling on. Until a timer elapse or mouse has moved, generally keep scrolling the same window even if during the course of scrolling the mouse ends up hovering a child window.
    ImVec2                  WheelingWindowRefMousePos;
    int                     WheelingWindowStartFrame;           // This may be set one frame before WheelingWindow is != NULL
    int                     WheelingWindowScrolledFrame;
    float                   WheelingWindowReleaseTimer;
    ImVec2                  WheelingWindowWheelRemainder;
    ImVec2                  WheelingAxisAvg;

    // Item/widgets state and tracking information
    LucyGuiID                 DebugHookIdInfo;                    // Will call core hooks: DebugHookIdInfo() from GetID functions, used by ID Stack Tool [next HoveredId/ActiveId to not pull in an extra cache-line]
    LucyGuiID                 HoveredId;                          // Hovered widget, filled during the frame
    LucyGuiID                 HoveredIdPreviousFrame;
    bool                    HoveredIdAllowOverlap;
    bool                    HoveredIdDisabled;                  // At least one widget passed the rect test, but has been discarded by disabled flag or popup inhibit. May be true even if HoveredId == 0.
    float                   HoveredIdTimer;                     // Measure contiguous hovering time
    float                   HoveredIdNotActiveTimer;            // Measure contiguous hovering time where the item has not been active
    LucyGuiID                 ActiveId;                           // Active widget
    LucyGuiID                 ActiveIdIsAlive;                    // Active widget has been seen this frame (we can't use a bool as the ActiveId may change within the frame)
    float                   ActiveIdTimer;
    bool                    ActiveIdIsJustActivated;            // Set at the time of activation for one frame
    bool                    ActiveIdAllowOverlap;               // Active widget allows another widget to steal active id (generally for overlapping widgets, but not always)
    bool                    ActiveIdNoClearOnFocusLoss;         // Disable losing active id if the active id window gets unfocused.
    bool                    ActiveIdHasBeenPressedBefore;       // Track whether the active id led to a press (this is to allow changing between PressOnClick and PressOnRelease without pressing twice). Used by range_select branch.
    bool                    ActiveIdHasBeenEditedBefore;        // Was the value associated to the widget Edited over the course of the Active state.
    bool                    ActiveIdHasBeenEditedThisFrame;
    bool                    ActiveIdFromShortcut;
    int                     ActiveIdMouseButton : 8;
    ImVec2                  ActiveIdClickOffset;                // Clicked offset from upper-left corner, if applicable (currently only set by ButtonBehavior)
    LucyGuiWindow*            ActiveIdWindow;
    LucyGuiInputSource        ActiveIdSource;                     // Activating source: LucyGuiInputSource_Mouse OR LucyGuiInputSource_Keyboard OR LucyGuiInputSource_Gamepad
    LucyGuiID                 ActiveIdPreviousFrame;
    bool                    ActiveIdPreviousFrameIsAlive;
    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;
    LucyGuiWindow*            ActiveIdPreviousFrameWindow;
    LucyGuiID                 LastActiveId;                       // Store the last non-zero ActiveId, useful for animation.
    float                   LastActiveIdTimer;                  // Store the last non-zero ActiveId timer since the beginning of activation, useful for animation.

    // [EXPERIMENTAL] Key/Input Ownership + Shortcut Routing system
    // - The idea is that instead of "eating" a given key, we can link to an owner.
    // - Input query can then read input by specifying LucyGuiKeyOwner_Any (== 0), LucyGuiKeyOwner_None (== -1) or a custom ID.
    // - Routing is requested ahead of time for a given chord (Key + Mods) and granted in NewFrame().
    double                  LastKeyModsChangeTime;              // Record the last time key mods changed (affect repeat delay when using shortcut logic)
    double                  LastKeyModsChangeFromNoneTime;      // Record the last time key mods changed away from being 0 (affect repeat delay when using shortcut logic)
    double                  LastKeyboardKeyPressTime;           // Record the last time a keyboard key (ignore mouse/gamepad ones) was pressed.
    ImBitArrayForNamedKeys  KeysMayBeCharInput;                 // Lookup to tell if a key can emit char input, see IsKeyChordPotentiallyCharInput(). sizeof() = 20 bytes
    LucyGuiKeyOwnerData       KeysOwnerData[LucyGuiKey_NamedKey_COUNT];
    LucyGuiKeyRoutingTable    KeysRoutingTable;
    ImU32                   ActiveIdUsingNavDirMask;            // Active widget will want to read those nav move requests (e.g. can activate a button and move away from it)
    bool                    ActiveIdUsingAllKeyboardKeys;       // Active widget will want to read all keyboard keys inputs. (FIXME: This is a shortcut for not taking ownership of 100+ keys but perhaps best to not have the inconsistency)
    LucyGuiKeyChord           DebugBreakInShortcutRouting;        // Set to break in SetShortcutRouting()/Shortcut() calls.
#ifndef LucyGui_DISABLE_OBSOLETE_KEYIO
    ImU32                   ActiveIdUsingNavInputMask;          // If you used this. Since (LucyGui_VERSION_NUM >= 18804) : 'g.ActiveIdUsingNavInputMask |= (1 << LucyGuiNavInput_Cancel);' becomes 'SetKeyOwner(LucyGuiKey_Escape, g.ActiveId) and/or SetKeyOwner(LucyGuiKey_NavGamepadCancel, g.ActiveId);'
#endif

    // Next window/item data
    LucyGuiID                 CurrentFocusScopeId;                // Value for currently appending items == g.FocusScopeStack.back(). Not to be mistaken with g.NavFocusScopeId.
    LucyGuiItemFlags          CurrentItemFlags;                   // Value for currently appending items == g.ItemFlagsStack.back()
    LucyGuiID                 DebugLocateId;                      // Storage for DebugLocateItemOnHover() feature: this is read by ItemAdd() so we keep it in a hot/cached location
    LucyGuiNextItemData       NextItemData;                       // Storage for SetNextItem** functions
    LucyGuiLastItemData       LastItemData;                       // Storage for last submitted item (setup by ItemAdd)
    LucyGuiNextWindowData     NextWindowData;                     // Storage for SetNextWindow** functions
    bool                    DebugShowGroupRects;

    // Shared stacks
    LucyGuiCol                        DebugFlashStyleColorIdx;    // (Keep close to ColorStack to share cache line)
    ImVector<LucyGuiColorMod>         ColorStack;                 // Stack for PushStyleColor()/PopStyleColor() - inherited by Begin()
    ImVector<LucyGuiStyleMod>         StyleVarStack;              // Stack for PushStyleVar()/PopStyleVar() - inherited by Begin()
    ImVector<ImFont*>               FontStack;                  // Stack for PushFont()/PopFont() - inherited by Begin()
    ImVector<LucyGuiFocusScopeData>   FocusScopeStack;            // Stack for PushFocusScope()/PopFocusScope() - inherited by BeginChild(), pushed into by Begin()
    ImVector<LucyGuiItemFlags>        ItemFlagsStack;             // Stack for PushItemFlag()/PopItemFlag() - inherited by Begin()
    ImVector<LucyGuiGroupData>        GroupStack;                 // Stack for BeginGroup()/EndGroup() - not inherited by Begin()
    ImVector<LucyGuiPopupData>        OpenPopupStack;             // Which popups are open (persistent)
    ImVector<LucyGuiPopupData>        BeginPopupStack;            // Which level of BeginPopup() we are in (reset every frame)
    ImVector<LucyGuiNavTreeNodeData>  NavTreeNodeStack;           // Stack for TreeNode() when a NavLeft requested is emitted.

    // Viewports
    ImVector<LucyGuiViewportP*> Viewports;                        // Active viewports (Size==1 in 'master' branch). Each viewports hold their copy of ImDrawData.

    // Gamepad/keyboard Navigation
    LucyGuiWindow*            NavWindow;                          // Focused window for navigation. Could be called 'FocusedWindow'
    LucyGuiID                 NavId;                              // Focused item for navigation
    LucyGuiID                 NavFocusScopeId;                    // Focused focus scope (e.g. selection code often wants to "clear other items" when landing on an item of the same scope)
    ImVector<LucyGuiFocusScopeData> NavFocusRoute;                // Reversed copy focus scope stack for NavId (should contains NavFocusScopeId). This essentially follow the window->ParentWindowForFocusRoute chain.
    LucyGuiID                 NavActivateId;                      // ~~ (g.ActiveId == 0) and (IsKeyPressed(LucyGuiKey_Space) or IsKeyDown(LucyGuiKey_Enter) or IsKeyPressed(LucyGuiKey_NavGamepadActivate)) ? NavId : 0, also set when calling ActivateItem()
    LucyGuiID                 NavActivateDownId;                  // ~~ IsKeyDown(LucyGuiKey_Space) or IsKeyDown(LucyGuiKey_Enter) or IsKeyDown(LucyGuiKey_NavGamepadActivate) ? NavId : 0
    LucyGuiID                 NavActivatePressedId;               // ~~ IsKeyPressed(LucyGuiKey_Space) or IsKeyPressed(LucyGuiKey_Enter) or IsKeyPressed(LucyGuiKey_NavGamepadActivate) ? NavId : 0 (no repeat)
    LucyGuiActivateFlags      NavActivateFlags;
    LucyGuiID                 NavHighlightActivatedId;
    float                   NavHighlightActivatedTimer;
    LucyGuiID                 NavJustMovedToId;                   // Just navigated to this id (result of a successfully MoveRequest).
    LucyGuiID                 NavJustMovedToFocusScopeId;         // Just navigated to this focus scope id (result of a successfully MoveRequest).
    LucyGuiKeyChord           NavJustMovedToKeyMods;
    LucyGuiID                 NavNextActivateId;                  // Set by ActivateItem(), queued until next frame.
    LucyGuiActivateFlags      NavNextActivateFlags;
    LucyGuiInputSource        NavInputSource;                     // Keyboard or Gamepad mode? THIS CAN ONLY BE LucyGuiInputSource_Keyboard or LucyGuiInputSource_Mouse
    LucyGuiNavLayer           NavLayer;                           // Layer we are navigating on. For now the system is hard-coded for 0=main contents and 1=menu/title bar, may expose layers later.
    LucyGuiSelectionUserData  NavLastValidSelectionUserData;      // Last valid data passed to SetNextItemSelectionUser(), or -1. For current window. Not reset when focusing an item that doesn't have selection data.
    bool                    NavIdIsAlive;                       // Nav widget has been seen this frame ~~ NavRectRel is valid
    bool                    NavMousePosDirty;                   // When set we will update mouse position if (io.ConfigFlags & LucyGuiConfigFlags_NavEnableSetMousePos) if set (NB: this not enabled by default)
    bool                    NavDisableHighlight;                // When user starts using mouse, we hide gamepad/keyboard highlight (NB: but they are still available, which is why NavDisableHighlight isn't always != NavDisableMouseHover)
    bool                    NavDisableMouseHover;               // When user starts using gamepad/keyboard, we hide mouse hovering highlight until mouse is touched again.

    // Navigation: Init & Move Requests
    bool                    NavAnyRequest;                      // ~~ NavMoveRequest or NavInitRequest this is to perform early out in ItemAdd()
    bool                    NavInitRequest;                     // Init request for appearing window to select first item
    bool                    NavInitRequestFromMove;
    LucyGuiNavItemData        NavInitResult;                      // Init request result (first item of the window, or one for which SetItemDefaultFocus() was called)
    bool                    NavMoveSubmitted;                   // Move request submitted, will process result on next NewFrame()
    bool                    NavMoveScoringItems;                // Move request submitted, still scoring incoming items
    bool                    NavMoveForwardToNextFrame;
    LucyGuiNavMoveFlags       NavMoveFlags;
    LucyGuiScrollFlags        NavMoveScrollFlags;
    LucyGuiKeyChord           NavMoveKeyMods;
    LucyGuiDir                NavMoveDir;                         // Direction of the move request (left/right/up/down)
    LucyGuiDir                NavMoveDirForDebug;
    LucyGuiDir                NavMoveClipDir;                     // FIXME-NAV: Describe the purpose of this better. Might want to rename?
    ImRect                  NavScoringRect;                     // Rectangle used for scoring, in screen space. Based of window->NavRectRel[], modified for directional navigation scoring.
    ImRect                  NavScoringNoClipRect;               // Some nav operations (such as PageUp/PageDown) enforce a region which clipper will attempt to always keep submitted
    int                     NavScoringDebugCount;               // Metrics for debugging
    int                     NavTabbingDir;                      // Generally -1 or +1, 0 when tabbing without a nav id
    int                     NavTabbingCounter;                  // >0 when counting items for tabbing
    LucyGuiNavItemData        NavMoveResultLocal;                 // Best move request candidate within NavWindow
    LucyGuiNavItemData        NavMoveResultLocalVisible;          // Best move request candidate within NavWindow that are mostly visible (when using LucyGuiNavMoveFlags_AlsoScoreVisibleSet flag)
    LucyGuiNavItemData        NavMoveResultOther;                 // Best move request candidate within NavWindow's flattened hierarchy (when using LucyGuiWindowFlags_NavFlattened flag)
    LucyGuiNavItemData        NavTabbingResultFirst;              // First tabbing request candidate within NavWindow and flattened hierarchy

    // Navigation: Windowing (CTRL+TAB for list, or Menu button + keys or directional pads to move/resize)
    LucyGuiKeyChord           ConfigNavWindowingKeyNext;          // = LucyGuiMod_Ctrl | LucyGuiKey_Tab, for reconfiguration (see #4828)
    LucyGuiKeyChord           ConfigNavWindowingKeyPrev;          // = LucyGuiMod_Ctrl | LucyGuiMod_Shift | LucyGuiKey_Tab
    LucyGuiWindow*            NavWindowingTarget;                 // Target window when doing CTRL+Tab (or Pad Menu + FocusPrev/Next), this window is temporarily displayed top-most!
    LucyGuiWindow*            NavWindowingTargetAnim;             // Record of last valid NavWindowingTarget until DimBgRatio and NavWindowingHighlightAlpha becomes 0.0f, so the fade-out can stay on it.
    LucyGuiWindow*            NavWindowingListWindow;             // Internal window actually listing the CTRL+Tab contents
    float                   NavWindowingTimer;
    float                   NavWindowingHighlightAlpha;
    bool                    NavWindowingToggleLayer;
    LucyGuiKey                NavWindowingToggleKey;
    ImVec2                  NavWindowingAccumDeltaPos;
    ImVec2                  NavWindowingAccumDeltaSize;

    // Render
    float                   DimBgRatio;                         // 0.0..1.0 animation when fading in a dimming background (for modal window and CTRL+TAB list)

    // Drag and Drop
    bool                    DragDropActive;
    bool                    DragDropWithinSource;               // Set when within a BeginDragDropXXX/EndDragDropXXX block for a drag source.
    bool                    DragDropWithinTarget;               // Set when within a BeginDragDropXXX/EndDragDropXXX block for a drag target.
    LucyGuiDragDropFlags      DragDropSourceFlags;
    int                     DragDropSourceFrameCount;
    int                     DragDropMouseButton;
    LucyGuiPayload            DragDropPayload;
    ImRect                  DragDropTargetRect;                 // Store rectangle of current target candidate (we favor small targets when overlapping)
    ImRect                  DragDropTargetClipRect;             // Store ClipRect at the time of item's drawing
    LucyGuiID                 DragDropTargetId;
    LucyGuiDragDropFlags      DragDropAcceptFlags;
    float                   DragDropAcceptIdCurrRectSurface;    // Target item surface (we resolve overlapping targets by prioritizing the smaller surface)
    LucyGuiID                 DragDropAcceptIdCurr;               // Target item id (set at the time of accepting the payload)
    LucyGuiID                 DragDropAcceptIdPrev;               // Target item id from previous frame (we need to store this to allow for overlapping drag and drop targets)
    int                     DragDropAcceptFrameCount;           // Last time a target expressed a desire to accept the source
    LucyGuiID                 DragDropHoldJustPressedId;          // Set when holding a payload just made ButtonBehavior() return a press.
    ImVector<unsigned char> DragDropPayloadBufHeap;             // We don't expose the ImVector<> directly, LucyGuiPayload only holds pointer+size
    unsigned char           DragDropPayloadBufLocal[16];        // Local buffer for small payloads

    // Clipper
    int                             ClipperTempDataStacked;
    ImVector<LucyGuiListClipperData>  ClipperTempData;

    // Tables
    LucyGuiTable*                     CurrentTable;
    LucyGuiID                         DebugBreakInTable;          // Set to break in BeginTable() call.
    int                             TablesTempDataStacked;      // Temporary table data size (because we leave previous instances undestructed, we generally don't use TablesTempData.Size)
    ImVector<LucyGuiTableTempData>    TablesTempData;             // Temporary table data (buffers reused/shared across instances, support nesting)
    ImPool<LucyGuiTable>              Tables;                     // Persistent table data
    ImVector<float>                 TablesLastTimeActive;       // Last used timestamp of each tables (SOA, for efficient GC)
    ImVector<ImDrawChannel>         DrawChannelsTempMergeBuffer;

    // Tab bars
    LucyGuiTabBar*                    CurrentTabBar;
    ImPool<LucyGuiTabBar>             TabBars;
    ImVector<LucyGuiPtrOrIndex>       CurrentTabBarStack;
    ImVector<LucyGuiShrinkWidthItem>  ShrinkWidthBuffer;

    // Hover Delay system
    LucyGuiID                 HoverItemDelayId;
    LucyGuiID                 HoverItemDelayIdPreviousFrame;
    float                   HoverItemDelayTimer;                // Currently used by IsItemHovered()
    float                   HoverItemDelayClearTimer;           // Currently used by IsItemHovered(): grace time before g.TooltipHoverTimer gets cleared.
    LucyGuiID                 HoverItemUnlockedStationaryId;      // Mouse has once been stationary on this item. Only reset after departing the item.
    LucyGuiID                 HoverWindowUnlockedStationaryId;    // Mouse has once been stationary on this window. Only reset after departing the window.

    // Mouse state
    LucyGuiMouseCursor        MouseCursor;
    float                   MouseStationaryTimer;               // Time the mouse has been stationary (with some loose heuristic)
    ImVec2                  MouseLastValidPos;

    // Widget state
    LucyGuiInputTextState     InputTextState;
    LucyGuiInputTextDeactivatedState InputTextDeactivatedState;
    ImFont                  InputTextPasswordFont;
    LucyGuiID                 TempInputId;                        // Temporary text input when CTRL+clicking on a slider, etc.
    int                     BeginMenuDepth;
    int                     BeginComboDepth;
    LucyGuiColorEditFlags     ColorEditOptions;                   // Store user options for color edit widgets
    LucyGuiID                 ColorEditCurrentID;                 // Set temporarily while inside of the parent-most ColorEdit4/ColorPicker4 (because they call each others).
    LucyGuiID                 ColorEditSavedID;                   // ID we are saving/restoring HS for
    float                   ColorEditSavedHue;                  // Backup of last Hue associated to LastColor, so we can restore Hue in lossy RGB<>HSV round trips
    float                   ColorEditSavedSat;                  // Backup of last Saturation associated to LastColor, so we can restore Saturation in lossy RGB<>HSV round trips
    ImU32                   ColorEditSavedColor;                // RGB value with alpha set to 0.
    ImVec4                  ColorPickerRef;                     // Initial/reference color at the time of opening the color picker.
    LucyGuiComboPreviewData   ComboPreviewData;
    ImRect                  WindowResizeBorderExpectedRect;     // Expected border rect, switch to relative edit if moving
    bool                    WindowResizeRelativeMode;
    float                   SliderGrabClickOffset;
    float                   SliderCurrentAccum;                 // Accumulated slider delta when using navigation controls.
    bool                    SliderCurrentAccumDirty;            // Has the accumulated slider delta changed since last time we tried to apply it?
    bool                    DragCurrentAccumDirty;
    float                   DragCurrentAccum;                   // Accumulator for dragging modification. Always high-precision, not rounded by end-user precision settings
    float                   DragSpeedDefaultRatio;              // If speed == 0.0f, uses (max-min) * DragSpeedDefaultRatio
    float                   ScrollbarClickDeltaToGrabCenter;    // Distance between mouse and center of grab box, normalized in parent space. Use storage?
    float                   DisabledAlphaBackup;                // Backup for style.Alpha for BeginDisabled()
    short                   DisabledStackSize;
    short                   LockMarkEdited;
    short                   TooltipOverrideCount;
    ImVector<char>          ClipboardHandlerData;               // If no custom clipboard handler is defined
    ImVector<LucyGuiID>       MenusIdSubmittedThisFrame;          // A list of menu IDs that were rendered at least once
    LucyGuiTypingSelectState  TypingSelectState;                  // State for GetTypingSelectRequest()

    // Platform support
    LucyGuiPlatformImeData    PlatformImeData;                    // Data updated by current frame
    LucyGuiPlatformImeData    PlatformImeDataPrev;                // Previous frame data (when changing we will call io.SetPlatformImeDataFn

    // Settings
    bool                    SettingsLoaded;
    float                   SettingsDirtyTimer;                 // Save .ini Settings to memory when time reaches zero
    LucyGuiTextBuffer         SettingsIniData;                    // In memory .ini settings
    ImVector<LucyGuiSettingsHandler>      SettingsHandlers;       // List of .ini settings handlers
    ImChunkStream<LucyGuiWindowSettings>  SettingsWindows;        // LucyGuiWindow .ini settings entries
    ImChunkStream<LucyGuiTableSettings>   SettingsTables;         // LucyGuiTable .ini settings entries
    ImVector<LucyGuiContextHook>          Hooks;                  // Hooks for extensions (e.g. test engine)
    LucyGuiID                             HookIdNext;             // Next available HookId

    // Localization
    const char*             LocalizationTable[LucyGuiLocKey_COUNT];

    // Capture/Logging
    bool                    LogEnabled;                         // Currently capturing
    LucyGuiLogType            LogType;                            // Capture target
    ImFileHandle            LogFile;                            // If != NULL log to stdout/ file
    LucyGuiTextBuffer         LogBuffer;                          // Accumulation buffer when log to clipboard. This is pointer so our GLucyGui static constructor doesn't call heap allocators.
    const char*             LogNextPrefix;
    const char*             LogNextSuffix;
    float                   LogLinePosY;
    bool                    LogLineFirstItem;
    int                     LogDepthRef;
    int                     LogDepthToExpand;
    int                     LogDepthToExpandDefault;            // Default/stored value for LogDepthMaxExpand if not specified in the LogXXX function call.

    // Debug Tools
    // (some of the highly frequently used data are interleaved in other structures above: DebugBreakXXX fields, DebugHookIdInfo, DebugLocateId etc.)
    LucyGuiDebugLogFlags      DebugLogFlags;
    LucyGuiTextBuffer         DebugLogBuf;
    LucyGuiTextIndex          DebugLogIndex;
    LucyGuiDebugLogFlags      DebugLogAutoDisableFlags;
    ImU8                    DebugLogAutoDisableFrames;
    ImU8                    DebugLocateFrames;                  // For DebugLocateItemOnHover(). This is used together with DebugLocateId which is in a hot/cached spot above.
    bool                    DebugBreakInLocateId;               // Debug break in ItemAdd() call for g.DebugLocateId.
    LucyGuiKeyChord           DebugBreakKeyChord;                 // = LucyGuiKey_Pause
    ImS8                    DebugBeginReturnValueCullDepth;     // Cycle between 0..9 then wrap around.
    bool                    DebugItemPickerActive;              // Item picker is active (started with DebugStartItemPicker())
    ImU8                    DebugItemPickerMouseButton;
    LucyGuiID                 DebugItemPickerBreakId;             // Will call IM_DEBUG_BREAK() when encountering this ID
    float                   DebugFlashStyleColorTime;
    ImVec4                  DebugFlashStyleColorBackup;
    LucyGuiMetricsConfig      DebugMetricsConfig;
    LucyGuiIDStackTool        DebugIDStackTool;
    LucyGuiDebugAllocInfo     DebugAllocInfo;

    // Misc
    float                   FramerateSecPerFrame[60];           // Calculate estimate of framerate for user over the last 60 frames..
    int                     FramerateSecPerFrameIdx;
    int                     FramerateSecPerFrameCount;
    float                   FramerateSecPerFrameAccum;
    int                     WantCaptureMouseNextFrame;          // Explicit capture override via SetNextFrameWantCaptureMouse()/SetNextFrameWantCaptureKeyboard(). Default to -1.
    int                     WantCaptureKeyboardNextFrame;       // "
    int                     WantTextInputNextFrame;
    ImVector<char>          TempBuffer;                         // Temporary text buffer
    char                    TempKeychordName[64];

    LucyGuiContext(ImFontAtlas* shared_font_atlas)
    {
        IO.Ctx = this;
        InputTextState.Ctx = this;

        Initialized = false;
        FontAtlasOwnedByContext = shared_font_atlas ? false : true;
        Font = NULL;
        FontSize = FontBaseSize = 0.0f;
        IO.Fonts = shared_font_atlas ? shared_font_atlas : IM_NEW(ImFontAtlas)();
        Time = 0.0f;
        FrameCount = 0;
        FrameCountEnded = FrameCountRendered = -1;
        WithinFrameScope = WithinFrameScopeWithImplicitWindow = WithinEndChild = false;
        GcCompactAll = false;
        TestEngineHookItems = false;
        TestEngine = NULL;

        InputEventsNextMouseSource = LucyGuiMouseSource_Mouse;
        InputEventsNextEventId = 1;

        WindowsActiveCount = 0;
        CurrentWindow = NULL;
        HoveredWindow = NULL;
        HoveredWindowUnderMovingWindow = NULL;
        MovingWindow = NULL;
        WheelingWindow = NULL;
        WheelingWindowStartFrame = WheelingWindowScrolledFrame = -1;
        WheelingWindowReleaseTimer = 0.0f;

        DebugHookIdInfo = 0;
        HoveredId = HoveredIdPreviousFrame = 0;
        HoveredIdAllowOverlap = false;
        HoveredIdDisabled = false;
        HoveredIdTimer = HoveredIdNotActiveTimer = 0.0f;
        ActiveId = 0;
        ActiveIdIsAlive = 0;
        ActiveIdTimer = 0.0f;
        ActiveIdIsJustActivated = false;
        ActiveIdAllowOverlap = false;
        ActiveIdNoClearOnFocusLoss = false;
        ActiveIdHasBeenPressedBefore = false;
        ActiveIdHasBeenEditedBefore = false;
        ActiveIdHasBeenEditedThisFrame = false;
        ActiveIdFromShortcut = false;
        ActiveIdClickOffset = ImVec2(-1, -1);
        ActiveIdWindow = NULL;
        ActiveIdSource = LucyGuiInputSource_None;
        ActiveIdMouseButton = -1;
        ActiveIdPreviousFrame = 0;
        ActiveIdPreviousFrameIsAlive = false;
        ActiveIdPreviousFrameHasBeenEditedBefore = false;
        ActiveIdPreviousFrameWindow = NULL;
        LastActiveId = 0;
        LastActiveIdTimer = 0.0f;

        LastKeyboardKeyPressTime = LastKeyModsChangeTime = LastKeyModsChangeFromNoneTime = -1.0;

        ActiveIdUsingNavDirMask = 0x00;
        ActiveIdUsingAllKeyboardKeys = false;
#ifndef LucyGui_DISABLE_OBSOLETE_KEYIO
        ActiveIdUsingNavInputMask = 0x00;
#endif

        CurrentFocusScopeId = 0;
        CurrentItemFlags = LucyGuiItemFlags_None;
        DebugShowGroupRects = false;

        NavWindow = NULL;
        NavId = NavFocusScopeId = NavActivateId = NavActivateDownId = NavActivatePressedId = 0;
        NavJustMovedToId = NavJustMovedToFocusScopeId = NavNextActivateId = 0;
        NavActivateFlags = NavNextActivateFlags = LucyGuiActivateFlags_None;
        NavHighlightActivatedId = 0;
        NavHighlightActivatedTimer = 0.0f;
        NavJustMovedToKeyMods = LucyGuiMod_None;
        NavInputSource = LucyGuiInputSource_Keyboard;
        NavLayer = LucyGuiNavLayer_Main;
        NavLastValidSelectionUserData = LucyGuiSelectionUserData_Invalid;
        NavIdIsAlive = false;
        NavMousePosDirty = false;
        NavDisableHighlight = true;
        NavDisableMouseHover = false;
        NavAnyRequest = false;
        NavInitRequest = false;
        NavInitRequestFromMove = false;
        NavMoveSubmitted = false;
        NavMoveScoringItems = false;
        NavMoveForwardToNextFrame = false;
        NavMoveFlags = LucyGuiNavMoveFlags_None;
        NavMoveScrollFlags = LucyGuiScrollFlags_None;
        NavMoveKeyMods = LucyGuiMod_None;
        NavMoveDir = NavMoveDirForDebug = NavMoveClipDir = LucyGuiDir_None;
        NavScoringDebugCount = 0;
        NavTabbingDir = 0;
        NavTabbingCounter = 0;

        ConfigNavWindowingKeyNext = LucyGuiMod_Ctrl | LucyGuiKey_Tab;
        ConfigNavWindowingKeyPrev = LucyGuiMod_Ctrl | LucyGuiMod_Shift | LucyGuiKey_Tab;
        NavWindowingTarget = NavWindowingTargetAnim = NavWindowingListWindow = NULL;
        NavWindowingTimer = NavWindowingHighlightAlpha = 0.0f;
        NavWindowingToggleLayer = false;
        NavWindowingToggleKey = LucyGuiKey_None;

        DimBgRatio = 0.0f;

        DragDropActive = DragDropWithinSource = DragDropWithinTarget = false;
        DragDropSourceFlags = LucyGuiDragDropFlags_None;
        DragDropSourceFrameCount = -1;
        DragDropMouseButton = -1;
        DragDropTargetId = 0;
        DragDropAcceptFlags = LucyGuiDragDropFlags_None;
        DragDropAcceptIdCurrRectSurface = 0.0f;
        DragDropAcceptIdPrev = DragDropAcceptIdCurr = 0;
        DragDropAcceptFrameCount = -1;
        DragDropHoldJustPressedId = 0;
        memset(DragDropPayloadBufLocal, 0, sizeof(DragDropPayloadBufLocal));

        ClipperTempDataStacked = 0;

        CurrentTable = NULL;
        TablesTempDataStacked = 0;
        CurrentTabBar = NULL;

        HoverItemDelayId = HoverItemDelayIdPreviousFrame = HoverItemUnlockedStationaryId = HoverWindowUnlockedStationaryId = 0;
        HoverItemDelayTimer = HoverItemDelayClearTimer = 0.0f;

        MouseCursor = LucyGuiMouseCursor_Arrow;
        MouseStationaryTimer = 0.0f;

        TempInputId = 0;
        BeginMenuDepth = BeginComboDepth = 0;
        ColorEditOptions = LucyGuiColorEditFlags_DefaultOptions_;
        ColorEditCurrentID = ColorEditSavedID = 0;
        ColorEditSavedHue = ColorEditSavedSat = 0.0f;
        ColorEditSavedColor = 0;
        WindowResizeRelativeMode = false;
        SliderGrabClickOffset = 0.0f;
        SliderCurrentAccum = 0.0f;
        SliderCurrentAccumDirty = false;
        DragCurrentAccumDirty = false;
        DragCurrentAccum = 0.0f;
        DragSpeedDefaultRatio = 1.0f / 100.0f;
        ScrollbarClickDeltaToGrabCenter = 0.0f;
        DisabledAlphaBackup = 0.0f;
        DisabledStackSize = 0;
        LockMarkEdited = 0;
        TooltipOverrideCount = 0;

        PlatformImeData.InputPos = ImVec2(0.0f, 0.0f);
        PlatformImeDataPrev.InputPos = ImVec2(-1.0f, -1.0f); // Different to ensure initial submission

        SettingsLoaded = false;
        SettingsDirtyTimer = 0.0f;
        HookIdNext = 0;

        memset(LocalizationTable, 0, sizeof(LocalizationTable));

        LogEnabled = false;
        LogType = LucyGuiLogType_None;
        LogNextPrefix = LogNextSuffix = NULL;
        LogFile = NULL;
        LogLinePosY = FLT_MAX;
        LogLineFirstItem = false;
        LogDepthRef = 0;
        LogDepthToExpand = LogDepthToExpandDefault = 2;

        DebugLogFlags = LucyGuiDebugLogFlags_OutputToTTY;
        DebugLocateId = 0;
        DebugLogAutoDisableFlags = LucyGuiDebugLogFlags_None;
        DebugLogAutoDisableFrames = 0;
        DebugLocateFrames = 0;
        DebugBeginReturnValueCullDepth = -1;
        DebugItemPickerActive = false;
        DebugItemPickerMouseButton = LucyGuiMouseButton_Left;
        DebugItemPickerBreakId = 0;
        DebugFlashStyleColorTime = 0.0f;
        DebugFlashStyleColorIdx = LucyGuiCol_COUNT;

        // Same as DebugBreakClearData(). Those fields are scattered in their respective subsystem to stay in hot-data locations
        DebugBreakInWindow = 0;
        DebugBreakInTable = 0;
        DebugBreakInLocateId = false;
        DebugBreakKeyChord = LucyGuiKey_Pause;
        DebugBreakInShortcutRouting = LucyGuiKey_None;

        memset(FramerateSecPerFrame, 0, sizeof(FramerateSecPerFrame));
        FramerateSecPerFrameIdx = FramerateSecPerFrameCount = 0;
        FramerateSecPerFrameAccum = 0.0f;
        WantCaptureMouseNextFrame = WantCaptureKeyboardNextFrame = WantTextInputNextFrame = -1;
        memset(TempKeychordName, 0, sizeof(TempKeychordName));
    }
};

//-----------------------------------------------------------------------------
// [SECTION] LucyGuiWindowTempData, LucyGuiWindow
//-----------------------------------------------------------------------------

// Transient per-window data, reset at the beginning of the frame. This used to be called LucyGuiDrawContext, hence the DC variable name in LucyGuiWindow.
// (That's theory, in practice the delimitation between LucyGuiWindow and LucyGuiWindowTempData is quite tenuous and could be reconsidered..)
// (This doesn't need a constructor because we zero-clear it as part of LucyGuiWindow and all frame-temporary data are setup on Begin)
struct LucyGui_API LucyGuiWindowTempData
{
    // Layout
    ImVec2                  CursorPos;              // Current emitting position, in absolute coordinates.
    ImVec2                  CursorPosPrevLine;
    ImVec2                  CursorStartPos;         // Initial position after Begin(), generally ~ window position + WindowPadding.
    ImVec2                  CursorMaxPos;           // Used to implicitly calculate ContentSize at the beginning of next frame, for scrolling range and auto-resize. Always growing during the frame.
    ImVec2                  IdealMaxPos;            // Used to implicitly calculate ContentSizeIdeal at the beginning of next frame, for auto-resize only. Always growing during the frame.
    ImVec2                  CurrLineSize;
    ImVec2                  PrevLineSize;
    float                   CurrLineTextBaseOffset; // Baseline offset (0.0f by default on a new line, generally == style.FramePadding.y when a framed item has been added).
    float                   PrevLineTextBaseOffset;
    bool                    IsSameLine;
    bool                    IsSetPos;
    ImVec1                  Indent;                 // Indentation / start position from left of window (increased by TreePush/TreePop, etc.)
    ImVec1                  ColumnsOffset;          // Offset to the current column (if ColumnsCurrent > 0). FIXME: This and the above should be a stack to allow use cases like Tree->Column->Tree. Need revamp columns API.
    ImVec1                  GroupOffset;
    ImVec2                  CursorStartPosLossyness;// Record the loss of precision of CursorStartPos due to really large scrolling amount. This is used by clipper to compensate and fix the most common use case of large scroll area.

    // Keyboard/Gamepad navigation
    LucyGuiNavLayer           NavLayerCurrent;        // Current layer, 0..31 (we currently only use 0..1)
    short                   NavLayersActiveMask;    // Which layers have been written to (result from previous frame)
    short                   NavLayersActiveMaskNext;// Which layers have been written to (accumulator for current frame)
    bool                    NavIsScrollPushableX;   // Set when current work location may be scrolled horizontally when moving left / right. This is generally always true UNLESS within a column.
    bool                    NavHideHighlightOneFrame;
    bool                    NavWindowHasScrollY;    // Set per window when scrolling can be used (== ScrollMax.y > 0.0f)

    // Miscellaneous
    bool                    MenuBarAppending;       // FIXME: Remove this
    ImVec2                  MenuBarOffset;          // MenuBarOffset.x is sort of equivalent of a per-layer CursorPos.x, saved/restored as we switch to the menu bar. The only situation when MenuBarOffset.y is > 0 if when (SafeAreaPadding.y > FramePadding.y), often used on TVs.
    LucyGuiMenuColumns        MenuColumns;            // Simplified columns storage for menu items measurement
    int                     TreeDepth;              // Current tree depth.
    ImU32                   TreeJumpToParentOnPopMask; // Store a copy of !g.NavIdIsAlive for TreeDepth 0..31.. Could be turned into a ImU64 if necessary.
    ImVector<LucyGuiWindow*>  ChildWindows;
    LucyGuiStorage*           StateStorage;           // Current persistent per-window storage (store e.g. tree node open/close state)
    LucyGuiOldColumns*        CurrentColumns;         // Current columns set
    int                     CurrentTableIdx;        // Current table index (into g.Tables)
    LucyGuiLayoutType         LayoutType;
    LucyGuiLayoutType         ParentLayoutType;       // Layout type of parent window at the time of Begin()
    ImU32                   ModalDimBgColor;

    // Local parameters stacks
    // We store the current settings outside of the vectors to increase memory locality (reduce cache misses). The vectors are rarely modified. Also it allows us to not heap allocate for short-lived windows which are not using those settings.
    float                   ItemWidth;              // Current item width (>0.0: width in pixels, <0.0: align xx pixels to the right of window).
    float                   TextWrapPos;            // Current text wrap pos.
    ImVector<float>         ItemWidthStack;         // Store item widths to restore (attention: .back() is not == ItemWidth)
    ImVector<float>         TextWrapPosStack;       // Store text wrap pos to restore (attention: .back() is not == TextWrapPos)
};

// Storage for one window
struct LucyGui_API LucyGuiWindow
{
    LucyGuiContext*           Ctx;                                // Parent UI context (needs to be set explicitly by parent).
    char*                   Name;                               // Window name, owned by the window.
    LucyGuiID                 ID;                                 // == ImHashStr(Name)
    LucyGuiWindowFlags        Flags;                              // See enum LucyGuiWindowFlags_
    LucyGuiChildFlags         ChildFlags;                         // Set when window is a child window. See enum LucyGuiChildFlags_
    LucyGuiViewportP*         Viewport;                           // Always set in Begin(). Inactive windows may have a NULL value here if their viewport was discarded.
    ImVec2                  Pos;                                // Position (always rounded-up to nearest pixel)
    ImVec2                  Size;                               // Current size (==SizeFull or collapsed title bar size)
    ImVec2                  SizeFull;                           // Size when non collapsed
    ImVec2                  ContentSize;                        // Size of contents/scrollable client area (calculated from the extents reach of the cursor) from previous frame. Does not include window decoration or window padding.
    ImVec2                  ContentSizeIdeal;
    ImVec2                  ContentSizeExplicit;                // Size of contents/scrollable client area explicitly request by the user via SetNextWindowContentSize().
    ImVec2                  WindowPadding;                      // Window padding at the time of Begin().
    float                   WindowRounding;                     // Window rounding at the time of Begin(). May be clamped lower to avoid rendering artifacts with title bar, menu bar etc.
    float                   WindowBorderSize;                   // Window border size at the time of Begin().
    float                   DecoOuterSizeX1, DecoOuterSizeY1;   // Left/Up Offsets. Sum of non-scrolling outer decorations (X1 generally == 0.0f. Y1 generally = TitleBarHeight + MenuBarHeight). Locked during Begin().
    float                   DecoOuterSizeX2, DecoOuterSizeY2;   // Right/Down offsets (X2 generally == ScrollbarSize.x, Y2 == ScrollbarSizes.y).
    float                   DecoInnerSizeX1, DecoInnerSizeY1;   // Applied AFTER/OVER InnerRect. Specialized for Tables as they use specialized form of clipping and frozen rows/columns are inside InnerRect (and not part of regular decoration sizes).
    int                     NameBufLen;                         // Size of buffer storing Name. May be larger than strlen(Name)!
    LucyGuiID                 MoveId;                             // == window->GetID("#MOVE")
    LucyGuiID                 ChildId;                            // ID of corresponding item in parent window (for navigation to return from child window to parent window)
    ImVec2                  Scroll;
    ImVec2                  ScrollMax;
    ImVec2                  ScrollTarget;                       // target scroll position. stored as cursor position with scrolling canceled out, so the highest point is always 0.0f. (FLT_MAX for no change)
    ImVec2                  ScrollTargetCenterRatio;            // 0.0f = scroll so that target position is at top, 0.5f = scroll so that target position is centered
    ImVec2                  ScrollTargetEdgeSnapDist;           // 0.0f = no snapping, >0.0f snapping threshold
    ImVec2                  ScrollbarSizes;                     // Size taken by each scrollbars on their smaller axis. Pay attention! ScrollbarSizes.x == width of the vertical scrollbar, ScrollbarSizes.y = height of the horizontal scrollbar.
    bool                    ScrollbarX, ScrollbarY;             // Are scrollbars visible?
    bool                    Active;                             // Set to true on Begin(), unless Collapsed
    bool                    WasActive;
    bool                    WriteAccessed;                      // Set to true when any widget access the current window
    bool                    Collapsed;                          // Set when collapsing window to become only title-bar
    bool                    WantCollapseToggle;
    bool                    SkipItems;                          // Set when items can safely be all clipped (e.g. window not visible or collapsed)
    bool                    Appearing;                          // Set during the frame where the window is appearing (or re-appearing)
    bool                    Hidden;                             // Do not display (== HiddenFrames*** > 0)
    bool                    IsFallbackWindow;                   // Set on the "Debug##Default" window.
    bool                    IsExplicitChild;                    // Set when passed _ChildWindow, left to false by BeginDocked()
    bool                    HasCloseButton;                     // Set when the window has a close button (p_open != NULL)
    signed char             ResizeBorderHovered;                // Current border being hovered for resize (-1: none, otherwise 0-3)
    signed char             ResizeBorderHeld;                   // Current border being held for resize (-1: none, otherwise 0-3)
    short                   BeginCount;                         // Number of Begin() during the current frame (generally 0 or 1, 1+ if appending via multiple Begin/End pairs)
    short                   BeginCountPreviousFrame;            // Number of Begin() during the previous frame
    short                   BeginOrderWithinParent;             // Begin() order within immediate parent window, if we are a child window. Otherwise 0.
    short                   BeginOrderWithinContext;            // Begin() order within entire LucyGui context. This is mostly used for debugging submission order related issues.
    short                   FocusOrder;                         // Order within WindowsFocusOrder[], altered when windows are focused.
    LucyGuiID                 PopupId;                            // ID in the popup stack when this window is used as a popup/menu (because we use generic Name/ID for recycling)
    ImS8                    AutoFitFramesX, AutoFitFramesY;
    bool                    AutoFitOnlyGrows;
    LucyGuiDir                AutoPosLastDirection;
    ImS8                    HiddenFramesCanSkipItems;           // Hide the window for N frames
    ImS8                    HiddenFramesCannotSkipItems;        // Hide the window for N frames while allowing items to be submitted so we can measure their size
    ImS8                    HiddenFramesForRenderOnly;          // Hide the window until frame N at Render() time only
    ImS8                    DisableInputsFrames;                // Disable window interactions for N frames
    LucyGuiCond               SetWindowPosAllowFlags : 8;         // store acceptable condition flags for SetNextWindowPos() use.
    LucyGuiCond               SetWindowSizeAllowFlags : 8;        // store acceptable condition flags for SetNextWindowSize() use.
    LucyGuiCond               SetWindowCollapsedAllowFlags : 8;   // store acceptable condition flags for SetNextWindowCollapsed() use.
    ImVec2                  SetWindowPosVal;                    // store window position when using a non-zero Pivot (position set needs to be processed when we know the window size)
    ImVec2                  SetWindowPosPivot;                  // store window pivot for positioning. ImVec2(0, 0) when positioning from top-left corner; ImVec2(0.5f, 0.5f) for centering; ImVec2(1, 1) for bottom right.

    ImVector<LucyGuiID>       IDStack;                            // ID stack. ID are hashes seeded with the value at the top of the stack. (In theory this should be in the TempData structure)
    LucyGuiWindowTempData     DC;                                 // Temporary per-window data, reset at the beginning of the frame. This used to be called LucyGuiDrawContext, hence the "DC" variable name.

    // The best way to understand what those rectangles are is to use the 'Metrics->Tools->Show Windows Rectangles' viewer.
    // The main 'OuterRect', omitted as a field, is window->Rect().
    ImRect                  OuterRectClipped;                   // == Window->Rect() just after setup in Begin(). == window->Rect() for root window.
    ImRect                  InnerRect;                          // Inner rectangle (omit title bar, menu bar, scroll bar)
    ImRect                  InnerClipRect;                      // == InnerRect shrunk by WindowPadding*0.5f on each side, clipped within viewport or parent clip rect.
    ImRect                  WorkRect;                           // Initially covers the whole scrolling region. Reduced by containers e.g columns/tables when active. Shrunk by WindowPadding*1.0f on each side. This is meant to replace ContentRegionRect over time (from 1.71+ onward).
    ImRect                  ParentWorkRect;                     // Backup of WorkRect before entering a container such as columns/tables. Used by e.g. SpanAllColumns functions to easily access. Stacked containers are responsible for maintaining this. // FIXME-WORKRECT: Could be a stack?
    ImRect                  ClipRect;                           // Current clipping/scissoring rectangle, evolve as we are using PushClipRect(), etc. == DrawList->clip_rect_stack.back().
    ImRect                  ContentRegionRect;                  // FIXME: This is currently confusing/misleading. It is essentially WorkRect but not handling of scrolling. We currently rely on it as right/bottom aligned sizing operation need some size to rely on.
    ImVec2ih                HitTestHoleSize;                    // Define an optional rectangular hole where mouse will pass-through the window.
    ImVec2ih                HitTestHoleOffset;

    int                     LastFrameActive;                    // Last frame number the window was Active.
    float                   LastTimeActive;                     // Last timestamp the window was Active (using float as we don't need high precision there)
    float                   ItemWidthDefault;
    LucyGuiStorage            StateStorage;
    ImVector<LucyGuiOldColumns> ColumnsStorage;
    float                   FontWindowScale;                    // User scale multiplier per-window, via SetWindowFontScale()
    int                     SettingsOffset;                     // Offset into SettingsWindows[] (offsets are always valid as we only grow the array from the back)

    ImDrawList*             DrawList;                           // == &DrawListInst (for backward compatibility reason with code using LucyGui_internal.h we keep this a pointer)
    ImDrawList              DrawListInst;
    LucyGuiWindow*            ParentWindow;                       // If we are a child _or_ popup _or_ docked window, this is pointing to our parent. Otherwise NULL.
    LucyGuiWindow*            ParentWindowInBeginStack;
    LucyGuiWindow*            RootWindow;                         // Point to ourself or first ancestor that is not a child window. Doesn't cross through popups/dock nodes.
    LucyGuiWindow*            RootWindowPopupTree;                // Point to ourself or first ancestor that is not a child window. Cross through popups parent<>child.
    LucyGuiWindow*            RootWindowForTitleBarHighlight;     // Point to ourself or first ancestor which will display TitleBgActive color when this window is active.
    LucyGuiWindow*            RootWindowForNav;                   // Point to ourself or first ancestor which doesn't have the NavFlattened flag.
    LucyGuiWindow*            ParentWindowForFocusRoute;          // Set to manual link a window to its logical parent so that Shortcut() chain are honoerd (e.g. Tool linked to Document)

    LucyGuiWindow*            NavLastChildNavWindow;              // When going to the menu bar, we remember the child window we came from. (This could probably be made implicit if we kept g.Windows sorted by last focused including child window.)
    LucyGuiID                 NavLastIds[LucyGuiNavLayer_COUNT];    // Last known NavId for this window, per layer (0/1)
    ImRect                  NavRectRel[LucyGuiNavLayer_COUNT];    // Reference rectangle, in window relative space
    ImVec2                  NavPreferredScoringPosRel[LucyGuiNavLayer_COUNT]; // Preferred X/Y position updated when moving on a given axis, reset to FLT_MAX.
    LucyGuiID                 NavRootFocusScopeId;                // Focus Scope ID at the time of Begin()

    int                     MemoryDrawListIdxCapacity;          // Backup of last idx/vtx count, so when waking up the window we can preallocate and avoid iterative alloc/copy
    int                     MemoryDrawListVtxCapacity;
    bool                    MemoryCompacted;                    // Set when window extraneous data have been garbage collected

public:
    LucyGuiWindow(LucyGuiContext* context, const char* name);
    ~LucyGuiWindow();

    LucyGuiID     GetID(const char* str, const char* str_end = NULL);
    LucyGuiID     GetID(const void* ptr);
    LucyGuiID     GetID(int n);
    LucyGuiID     GetIDFromRectangle(const ImRect& r_abs);

    // We don't use g.FontSize because the window may be != g.CurrentWindow.
    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Size.y); }
    float       CalcFontSize() const    { LucyGuiContext& g = *Ctx; float scale = g.FontBaseSize * FontWindowScale; if (ParentWindow) scale *= ParentWindow->FontWindowScale; return scale; }
    float       TitleBarHeight() const  { LucyGuiContext& g = *Ctx; return (Flags & LucyGuiWindowFlags_NoTitleBar) ? 0.0f : CalcFontSize() + g.Style.FramePadding.y * 2.0f; }
    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + TitleBarHeight())); }
    float       MenuBarHeight() const   { LucyGuiContext& g = *Ctx; return (Flags & LucyGuiWindowFlags_MenuBar) ? DC.MenuBarOffset.y + CalcFontSize() + g.Style.FramePadding.y * 2.0f : 0.0f; }
    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos.x, y1, Pos.x + SizeFull.x, y1 + MenuBarHeight()); }
};

//-----------------------------------------------------------------------------
// [SECTION] Tab bar, Tab item support
//-----------------------------------------------------------------------------

// Extend LucyGuiTabBarFlags_
enum LucyGuiTabBarFlagsPrivate_
{
    LucyGuiTabBarFlags_DockNode                   = 1 << 20,  // Part of a dock node [we don't use this in the master branch but it facilitate branch syncing to keep this around]
    LucyGuiTabBarFlags_IsFocused                  = 1 << 21,
    LucyGuiTabBarFlags_SaveSettings               = 1 << 22,  // FIXME: Settings are handled by the docking system, this only request the tab bar to mark settings dirty when reordering tabs
};

// Extend LucyGuiTabItemFlags_
enum LucyGuiTabItemFlagsPrivate_
{
    LucyGuiTabItemFlags_SectionMask_              = LucyGuiTabItemFlags_Leading | LucyGuiTabItemFlags_Trailing,
    LucyGuiTabItemFlags_NoCloseButton             = 1 << 20,  // Track whether p_open was set or not (we'll need this info on the next frame to recompute ContentWidth during layout)
    LucyGuiTabItemFlags_Button                    = 1 << 21,  // Used by TabItemButton, change the tab item behavior to mimic a button
};

// Storage for one active tab item (sizeof() 40 bytes)
struct LucyGuiTabItem
{
    LucyGuiID             ID;
    LucyGuiTabItemFlags   Flags;
    int                 LastFrameVisible;
    int                 LastFrameSelected;      // This allows us to infer an ordered list of the last activated tabs with little maintenance
    float               Offset;                 // Position relative to beginning of tab
    float               Width;                  // Width currently displayed
    float               ContentWidth;           // Width of label, stored during BeginTabItem() call
    float               RequestedWidth;         // Width optionally requested by caller, -1.0f is unused
    ImS32               NameOffset;             // When Window==NULL, offset to name within parent LucyGuiTabBar::TabsNames
    ImS16               BeginOrder;             // BeginTabItem() order, used to re-order tabs after toggling LucyGuiTabBarFlags_Reorderable
    ImS16               IndexDuringLayout;      // Index only used during TabBarLayout(). Tabs gets reordered so 'Tabs[n].IndexDuringLayout == n' but may mismatch during additions.
    bool                WantClose;              // Marked as closed by SetTabItemClosed()

    LucyGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected = -1; RequestedWidth = -1.0f; NameOffset = -1; BeginOrder = IndexDuringLayout = -1; }
};

// Storage for a tab bar (sizeof() 152 bytes)
struct LucyGui_API LucyGuiTabBar
{
    ImVector<LucyGuiTabItem> Tabs;
    LucyGuiTabBarFlags    Flags;
    LucyGuiID             ID;                     // Zero for tab-bars used by docking
    LucyGuiID             SelectedTabId;          // Selected tab/window
    LucyGuiID             NextSelectedTabId;      // Next selected tab/window. Will also trigger a scrolling animation
    LucyGuiID             VisibleTabId;           // Can occasionally be != SelectedTabId (e.g. when previewing contents for CTRL+TAB preview)
    int                 CurrFrameVisible;
    int                 PrevFrameVisible;
    ImRect              BarRect;
    float               CurrTabsContentsHeight;
    float               PrevTabsContentsHeight; // Record the height of contents submitted below the tab bar
    float               WidthAllTabs;           // Actual width of all tabs (locked during layout)
    float               WidthAllTabsIdeal;      // Ideal width if all tabs were visible and not clipped
    float               ScrollingAnim;
    float               ScrollingTarget;
    float               ScrollingTargetDistToVisibility;
    float               ScrollingSpeed;
    float               ScrollingRectMinX;
    float               ScrollingRectMaxX;
    float               SeparatorMinX;
    float               SeparatorMaxX;
    LucyGuiID             ReorderRequestTabId;
    ImS16               ReorderRequestOffset;
    ImS8                BeginCount;
    bool                WantLayout;
    bool                VisibleTabWasSubmitted;
    bool                TabsAddedNew;           // Set to true when a new tab item or button has been added to the tab bar during last frame
    ImS16               TabsActiveCount;        // Number of tabs submitted this frame.
    ImS16               LastTabItemIdx;         // Index of last BeginTabItem() tab for use by EndTabItem()
    float               ItemSpacingY;
    ImVec2              FramePadding;           // style.FramePadding locked at the time of BeginTabBar()
    ImVec2              BackupCursorPos;
    LucyGuiTextBuffer     TabsNames;              // For non-docking tab bar we re-append names in a contiguous buffer.

    LucyGuiTabBar();
};

//-----------------------------------------------------------------------------
// [SECTION] Table support
//-----------------------------------------------------------------------------

#define IM_COL32_DISABLE                IM_COL32(0,0,0,1)   // Special sentinel code which cannot be used as a regular color.
#define LucyGui_TABLE_MAX_COLUMNS         512                 // May be further lifted

// Our current column maximum is 64 but we may raise that in the future.
typedef ImS16 LucyGuiTableColumnIdx;
typedef ImU16 LucyGuiTableDrawChannelIdx;

// [Internal] sizeof() ~ 112
// We use the terminology "Enabled" to refer to a column that is not Hidden by user/api.
// We use the terminology "Clipped" to refer to a column that is out of sight because of scrolling/clipping.
// This is in contrast with some user-facing api such as IsItemVisible() / IsRectVisible() which use "Visible" to mean "not clipped".
struct LucyGuiTableColumn
{
    LucyGuiTableColumnFlags   Flags;                          // Flags after some patching (not directly same as provided by user). See LucyGuiTableColumnFlags_
    float                   WidthGiven;                     // Final/actual width visible == (MaxX - MinX), locked in TableUpdateLayout(). May be > WidthRequest to honor minimum width, may be < WidthRequest to honor shrinking columns down in tight space.
    float                   MinX;                           // Absolute positions
    float                   MaxX;
    float                   WidthRequest;                   // Master width absolute value when !(Flags & _WidthStretch). When Stretch this is derived every frame from StretchWeight in TableUpdateLayout()
    float                   WidthAuto;                      // Automatic width
    float                   StretchWeight;                  // Master width weight when (Flags & _WidthStretch). Often around ~1.0f initially.
    float                   InitStretchWeightOrWidth;       // Value passed to TableSetupColumn(). For Width it is a content width (_without padding_).
    ImRect                  ClipRect;                       // Clipping rectangle for the column
    LucyGuiID                 UserID;                         // Optional, value passed to TableSetupColumn()
    float                   WorkMinX;                       // Contents region min ~(MinX + CellPaddingX + CellSpacingX1) == cursor start position when entering column
    float                   WorkMaxX;                       // Contents region max ~(MaxX - CellPaddingX - CellSpacingX2)
    float                   ItemWidth;                      // Current item width for the column, preserved across rows
    float                   ContentMaxXFrozen;              // Contents maximum position for frozen rows (apart from headers), from which we can infer content width.
    float                   ContentMaxXUnfrozen;
    float                   ContentMaxXHeadersUsed;         // Contents maximum position for headers rows (regardless of freezing). TableHeader() automatically softclip itself + report ideal desired size, to avoid creating extraneous draw calls
    float                   ContentMaxXHeadersIdeal;
    ImS16                   NameOffset;                     // Offset into parent ColumnsNames[]
    LucyGuiTableColumnIdx     DisplayOrder;                   // Index within Table's IndexToDisplayOrder[] (column may be reordered by users)
    LucyGuiTableColumnIdx     IndexWithinEnabledSet;          // Index within enabled/visible set (<= IndexToDisplayOrder)
    LucyGuiTableColumnIdx     PrevEnabledColumn;              // Index of prev enabled/visible column within Columns[], -1 if first enabled/visible column
    LucyGuiTableColumnIdx     NextEnabledColumn;              // Index of next enabled/visible column within Columns[], -1 if last enabled/visible column
    LucyGuiTableColumnIdx     SortOrder;                      // Index of this column within sort specs, -1 if not sorting on this column, 0 for single-sort, may be >0 on multi-sort
    LucyGuiTableDrawChannelIdx DrawChannelCurrent;            // Index within DrawSplitter.Channels[]
    LucyGuiTableDrawChannelIdx DrawChannelFrozen;             // Draw channels for frozen rows (often headers)
    LucyGuiTableDrawChannelIdx DrawChannelUnfrozen;           // Draw channels for unfrozen rows
    bool                    IsEnabled;                      // IsUserEnabled and (Flags & LucyGuiTableColumnFlags_Disabled) == 0
    bool                    IsUserEnabled;                  // Is the column not marked Hidden by the user? (unrelated to being off view, e.g. clipped by scrolling).
    bool                    IsUserEnabledNextFrame;
    bool                    IsVisibleX;                     // Is actually in view (e.g. overlapping the host window clipping rectangle, not scrolled).
    bool                    IsVisibleY;
    bool                    IsRequestOutput;                // Return value for TableSetColumnIndex() / TableNextColumn(): whether we request user to output contents or not.
    bool                    IsSkipItems;                    // Do we want item submissions to this column to be completely ignored (no layout will happen).
    bool                    IsPreserveWidthAuto;
    ImS8                    NavLayerCurrent;                // LucyGuiNavLayer in 1 byte
    ImU8                    AutoFitQueue;                   // Queue of 8 values for the next 8 frames to request auto-fit
    ImU8                    CannotSkipItemsQueue;           // Queue of 8 values for the next 8 frames to disable Clipped/SkipItem
    ImU8                    SortDirection : 2;              // LucyGuiSortDirection_Ascending or LucyGuiSortDirection_Descending
    ImU8                    SortDirectionsAvailCount : 2;   // Number of available sort directions (0 to 3)
    ImU8                    SortDirectionsAvailMask : 4;    // Mask of available sort directions (1-bit each)
    ImU8                    SortDirectionsAvailList;        // Ordered list of available sort directions (2-bits each, total 8-bits)

    LucyGuiTableColumn()
    {
        memset(this, 0, sizeof(*this));
        StretchWeight = WidthRequest = -1.0f;
        NameOffset = -1;
        DisplayOrder = IndexWithinEnabledSet = -1;
        PrevEnabledColumn = NextEnabledColumn = -1;
        SortOrder = -1;
        SortDirection = LucyGuiSortDirection_None;
        DrawChannelCurrent = DrawChannelFrozen = DrawChannelUnfrozen = (ImU8)-1;
    }
};

// Transient cell data stored per row.
// sizeof() ~ 6
struct LucyGuiTableCellData
{
    ImU32                       BgColor;    // Actual color
    LucyGuiTableColumnIdx         Column;     // Column number
};

// Per-instance data that needs preserving across frames (seemingly most others do not need to be preserved aside from debug needs. Does that means they could be moved to LucyGuiTableTempData?)
// sizeof() ~ 24 bytes
struct LucyGuiTableInstanceData
{
    LucyGuiID                     TableInstanceID;
    float                       LastOuterHeight;            // Outer height from last frame
    float                       LastTopHeadersRowHeight;    // Height of first consecutive header rows from last frame (FIXME: this is used assuming consecutive headers are in same frozen set)
    float                       LastFrozenHeight;           // Height of frozen section from last frame
    int                         HoveredRowLast;             // Index of row which was hovered last frame.
    int                         HoveredRowNext;             // Index of row hovered this frame, set after encountering it.

    LucyGuiTableInstanceData()    { TableInstanceID = 0; LastOuterHeight = LastTopHeadersRowHeight = LastFrozenHeight = 0.0f; HoveredRowLast = HoveredRowNext = -1; }
};

// FIXME-TABLE: more transient data could be stored in a stacked LucyGuiTableTempData: e.g. SortSpecs, incoming RowData
// sizeof() ~ 580 bytes + heap allocs described in TableBeginInitMemory()
struct LucyGui_API LucyGuiTable
{
    LucyGuiID                     ID;
    LucyGuiTableFlags             Flags;
    void*                       RawData;                    // Single allocation to hold Columns[], DisplayOrderToIndex[] and RowCellData[]
    LucyGuiTableTempData*         TempData;                   // Transient data while table is active. Point within g.CurrentTableStack[]
    ImSpan<LucyGuiTableColumn>    Columns;                    // Point within RawData[]
    ImSpan<LucyGuiTableColumnIdx> DisplayOrderToIndex;        // Point within RawData[]. Store display order of columns (when not reordered, the values are 0...Count-1)
    ImSpan<LucyGuiTableCellData>  RowCellData;                // Point within RawData[]. Store cells background requests for current row.
    ImBitArrayPtr               EnabledMaskByDisplayOrder;  // Column DisplayOrder -> IsEnabled map
    ImBitArrayPtr               EnabledMaskByIndex;         // Column Index -> IsEnabled map (== not hidden by user/api) in a format adequate for iterating column without touching cold data
    ImBitArrayPtr               VisibleMaskByIndex;         // Column Index -> IsVisibleX|IsVisibleY map (== not hidden by user/api and not hidden by scrolling/cliprect)
    LucyGuiTableFlags             SettingsLoadedFlags;        // Which data were loaded from the .ini file (e.g. when order is not altered we won't save order)
    int                         SettingsOffset;             // Offset in g.SettingsTables
    int                         LastFrameActive;
    int                         ColumnsCount;               // Number of columns declared in BeginTable()
    int                         CurrentRow;
    int                         CurrentColumn;
    ImS16                       InstanceCurrent;            // Count of BeginTable() calls with same ID in the same frame (generally 0). This is a little bit similar to BeginCount for a window, but multiple table with same ID look are multiple tables, they are just synched.
    ImS16                       InstanceInteracted;         // Mark which instance (generally 0) of the same ID is being interacted with
    float                       RowPosY1;
    float                       RowPosY2;
    float                       RowMinHeight;               // Height submitted to TableNextRow()
    float                       RowCellPaddingY;            // Top and bottom padding. Reloaded during row change.
    float                       RowTextBaseline;
    float                       RowIndentOffsetX;
    LucyGuiTableRowFlags          RowFlags : 16;              // Current row flags, see LucyGuiTableRowFlags_
    LucyGuiTableRowFlags          LastRowFlags : 16;
    int                         RowBgColorCounter;          // Counter for alternating background colors (can be fast-forwarded by e.g clipper), not same as CurrentRow because header rows typically don't increase this.
    ImU32                       RowBgColor[2];              // Background color override for current row.
    ImU32                       BorderColorStrong;
    ImU32                       BorderColorLight;
    float                       BorderX1;
    float                       BorderX2;
    float                       HostIndentX;
    float                       MinColumnWidth;
    float                       OuterPaddingX;
    float                       CellPaddingX;               // Padding from each borders. Locked in BeginTable()/Layout.
    float                       CellSpacingX1;              // Spacing between non-bordered cells. Locked in BeginTable()/Layout.
    float                       CellSpacingX2;
    float                       InnerWidth;                 // User value passed to BeginTable(), see comments at the top of BeginTable() for details.
    float                       ColumnsGivenWidth;          // Sum of current column width
    float                       ColumnsAutoFitWidth;        // Sum of ideal column width in order nothing to be clipped, used for auto-fitting and content width submission in outer window
    float                       ColumnsStretchSumWeights;   // Sum of weight of all enabled stretching columns
    float                       ResizedColumnNextWidth;
    float                       ResizeLockMinContentsX2;    // Lock minimum contents width while resizing down in order to not create feedback loops. But we allow growing the table.
    float                       RefScale;                   // Reference scale to be able to rescale columns on font/dpi changes.
    float                       AngledHeadersHeight;        // Set by TableAngledHeadersRow(), used in TableUpdateLayout()
    float                       AngledHeadersSlope;         // Set by TableAngledHeadersRow(), used in TableUpdateLayout()
    ImRect                      OuterRect;                  // Note: for non-scrolling table, OuterRect.Max.y is often FLT_MAX until EndTable(), unless a height has been specified in BeginTable().
    ImRect                      InnerRect;                  // InnerRect but without decoration. As with OuterRect, for non-scrolling tables, InnerRect.Max.y is
    ImRect                      WorkRect;
    ImRect                      InnerClipRect;
    ImRect                      BgClipRect;                 // We use this to cpu-clip cell background color fill, evolve during the frame as we cross frozen rows boundaries
    ImRect                      Bg0ClipRectForDrawCmd;      // Actual ImDrawCmd clip rect for BG0/1 channel. This tends to be == OuterWindow->ClipRect at BeginTable() because output in BG0/BG1 is cpu-clipped
    ImRect                      Bg2ClipRectForDrawCmd;      // Actual ImDrawCmd clip rect for BG2 channel. This tends to be a correct, tight-fit, because output to BG2 are done by widgets relying on regular ClipRect.
    ImRect                      HostClipRect;               // This is used to check if we can eventually merge our columns draw calls into the current draw call of the current window.
    ImRect                      HostBackupInnerClipRect;    // Backup of InnerWindow->ClipRect during PushTableBackground()/PopTableBackground()
    LucyGuiWindow*                OuterWindow;                // Parent window for the table
    LucyGuiWindow*                InnerWindow;                // Window holding the table data (== OuterWindow or a child window)
    LucyGuiTextBuffer             ColumnsNames;               // Contiguous buffer holding columns names
    ImDrawListSplitter*         DrawSplitter;               // Shortcut to TempData->DrawSplitter while in table. Isolate draw commands per columns to avoid switching clip rect constantly
    LucyGuiTableInstanceData      InstanceDataFirst;
    ImVector<LucyGuiTableInstanceData>    InstanceDataExtra;  // FIXME-OPT: Using a small-vector pattern would be good.
    LucyGuiTableColumnSortSpecs   SortSpecsSingle;
    ImVector<LucyGuiTableColumnSortSpecs> SortSpecsMulti;     // FIXME-OPT: Using a small-vector pattern would be good.
    LucyGuiTableSortSpecs         SortSpecs;                  // Public facing sorts specs, this is what we return in TableGetSortSpecs()
    LucyGuiTableColumnIdx         SortSpecsCount;
    LucyGuiTableColumnIdx         ColumnsEnabledCount;        // Number of enabled columns (<= ColumnsCount)
    LucyGuiTableColumnIdx         ColumnsEnabledFixedCount;   // Number of enabled columns (<= ColumnsCount)
    LucyGuiTableColumnIdx         DeclColumnsCount;           // Count calls to TableSetupColumn()
    LucyGuiTableColumnIdx         AngledHeadersCount;         // Count columns with angled headers
    LucyGuiTableColumnIdx         HoveredColumnBody;          // Index of column whose visible region is being hovered. Important: == ColumnsCount when hovering empty region after the right-most column!
    LucyGuiTableColumnIdx         HoveredColumnBorder;        // Index of column whose right-border is being hovered (for resizing).
    LucyGuiTableColumnIdx         HighlightColumnHeader;      // Index of column which should be highlighted.
    LucyGuiTableColumnIdx         AutoFitSingleColumn;        // Index of single column requesting auto-fit.
    LucyGuiTableColumnIdx         ResizedColumn;              // Index of column being resized. Reset when InstanceCurrent==0.
    LucyGuiTableColumnIdx         LastResizedColumn;          // Index of column being resized from previous frame.
    LucyGuiTableColumnIdx         HeldHeaderColumn;           // Index of column header being held.
    LucyGuiTableColumnIdx         ReorderColumn;              // Index of column being reordered. (not cleared)
    LucyGuiTableColumnIdx         ReorderColumnDir;           // -1 or +1
    LucyGuiTableColumnIdx         LeftMostEnabledColumn;      // Index of left-most non-hidden column.
    LucyGuiTableColumnIdx         RightMostEnabledColumn;     // Index of right-most non-hidden column.
    LucyGuiTableColumnIdx         LeftMostStretchedColumn;    // Index of left-most stretched column.
    LucyGuiTableColumnIdx         RightMostStretchedColumn;   // Index of right-most stretched column.
    LucyGuiTableColumnIdx         ContextPopupColumn;         // Column right-clicked on, of -1 if opening context menu from a neutral/empty spot
    LucyGuiTableColumnIdx         FreezeRowsRequest;          // Requested frozen rows count
    LucyGuiTableColumnIdx         FreezeRowsCount;            // Actual frozen row count (== FreezeRowsRequest, or == 0 when no scrolling offset)
    LucyGuiTableColumnIdx         FreezeColumnsRequest;       // Requested frozen columns count
    LucyGuiTableColumnIdx         FreezeColumnsCount;         // Actual frozen columns count (== FreezeColumnsRequest, or == 0 when no scrolling offset)
    LucyGuiTableColumnIdx         RowCellDataCurrent;         // Index of current RowCellData[] entry in current row
    LucyGuiTableDrawChannelIdx    DummyDrawChannel;           // Redirect non-visible columns here.
    LucyGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;      // For Selectable() and other widgets drawing across columns after the freezing line. Index within DrawSplitter.Channels[]
    LucyGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;
    bool                        IsLayoutLocked;             // Set by TableUpdateLayout() which is called when beginning the first row.
    bool                        IsInsideRow;                // Set when inside TableBeginRow()/TableEndRow().
    bool                        IsInitializing;
    bool                        IsSortSpecsDirty;
    bool                        IsUsingHeaders;             // Set when the first row had the LucyGuiTableRowFlags_Headers flag.
    bool                        IsContextPopupOpen;         // Set when default context menu is open (also see: ContextPopupColumn, InstanceInteracted).
    bool                        DisableDefaultContextMenu;  // Disable default context menu contents. You may submit your own using TableBeginContextMenuPopup()/EndPopup()
    bool                        IsSettingsRequestLoad;
    bool                        IsSettingsDirty;            // Set when table settings have changed and needs to be reported into LucyGuiTableSetttings data.
    bool                        IsDefaultDisplayOrder;      // Set when display order is unchanged from default (DisplayOrder contains 0...Count-1)
    bool                        IsResetAllRequest;
    bool                        IsResetDisplayOrderRequest;
    bool                        IsUnfrozenRows;             // Set when we got past the frozen row.
    bool                        IsDefaultSizingPolicy;      // Set if user didn't explicitly set a sizing policy in BeginTable()
    bool                        IsActiveIdAliveBeforeTable;
    bool                        IsActiveIdInTable;
    bool                        HasScrollbarYCurr;          // Whether ANY instance of this table had a vertical scrollbar during the current frame.
    bool                        HasScrollbarYPrev;          // Whether ANY instance of this table had a vertical scrollbar during the previous.
    bool                        MemoryCompacted;
    bool                        HostSkipItems;              // Backup of InnerWindow->SkipItem at the end of BeginTable(), because we will overwrite InnerWindow->SkipItem on a per-column basis

    LucyGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }
    ~LucyGuiTable()               { IM_FREE(RawData); }
};

// Transient data that are only needed between BeginTable() and EndTable(), those buffers are shared (1 per level of stacked table).
// - Accessing those requires chasing an extra pointer so for very frequently used data we leave them in the main table structure.
// - We also leave out of this structure data that tend to be particularly useful for debugging/metrics.
// sizeof() ~ 120 bytes.
struct LucyGui_API LucyGuiTableTempData
{
    int                         TableIndex;                 // Index in g.Tables.Buf[] pool
    float                       LastTimeActive;             // Last timestamp this structure was used
    float                       AngledHeadersExtraWidth;    // Used in EndTable()

    ImVec2                      UserOuterSize;              // outer_size.x passed to BeginTable()
    ImDrawListSplitter          DrawSplitter;

    ImRect                      HostBackupWorkRect;         // Backup of InnerWindow->WorkRect at the end of BeginTable()
    ImRect                      HostBackupParentWorkRect;   // Backup of InnerWindow->ParentWorkRect at the end of BeginTable()
    ImVec2                      HostBackupPrevLineSize;     // Backup of InnerWindow->DC.PrevLineSize at the end of BeginTable()
    ImVec2                      HostBackupCurrLineSize;     // Backup of InnerWindow->DC.CurrLineSize at the end of BeginTable()
    ImVec2                      HostBackupCursorMaxPos;     // Backup of InnerWindow->DC.CursorMaxPos at the end of BeginTable()
    ImVec1                      HostBackupColumnsOffset;    // Backup of OuterWindow->DC.ColumnsOffset at the end of BeginTable()
    float                       HostBackupItemWidth;        // Backup of OuterWindow->DC.ItemWidth at the end of BeginTable()
    int                         HostBackupItemWidthStackSize;//Backup of OuterWindow->DC.ItemWidthStack.Size at the end of BeginTable()

    LucyGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }
};

// sizeof() ~ 12
struct LucyGuiTableColumnSettings
{
    float                   WidthOrWeight;
    LucyGuiID                 UserID;
    LucyGuiTableColumnIdx     Index;
    LucyGuiTableColumnIdx     DisplayOrder;
    LucyGuiTableColumnIdx     SortOrder;
    ImU8                    SortDirection : 2;
    ImU8                    IsEnabled : 1; // "Visible" in ini file
    ImU8                    IsStretch : 1;

    LucyGuiTableColumnSettings()
    {
        WidthOrWeight = 0.0f;
        UserID = 0;
        Index = -1;
        DisplayOrder = SortOrder = -1;
        SortDirection = LucyGuiSortDirection_None;
        IsEnabled = 1;
        IsStretch = 0;
    }
};

// This is designed to be stored in a single ImChunkStream (1 header followed by N LucyGuiTableColumnSettings, etc.)
struct LucyGuiTableSettings
{
    LucyGuiID                     ID;                     // Set to 0 to invalidate/delete the setting
    LucyGuiTableFlags             SaveFlags;              // Indicate data we want to save using the Resizable/Reorderable/Sortable/Hideable flags (could be using its own flags..)
    float                       RefScale;               // Reference scale to be able to rescale columns on font/dpi changes.
    LucyGuiTableColumnIdx         ColumnsCount;
    LucyGuiTableColumnIdx         ColumnsCountMax;        // Maximum number of columns this settings instance can store, we can recycle a settings instance with lower number of columns but not higher
    bool                        WantApply;              // Set when loaded from .ini data (to enable merging/loading .ini data into an already running context)

    LucyGuiTableSettings()        { memset(this, 0, sizeof(*this)); }
    LucyGuiTableColumnSettings*   GetColumnSettings()     { return (LucyGuiTableColumnSettings*)(this + 1); }
};

//-----------------------------------------------------------------------------
// [SECTION] LucyGui internal API
// No guarantee of forward compatibility here!
//-----------------------------------------------------------------------------

namespace LucyGui
{
    // Windows
    // We should always have a CurrentWindow in the stack (there is an implicit "Debug" window)
    // If this ever crash because g.CurrentWindow is NULL it means that either
    // - LucyGui::NewFrame() has never been called, which is illegal.
    // - You are calling LucyGui functions after LucyGui::EndFrame()/LucyGui::Render() and before the next LucyGui::NewFrame(), which is also illegal.
    inline    LucyGuiWindow*  GetCurrentWindowRead()      { LucyGuiContext& g = *GLucyGui; return g.CurrentWindow; }
    inline    LucyGuiWindow*  GetCurrentWindow()          { LucyGuiContext& g = *GLucyGui; g.CurrentWindow->WriteAccessed = true; return g.CurrentWindow; }
    LucyGui_API LucyGuiWindow*  FindWindowByID(LucyGuiID id);
    LucyGui_API LucyGuiWindow*  FindWindowByName(const char* name);
    LucyGui_API void          UpdateWindowParentAndRootLinks(LucyGuiWindow* window, LucyGuiWindowFlags flags, LucyGuiWindow* parent_window);
    LucyGui_API ImVec2        CalcWindowNextAutoFitSize(LucyGuiWindow* window);
    LucyGui_API bool          IsWindowChildOf(LucyGuiWindow* window, LucyGuiWindow* potential_parent, bool popup_hierarchy);
    LucyGui_API bool          IsWindowWithinBeginStackOf(LucyGuiWindow* window, LucyGuiWindow* potential_parent);
    LucyGui_API bool          IsWindowAbove(LucyGuiWindow* potential_above, LucyGuiWindow* potential_below);
    LucyGui_API bool          IsWindowNavFocusable(LucyGuiWindow* window);
    LucyGui_API void          SetWindowPos(LucyGuiWindow* window, const ImVec2& pos, LucyGuiCond cond = 0);
    LucyGui_API void          SetWindowSize(LucyGuiWindow* window, const ImVec2& size, LucyGuiCond cond = 0);
    LucyGui_API void          SetWindowCollapsed(LucyGuiWindow* window, bool collapsed, LucyGuiCond cond = 0);
    LucyGui_API void          SetWindowHitTestHole(LucyGuiWindow* window, const ImVec2& pos, const ImVec2& size);
    LucyGui_API void          SetWindowHiddenAndSkipItemsForCurrentFrame(LucyGuiWindow* window);
    inline void             SetWindowParentWindowForFocusRoute(LucyGuiWindow* window, LucyGuiWindow* parent_window) { window->ParentWindowForFocusRoute = parent_window; }
    inline ImRect           WindowRectAbsToRel(LucyGuiWindow* window, const ImRect& r) { ImVec2 off = window->DC.CursorStartPos; return ImRect(r.Min.x - off.x, r.Min.y - off.y, r.Max.x - off.x, r.Max.y - off.y); }
    inline ImRect           WindowRectRelToAbs(LucyGuiWindow* window, const ImRect& r) { ImVec2 off = window->DC.CursorStartPos; return ImRect(r.Min.x + off.x, r.Min.y + off.y, r.Max.x + off.x, r.Max.y + off.y); }
    inline ImVec2           WindowPosRelToAbs(LucyGuiWindow* window, const ImVec2& p)  { ImVec2 off = window->DC.CursorStartPos; return ImVec2(p.x + off.x, p.y + off.y); }

    // Windows: Display Order and Focus Order
    LucyGui_API void          FocusWindow(LucyGuiWindow* window, LucyGuiFocusRequestFlags flags = 0);
    LucyGui_API void          FocusTopMostWindowUnderOne(LucyGuiWindow* under_this_window, LucyGuiWindow* ignore_window, LucyGuiViewport* filter_viewport, LucyGuiFocusRequestFlags flags);
    LucyGui_API void          BringWindowToFocusFront(LucyGuiWindow* window);
    LucyGui_API void          BringWindowToDisplayFront(LucyGuiWindow* window);
    LucyGui_API void          BringWindowToDisplayBack(LucyGuiWindow* window);
    LucyGui_API void          BringWindowToDisplayBehind(LucyGuiWindow* window, LucyGuiWindow* above_window);
    LucyGui_API int           FindWindowDisplayIndex(LucyGuiWindow* window);
    LucyGui_API LucyGuiWindow*  FindBottomMostVisibleWindowWithinBeginStack(LucyGuiWindow* window);

    // Fonts, drawing
    LucyGui_API void          SetCurrentFont(ImFont* font);
    inline ImFont*          GetDefaultFont() { LucyGuiContext& g = *GLucyGui; return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0]; }
    inline ImDrawList*      GetForegroundDrawList(LucyGuiWindow* window) { IM_UNUSED(window); return GetForegroundDrawList(); } // This seemingly unnecessary wrapper simplifies compatibility between the 'master' and 'docking' branches.
    LucyGui_API ImDrawList*   GetBackgroundDrawList(LucyGuiViewport* viewport);                     // get background draw list for the given viewport. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear LucyGui contents.
    LucyGui_API ImDrawList*   GetForegroundDrawList(LucyGuiViewport* viewport);                     // get foreground draw list for the given viewport. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear LucyGui contents.
    LucyGui_API void          AddDrawListToDrawDataEx(ImDrawData* draw_data, ImVector<ImDrawList*>* out_list, ImDrawList* draw_list);

    // Init
    LucyGui_API void          Initialize();
    LucyGui_API void          Shutdown();    // Since 1.60 this is a _private_ function. You can call DestroyContext() to destroy the context created by CreateContext().

    // NewFrame
    LucyGui_API void          UpdateInputEvents(bool trickle_fast_inputs);
    LucyGui_API void          UpdateHoveredWindowAndCaptureFlags();
    LucyGui_API void          StartMouseMovingWindow(LucyGuiWindow* window);
    LucyGui_API void          UpdateMouseMovingWindowNewFrame();
    LucyGui_API void          UpdateMouseMovingWindowEndFrame();

    // Generic context hooks
    LucyGui_API LucyGuiID       AddContextHook(LucyGuiContext* context, const LucyGuiContextHook* hook);
    LucyGui_API void          RemoveContextHook(LucyGuiContext* context, LucyGuiID hook_to_remove);
    LucyGui_API void          CallContextHooks(LucyGuiContext* context, LucyGuiContextHookType type);

    // Viewports
    LucyGui_API void          SetWindowViewport(LucyGuiWindow* window, LucyGuiViewportP* viewport);

    // Settings
    LucyGui_API void                  MarkIniSettingsDirty();
    LucyGui_API void                  MarkIniSettingsDirty(LucyGuiWindow* window);
    LucyGui_API void                  ClearIniSettings();
    LucyGui_API void                  AddSettingsHandler(const LucyGuiSettingsHandler* handler);
    LucyGui_API void                  RemoveSettingsHandler(const char* type_name);
    LucyGui_API LucyGuiSettingsHandler* FindSettingsHandler(const char* type_name);

    // Settings - Windows
    LucyGui_API LucyGuiWindowSettings*  CreateNewWindowSettings(const char* name);
    LucyGui_API LucyGuiWindowSettings*  FindWindowSettingsByID(LucyGuiID id);
    LucyGui_API LucyGuiWindowSettings*  FindWindowSettingsByWindow(LucyGuiWindow* window);
    LucyGui_API void                  ClearWindowSettings(const char* name);

    // Localization
    LucyGui_API void          LocalizeRegisterEntries(const LucyGuiLocEntry* entries, int count);
    inline const char*      LocalizeGetMsg(LucyGuiLocKey key) { LucyGuiContext& g = *GLucyGui; const char* msg = g.LocalizationTable[key]; return msg ? msg : "*Missing Text*"; }

    // Scrolling
    LucyGui_API void          SetScrollX(LucyGuiWindow* window, float scroll_x);
    LucyGui_API void          SetScrollY(LucyGuiWindow* window, float scroll_y);
    LucyGui_API void          SetScrollFromPosX(LucyGuiWindow* window, float local_x, float center_x_ratio);
    LucyGui_API void          SetScrollFromPosY(LucyGuiWindow* window, float local_y, float center_y_ratio);

    // Early work-in-progress API (ScrollToItem() will become public)
    LucyGui_API void          ScrollToItem(LucyGuiScrollFlags flags = 0);
    LucyGui_API void          ScrollToRect(LucyGuiWindow* window, const ImRect& rect, LucyGuiScrollFlags flags = 0);
    LucyGui_API ImVec2        ScrollToRectEx(LucyGuiWindow* window, const ImRect& rect, LucyGuiScrollFlags flags = 0);
//#ifndef LucyGui_DISABLE_OBSOLETE_FUNCTIONS
    inline void             ScrollToBringRectIntoView(LucyGuiWindow* window, const ImRect& rect) { ScrollToRect(window, rect, LucyGuiScrollFlags_KeepVisibleEdgeY); }
//#endif

    // Basic Accessors
    inline LucyGuiItemStatusFlags GetItemStatusFlags(){ LucyGuiContext& g = *GLucyGui; return g.LastItemData.StatusFlags; }
    inline LucyGuiItemFlags   GetItemFlags()  { LucyGuiContext& g = *GLucyGui; return g.LastItemData.InFlags; }
    inline LucyGuiID          GetActiveID()   { LucyGuiContext& g = *GLucyGui; return g.ActiveId; }
    inline LucyGuiID          GetFocusID()    { LucyGuiContext& g = *GLucyGui; return g.NavId; }
    LucyGui_API void          SetActiveID(LucyGuiID id, LucyGuiWindow* window);
    LucyGui_API void          SetFocusID(LucyGuiID id, LucyGuiWindow* window);
    LucyGui_API void          ClearActiveID();
    LucyGui_API LucyGuiID       GetHoveredID();
    LucyGui_API void          SetHoveredID(LucyGuiID id);
    LucyGui_API void          KeepAliveID(LucyGuiID id);
    LucyGui_API void          MarkItemEdited(LucyGuiID id);     // Mark data associated to given item as "edited", used by IsItemDeactivatedAfterEdit() function.
    LucyGui_API void          PushOverrideID(LucyGuiID id);     // Push given value as-is at the top of the ID stack (whereas PushID combines old and new hashes)
    LucyGui_API LucyGuiID       GetIDWithSeed(const char* str_id_begin, const char* str_id_end, LucyGuiID seed);
    LucyGui_API LucyGuiID       GetIDWithSeed(int n, LucyGuiID seed);

    // Basic Helpers for widget code
    LucyGui_API void          ItemSize(const ImVec2& size, float text_baseline_y = -1.0f);
    inline void             ItemSize(const ImRect& bb, float text_baseline_y = -1.0f) { ItemSize(bb.GetSize(), text_baseline_y); } // FIXME: This is a misleading API since we expect CursorPos to be bb.Min.
    LucyGui_API bool          ItemAdd(const ImRect& bb, LucyGuiID id, const ImRect* nav_bb = NULL, LucyGuiItemFlags extra_flags = 0);
    LucyGui_API bool          ItemHoverable(const ImRect& bb, LucyGuiID id, LucyGuiItemFlags item_flags);
    LucyGui_API bool          IsWindowContentHoverable(LucyGuiWindow* window, LucyGuiHoveredFlags flags = 0);
    LucyGui_API bool          IsClippedEx(const ImRect& bb, LucyGuiID id);
    LucyGui_API void          SetLastItemData(LucyGuiID item_id, LucyGuiItemFlags in_flags, LucyGuiItemStatusFlags status_flags, const ImRect& item_rect);
    LucyGui_API ImVec2        CalcItemSize(ImVec2 size, float default_w, float default_h);
    LucyGui_API float         CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x);
    LucyGui_API void          PushMultiItemsWidths(int components, float width_full);
    LucyGui_API bool          IsItemToggledSelection();                                   // Was the last item selection toggled? (after Selectable(), TreeNode() etc. We only returns toggle _event_ in order to handle clipping correctly)
    LucyGui_API ImVec2        GetContentRegionMaxAbs();
    LucyGui_API void          ShrinkWidths(LucyGuiShrinkWidthItem* items, int count, float width_excess);

    // Parameter stacks (shared)
    LucyGui_API void          PushItemFlag(LucyGuiItemFlags option, bool enabled);
    LucyGui_API void          PopItemFlag();
    LucyGui_API const LucyGuiDataVarInfo* GetStyleVarInfo(LucyGuiStyleVar idx);

    // Logging/Capture
    LucyGui_API void          LogBegin(LucyGuiLogType type, int auto_open_depth);           // -> BeginCapture() when we design v2 api, for now stay under the radar by using the old name.
    LucyGui_API void          LogToBuffer(int auto_open_depth = -1);                      // Start logging/capturing to internal buffer
    LucyGui_API void          LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end = NULL);
    LucyGui_API void          LogSetNextTextDecoration(const char* prefix, const char* suffix);

    // Popups, Modals, Tooltips
    LucyGui_API bool          BeginChildEx(const char* name, LucyGuiID id, const ImVec2& size_arg, LucyGuiChildFlags child_flags, LucyGuiWindowFlags window_flags);
    LucyGui_API void          OpenPopupEx(LucyGuiID id, LucyGuiPopupFlags popup_flags = LucyGuiPopupFlags_None);
    LucyGui_API void          ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup);
    LucyGui_API void          ClosePopupsOverWindow(LucyGuiWindow* ref_window, bool restore_focus_to_window_under_popup);
    LucyGui_API void          ClosePopupsExceptModals();
    LucyGui_API bool          IsPopupOpen(LucyGuiID id, LucyGuiPopupFlags popup_flags);
    LucyGui_API bool          BeginPopupEx(LucyGuiID id, LucyGuiWindowFlags extra_flags);
    LucyGui_API bool          BeginTooltipEx(LucyGuiTooltipFlags tooltip_flags, LucyGuiWindowFlags extra_window_flags);
    LucyGui_API bool          BeginTooltipHidden();
    LucyGui_API ImRect        GetPopupAllowedExtentRect(LucyGuiWindow* window);
    LucyGui_API LucyGuiWindow*  GetTopMostPopupModal();
    LucyGui_API LucyGuiWindow*  GetTopMostAndVisiblePopupModal();
    LucyGui_API LucyGuiWindow*  FindBlockingModal(LucyGuiWindow* window);
    LucyGui_API ImVec2        FindBestWindowPosForPopup(LucyGuiWindow* window);
    LucyGui_API ImVec2        FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, LucyGuiDir* last_dir, const ImRect& r_outer, const ImRect& r_avoid, LucyGuiPopupPositionPolicy policy);

    // Menus
    LucyGui_API bool          BeginViewportSideBar(const char* name, LucyGuiViewport* viewport, LucyGuiDir dir, float size, LucyGuiWindowFlags window_flags);
    LucyGui_API bool          BeginMenuEx(const char* label, const char* icon, bool enabled = true);
    LucyGui_API bool          MenuItemEx(const char* label, const char* icon, const char* shortcut = NULL, bool selected = false, bool enabled = true);

    // Combos
    LucyGui_API bool          BeginComboPopup(LucyGuiID popup_id, const ImRect& bb, LucyGuiComboFlags flags);
    LucyGui_API bool          BeginComboPreview();
    LucyGui_API void          EndComboPreview();

    // Gamepad/Keyboard Navigation
    LucyGui_API void          NavInitWindow(LucyGuiWindow* window, bool force_reinit);
    LucyGui_API void          NavInitRequestApplyResult();
    LucyGui_API bool          NavMoveRequestButNoResultYet();
    LucyGui_API void          NavMoveRequestSubmit(LucyGuiDir move_dir, LucyGuiDir clip_dir, LucyGuiNavMoveFlags move_flags, LucyGuiScrollFlags scroll_flags);
    LucyGui_API void          NavMoveRequestForward(LucyGuiDir move_dir, LucyGuiDir clip_dir, LucyGuiNavMoveFlags move_flags, LucyGuiScrollFlags scroll_flags);
    LucyGui_API void          NavMoveRequestResolveWithLastItem(LucyGuiNavItemData* result);
    LucyGui_API void          NavMoveRequestResolveWithPastTreeNode(LucyGuiNavItemData* result, LucyGuiNavTreeNodeData* tree_node_data);
    LucyGui_API void          NavMoveRequestCancel();
    LucyGui_API void          NavMoveRequestApplyResult();
    LucyGui_API void          NavMoveRequestTryWrapping(LucyGuiWindow* window, LucyGuiNavMoveFlags move_flags);
    LucyGui_API void          NavHighlightActivated(LucyGuiID id);
    LucyGui_API void          NavClearPreferredPosForAxis(LucyGuiAxis axis);
    LucyGui_API void          NavRestoreHighlightAfterMove();
    LucyGui_API void          NavUpdateCurrentWindowIsScrollPushableX();
    LucyGui_API void          SetNavWindow(LucyGuiWindow* window);
    LucyGui_API void          SetNavID(LucyGuiID id, LucyGuiNavLayer nav_layer, LucyGuiID focus_scope_id, const ImRect& rect_rel);
    LucyGui_API void          SetNavFocusScope(LucyGuiID focus_scope_id);

    // Focus/Activation
    // This should be part of a larger set of API: FocusItem(offset = -1), FocusItemByID(id), ActivateItem(offset = -1), ActivateItemByID(id) etc. which are
    // much harder to design and implement than expected. I have a couple of private branches on this matter but it's not simple. For now implementing the easy ones.
    LucyGui_API void          FocusItem();                    // Focus last item (no selection/activation).
    LucyGui_API void          ActivateItemByID(LucyGuiID id);   // Activate an item by ID (button, checkbox, tree node etc.). Activation is queued and processed on the next frame when the item is encountered again.

    // Inputs
    // FIXME: Eventually we should aim to move e.g. IsActiveIdUsingKey() into IsKeyXXX functions.
    inline bool             IsNamedKey(LucyGuiKey key)                                    { return key >= LucyGuiKey_NamedKey_BEGIN and key < LucyGuiKey_NamedKey_END; }
    inline bool             IsNamedKeyOrModKey(LucyGuiKey key)                            { return (key >= LucyGuiKey_NamedKey_BEGIN and key < LucyGuiKey_NamedKey_END) or key == LucyGuiMod_Ctrl or key == LucyGuiMod_Shift or key == LucyGuiMod_Alt or key == LucyGuiMod_Super or key == LucyGuiMod_Shortcut; }
    inline bool             IsLegacyKey(LucyGuiKey key)                                   { return key >= LucyGuiKey_LegacyNativeKey_BEGIN and key < LucyGuiKey_LegacyNativeKey_END; }
    inline bool             IsKeyboardKey(LucyGuiKey key)                                 { return key >= LucyGuiKey_Keyboard_BEGIN and key < LucyGuiKey_Keyboard_END; }
    inline bool             IsGamepadKey(LucyGuiKey key)                                  { return key >= LucyGuiKey_Gamepad_BEGIN and key < LucyGuiKey_Gamepad_END; }
    inline bool             IsMouseKey(LucyGuiKey key)                                    { return key >= LucyGuiKey_Mouse_BEGIN and key < LucyGuiKey_Mouse_END; }
    inline bool             IsAliasKey(LucyGuiKey key)                                    { return key >= LucyGuiKey_Aliases_BEGIN and key < LucyGuiKey_Aliases_END; }
    inline bool             IsModKey(LucyGuiKey key)                                      { return key >= LucyGuiKey_LeftCtrl and key <= LucyGuiKey_RightSuper; }
    LucyGuiKeyChord           FixupKeyChord(LucyGuiContext* ctx, LucyGuiKeyChord key_chord);
    inline LucyGuiKey         ConvertSingleModFlagToKey(LucyGuiContext* ctx, LucyGuiKey key)
    {
        LucyGuiContext& g = *ctx;
        if (key == LucyGuiMod_Ctrl) return LucyGuiKey_ReservedForModCtrl;
        if (key == LucyGuiMod_Shift) return LucyGuiKey_ReservedForModShift;
        if (key == LucyGuiMod_Alt) return LucyGuiKey_ReservedForModAlt;
        if (key == LucyGuiMod_Super) return LucyGuiKey_ReservedForModSuper;
        if (key == LucyGuiMod_Shortcut) return (g.IO.ConfigMacOSXBehaviors ? LucyGuiKey_ReservedForModSuper : LucyGuiKey_ReservedForModCtrl);
        return key;
    }

    LucyGui_API LucyGuiKeyData* GetKeyData(LucyGuiContext* ctx, LucyGuiKey key);
    inline LucyGuiKeyData*    GetKeyData(LucyGuiKey key)                                    { LucyGuiContext& g = *GLucyGui; return GetKeyData(&g, key); }
    LucyGui_API const char*   GetKeyChordName(LucyGuiKeyChord key_chord);
    inline LucyGuiKey         MouseButtonToKey(LucyGuiMouseButton button)                   { IM_ASSERT(button >= 0 and button < LucyGuiMouseButton_COUNT); return (LucyGuiKey)(LucyGuiKey_MouseLeft + button); }
    LucyGui_API bool          IsMouseDragPastThreshold(LucyGuiMouseButton button, float lock_threshold = -1.0f);
    LucyGui_API ImVec2        GetKeyMagnitude2d(LucyGuiKey key_left, LucyGuiKey key_right, LucyGuiKey key_up, LucyGuiKey key_down);
    LucyGui_API float         GetNavTweakPressedAmount(LucyGuiAxis axis);
    LucyGui_API int           CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate);
    LucyGui_API void          GetTypematicRepeatRate(LucyGuiInputFlags flags, float* repeat_delay, float* repeat_rate);
    LucyGui_API void          TeleportMousePos(const ImVec2& pos);
    LucyGui_API void          SetActiveIdUsingAllKeyboardKeys();
    inline bool             IsActiveIdUsingNavDir(LucyGuiDir dir)                         { LucyGuiContext& g = *GLucyGui; return (g.ActiveIdUsingNavDirMask & (1 << dir)) != 0; }

    // [EXPERIMENTAL] Low-Level: Key/Input Ownership
    // - The idea is that instead of "eating" a given input, we can link to an owner id.
    // - Ownership is most often claimed as a result of reacting to a press/down event (but occasionally may be claimed ahead).
    // - Input queries can then read input by specifying LucyGuiKeyOwner_Any (== 0), LucyGuiKeyOwner_None (== -1) or a custom ID.
    // - Legacy input queries (without specifying an owner or _Any or _None) are equivalent to using LucyGuiKeyOwner_Any (== 0).
    // - Input ownership is automatically released on the frame after a key is released. Therefore:
    //   - for ownership registration happening as a result of a down/press event, the SetKeyOwner() call may be done once (common case).
    //   - for ownership registration happening ahead of a down/press event, the SetKeyOwner() call needs to be made every frame (happens if e.g. claiming ownership on hover).
    // - SetItemKeyOwner() is a shortcut for common simple case. A custom widget will probably want to call SetKeyOwner() multiple times directly based on its interaction state.
    // - This is marked experimental because not all widgets are fully honoring the Set/Test idioms. We will need to move forward step by step.
    //   Please open a GitHub Issue to submit your usage scenario or if there's a use case you need solved.
    LucyGui_API LucyGuiID           GetKeyOwner(LucyGuiKey key);
    LucyGui_API void              SetKeyOwner(LucyGuiKey key, LucyGuiID owner_id, LucyGuiInputFlags flags = 0);
    LucyGui_API void              SetKeyOwnersForKeyChord(LucyGuiKeyChord key, LucyGuiID owner_id, LucyGuiInputFlags flags = 0);
    LucyGui_API void              SetItemKeyOwner(LucyGuiKey key, LucyGuiInputFlags flags = 0);           // Set key owner to last item if it is hovered or active. Equivalent to 'if (IsItemHovered() or IsItemActive()) { SetKeyOwner(key, GetItemID());'.
    LucyGui_API bool              TestKeyOwner(LucyGuiKey key, LucyGuiID owner_id);                       // Test that key is either not owned, either owned by 'owner_id'
    inline LucyGuiKeyOwnerData*   GetKeyOwnerData(LucyGuiContext* ctx, LucyGuiKey key)                    { if (key & LucyGuiMod_Mask_) key = ConvertSingleModFlagToKey(ctx, key); IM_ASSERT(IsNamedKey(key)); return &ctx->KeysOwnerData[key - LucyGuiKey_NamedKey_BEGIN]; }

    // [EXPERIMENTAL] High-Level: Input Access functions w/ support for Key/Input Ownership
    // - Important: legacy IsKeyPressed(LucyGuiKey, bool repeat=true) _DEFAULTS_ to repeat, new IsKeyPressed() requires _EXPLICIT_ LucyGuiInputFlags_Repeat flag.
    // - Expected to be later promoted to public API, the prototypes are designed to replace existing ones (since owner_id can default to Any == 0)
    // - Specifying a value for 'LucyGuiID owner' will test that EITHER the key is NOT owned (UNLESS locked), EITHER the key is owned by 'owner'.
    //   Legacy functions use LucyGuiKeyOwner_Any meaning that they typically ignore ownership, unless a call to SetKeyOwner() explicitly used LucyGuiInputFlags_LockThisFrame or LucyGuiInputFlags_LockUntilRelease.
    // - Binding generators may want to ignore those for now, or suffix them with Ex() until we decide if this gets moved into public API.
    LucyGui_API bool              IsKeyDown(LucyGuiKey key, LucyGuiID owner_id);
    LucyGui_API bool              IsKeyPressed(LucyGuiKey key, LucyGuiID owner_id, LucyGuiInputFlags flags = 0);    // Important: when transitioning from old to new IsKeyPressed(): old API has "bool repeat = true", so would default to repeat. New API requiress explicit LucyGuiInputFlags_Repeat.
    LucyGui_API bool              IsKeyReleased(LucyGuiKey key, LucyGuiID owner_id);
    LucyGui_API bool              IsMouseDown(LucyGuiMouseButton button, LucyGuiID owner_id);
    LucyGui_API bool              IsMouseClicked(LucyGuiMouseButton button, LucyGuiID owner_id, LucyGuiInputFlags flags = 0);
    LucyGui_API bool              IsMouseReleased(LucyGuiMouseButton button, LucyGuiID owner_id);
    LucyGui_API bool              IsMouseDoubleClicked(LucyGuiMouseButton button, LucyGuiID owner_id);

    // [EXPERIMENTAL] Shortcut Routing
    // - LucyGuiKeyChord = a LucyGuiKey optionally OR-red with LucyGuiMod_Alt/LucyGuiMod_Ctrl/LucyGuiMod_Shift/LucyGuiMod_Super.
    //     LucyGuiKey_C                 (accepted by functions taking LucyGuiKey or LucyGuiKeyChord)
    //     LucyGuiKey_C | LucyGuiMod_Ctrl (accepted by functions taking LucyGuiKeyChord)
    //   ONLY LucyGuiMod_XXX values are legal to 'OR' with an LucyGuiKey. You CANNOT 'OR' two LucyGuiKey values.
    // - When using one of the routing flags (e.g. LucyGuiInputFlags_RouteFocused): routes requested ahead of time given a chord (key + modifiers) and a routing policy.
    // - Routes are resolved during NewFrame(): if keyboard modifiers are matching current ones: SetKeyOwner() is called + route is granted for the frame.
    // - Route is granted to a single owner. When multiple requests are made we have policies to select the winning route.
    // - Multiple read sites may use the same owner id and will all get the granted route.
    // - For routing: when owner_id is 0 we use the current Focus Scope ID as a default owner in order to identify our location.
    // - TL;DR;
    //   - IsKeyChordPressed() compares mods + call IsKeyPressed() -> function has no side-effect.
    //   - Shortcut() submits a route then if currently can be routed calls IsKeyChordPressed() -> function has (desirable) side-effects.
    LucyGui_API bool              IsKeyChordPressed(LucyGuiKeyChord key_chord, LucyGuiID owner_id, LucyGuiInputFlags flags = 0);
    LucyGui_API void              SetNextItemShortcut(LucyGuiKeyChord key_chord);
    LucyGui_API bool              Shortcut(LucyGuiKeyChord key_chord, LucyGuiID owner_id = 0, LucyGuiInputFlags flags = 0);
    LucyGui_API bool              SetShortcutRouting(LucyGuiKeyChord key_chord, LucyGuiID owner_id, LucyGuiInputFlags flags = 0); // owner_id needs to be explicit and cannot be 0
    LucyGui_API bool              TestShortcutRouting(LucyGuiKeyChord key_chord, LucyGuiID owner_id);
    LucyGui_API LucyGuiKeyRoutingData* GetShortcutRoutingData(LucyGuiKeyChord key_chord);

    // [EXPERIMENTAL] Focus Scope
    // This is generally used to identify a unique input location (for e.g. a selection set)
    // There is one per window (automatically set in Begin), but:
    // - Selection patterns generally need to react (e.g. clear a selection) when landing on one item of the set.
    //   So in order to identify a set multiple lists in same window may each need a focus scope.
    //   If you imagine an hypothetical BeginSelectionGroup()/EndSelectionGroup() api, it would likely call PushFocusScope()/EndFocusScope()
    // - Shortcut routing also use focus scope as a default location identifier if an owner is not provided.
    // We don't use the ID Stack for this as it is common to want them separate.
    LucyGui_API void          PushFocusScope(LucyGuiID id);
    LucyGui_API void          PopFocusScope();
    inline LucyGuiID          GetCurrentFocusScope() { LucyGuiContext& g = *GLucyGui; return g.CurrentFocusScopeId; }   // Focus scope we are outputting into, set by PushFocusScope()

    // Drag and Drop
    LucyGui_API bool          IsDragDropActive();
    LucyGui_API bool          BeginDragDropTargetCustom(const ImRect& bb, LucyGuiID id);
    LucyGui_API void          ClearDragDrop();
    LucyGui_API bool          IsDragDropPayloadBeingAccepted();
    LucyGui_API void          RenderDragDropTargetRect(const ImRect& bb, const ImRect& item_clip_rect);

    // Typing-Select API
    LucyGui_API LucyGuiTypingSelectRequest* GetTypingSelectRequest(LucyGuiTypingSelectFlags flags = LucyGuiTypingSelectFlags_None);
    LucyGui_API int           TypingSelectFindMatch(LucyGuiTypingSelectRequest* req, int items_count, const char* (*get_item_name_func)(void*, int), void* user_data, int nav_item_idx);
    LucyGui_API int           TypingSelectFindNextSingleCharMatch(LucyGuiTypingSelectRequest* req, int items_count, const char* (*get_item_name_func)(void*, int), void* user_data, int nav_item_idx);
    LucyGui_API int           TypingSelectFindBestLeadingMatch(LucyGuiTypingSelectRequest* req, int items_count, const char* (*get_item_name_func)(void*, int), void* user_data);

    // Internal Columns API (this is not exposed because we will encourage transitioning to the Tables API)
    LucyGui_API void          SetWindowClipRectBeforeSetChannel(LucyGuiWindow* window, const ImRect& clip_rect);
    LucyGui_API void          BeginColumns(const char* str_id, int count, LucyGuiOldColumnFlags flags = 0); // setup number of columns. use an identifier to distinguish multiple column sets. close with EndColumns().
    LucyGui_API void          EndColumns();                                                               // close columns
    LucyGui_API void          PushColumnClipRect(int column_index);
    LucyGui_API void          PushColumnsBackground();
    LucyGui_API void          PopColumnsBackground();
    LucyGui_API LucyGuiID       GetColumnsID(const char* str_id, int count);
    LucyGui_API LucyGuiOldColumns* FindOrCreateColumns(LucyGuiWindow* window, LucyGuiID id);
    LucyGui_API float         GetColumnOffsetFromNorm(const LucyGuiOldColumns* columns, float offset_norm);
    LucyGui_API float         GetColumnNormFromOffset(const LucyGuiOldColumns* columns, float offset);

    // Tables: Candidates for public API
    LucyGui_API void          TableOpenContextMenu(int column_n = -1);
    LucyGui_API void          TableSetColumnWidth(int column_n, float width);
    LucyGui_API void          TableSetColumnSortDirection(int column_n, LucyGuiSortDirection sort_direction, bool append_to_sort_specs);
    LucyGui_API int           TableGetHoveredColumn();    // May use (TableGetColumnFlags() & LucyGuiTableColumnFlags_IsHovered) instead. Return hovered column. return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered.
    LucyGui_API int           TableGetHoveredRow();       // Retrieve *PREVIOUS FRAME* hovered row. This difference with TableGetHoveredColumn() is the reason why this is not public yet.
    LucyGui_API float         TableGetHeaderRowHeight();
    LucyGui_API float         TableGetHeaderAngledMaxLabelWidth();
    LucyGui_API void          TablePushBackgroundChannel();
    LucyGui_API void          TablePopBackgroundChannel();
    LucyGui_API void          TableAngledHeadersRowEx(float angle, float max_label_width = 0.0f);

    // Tables: Internals
    inline    LucyGuiTable*   GetCurrentTable() { LucyGuiContext& g = *GLucyGui; return g.CurrentTable; }
    LucyGui_API LucyGuiTable*   TableFindByID(LucyGuiID id);
    LucyGui_API bool          BeginTableEx(const char* name, LucyGuiID id, int columns_count, LucyGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0, 0), float inner_width = 0.0f);
    LucyGui_API void          TableBeginInitMemory(LucyGuiTable* table, int columns_count);
    LucyGui_API void          TableBeginApplyRequests(LucyGuiTable* table);
    LucyGui_API void          TableSetupDrawChannels(LucyGuiTable* table);
    LucyGui_API void          TableUpdateLayout(LucyGuiTable* table);
    LucyGui_API void          TableUpdateBorders(LucyGuiTable* table);
    LucyGui_API void          TableUpdateColumnsWeightFromWidth(LucyGuiTable* table);
    LucyGui_API void          TableDrawBorders(LucyGuiTable* table);
    LucyGui_API void          TableDrawDefaultContextMenu(LucyGuiTable* table, LucyGuiTableFlags flags_for_section_to_display);
    LucyGui_API bool          TableBeginContextMenuPopup(LucyGuiTable* table);
    LucyGui_API void          TableMergeDrawChannels(LucyGuiTable* table);
    inline LucyGuiTableInstanceData*  TableGetInstanceData(LucyGuiTable* table, int instance_no) { if (instance_no == 0) return &table->InstanceDataFirst; return &table->InstanceDataExtra[instance_no - 1]; }
    inline LucyGuiID                  TableGetInstanceID(LucyGuiTable* table, int instance_no)   { return TableGetInstanceData(table, instance_no)->TableInstanceID; }
    LucyGui_API void          TableSortSpecsSanitize(LucyGuiTable* table);
    LucyGui_API void          TableSortSpecsBuild(LucyGuiTable* table);
    LucyGui_API LucyGuiSortDirection TableGetColumnNextSortDirection(LucyGuiTableColumn* column);
    LucyGui_API void          TableFixColumnSortDirection(LucyGuiTable* table, LucyGuiTableColumn* column);
    LucyGui_API float         TableGetColumnWidthAuto(LucyGuiTable* table, LucyGuiTableColumn* column);
    LucyGui_API void          TableBeginRow(LucyGuiTable* table);
    LucyGui_API void          TableEndRow(LucyGuiTable* table);
    LucyGui_API void          TableBeginCell(LucyGuiTable* table, int column_n);
    LucyGui_API void          TableEndCell(LucyGuiTable* table);
    LucyGui_API ImRect        TableGetCellBgRect(const LucyGuiTable* table, int column_n);
    LucyGui_API const char*   TableGetColumnName(const LucyGuiTable* table, int column_n);
    LucyGui_API LucyGuiID       TableGetColumnResizeID(LucyGuiTable* table, int column_n, int instance_no = 0);
    LucyGui_API float         TableGetMaxColumnWidth(const LucyGuiTable* table, int column_n);
    LucyGui_API void          TableSetColumnWidthAutoSingle(LucyGuiTable* table, int column_n);
    LucyGui_API void          TableSetColumnWidthAutoAll(LucyGuiTable* table);
    LucyGui_API void          TableRemove(LucyGuiTable* table);
    LucyGui_API void          TableGcCompactTransientBuffers(LucyGuiTable* table);
    LucyGui_API void          TableGcCompactTransientBuffers(LucyGuiTableTempData* table);
    LucyGui_API void          TableGcCompactSettings();

    // Tables: Settings
    LucyGui_API void                  TableLoadSettings(LucyGuiTable* table);
    LucyGui_API void                  TableSaveSettings(LucyGuiTable* table);
    LucyGui_API void                  TableResetSettings(LucyGuiTable* table);
    LucyGui_API LucyGuiTableSettings*   TableGetBoundSettings(LucyGuiTable* table);
    LucyGui_API void                  TableSettingsAddSettingsHandler();
    LucyGui_API LucyGuiTableSettings*   TableSettingsCreate(LucyGuiID id, int columns_count);
    LucyGui_API LucyGuiTableSettings*   TableSettingsFindByID(LucyGuiID id);

    // Tab Bars
    inline    LucyGuiTabBar*  GetCurrentTabBar() { LucyGuiContext& g = *GLucyGui; return g.CurrentTabBar; }
    LucyGui_API bool          BeginTabBarEx(LucyGuiTabBar* tab_bar, const ImRect& bb, LucyGuiTabBarFlags flags);
    LucyGui_API LucyGuiTabItem* TabBarFindTabByID(LucyGuiTabBar* tab_bar, LucyGuiID tab_id);
    LucyGui_API LucyGuiTabItem* TabBarFindTabByOrder(LucyGuiTabBar* tab_bar, int order);
    LucyGui_API LucyGuiTabItem* TabBarGetCurrentTab(LucyGuiTabBar* tab_bar);
    inline int              TabBarGetTabOrder(LucyGuiTabBar* tab_bar, LucyGuiTabItem* tab) { return tab_bar->Tabs.index_from_ptr(tab); }
    LucyGui_API const char*   TabBarGetTabName(LucyGuiTabBar* tab_bar, LucyGuiTabItem* tab);
    LucyGui_API void          TabBarRemoveTab(LucyGuiTabBar* tab_bar, LucyGuiID tab_id);
    LucyGui_API void          TabBarCloseTab(LucyGuiTabBar* tab_bar, LucyGuiTabItem* tab);
    LucyGui_API void          TabBarQueueFocus(LucyGuiTabBar* tab_bar, LucyGuiTabItem* tab);
    LucyGui_API void          TabBarQueueReorder(LucyGuiTabBar* tab_bar, LucyGuiTabItem* tab, int offset);
    LucyGui_API void          TabBarQueueReorderFromMousePos(LucyGuiTabBar* tab_bar, LucyGuiTabItem* tab, ImVec2 mouse_pos);
    LucyGui_API bool          TabBarProcessReorder(LucyGuiTabBar* tab_bar);
    LucyGui_API bool          TabItemEx(LucyGuiTabBar* tab_bar, const char* label, bool* p_open, LucyGuiTabItemFlags flags, LucyGuiWindow* docked_window);
    LucyGui_API ImVec2        TabItemCalcSize(const char* label, bool has_close_button_or_unsaved_marker);
    LucyGui_API ImVec2        TabItemCalcSize(LucyGuiWindow* window);
    LucyGui_API void          TabItemBackground(ImDrawList* draw_list, const ImRect& bb, LucyGuiTabItemFlags flags, ImU32 col);
    LucyGui_API void          TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, LucyGuiTabItemFlags flags, ImVec2 frame_padding, const char* label, LucyGuiID tab_id, LucyGuiID close_button_id, bool is_contents_visible, bool* out_just_closed, bool* out_text_clipped);

    // Render helpers
    // AVOID USING OUTSIDE OF LucyGui.CPP! NOT FOR PUBLIC CONSUMPTION. THOSE FUNCTIONS ARE A MESS. THEIR SIGNATURE AND BEHAVIOR WILL CHANGE, THEY NEED TO BE REFACTORED INTO SOMETHING DECENT.
    // NB: All position are in absolute pixels coordinates (we are never using window coordinates internally)
    LucyGui_API void          RenderText(ImVec2 pos, const char* text, const char* text_end = NULL, bool hide_text_after_hash = true);
    LucyGui_API void          RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width);
    LucyGui_API void          RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align = ImVec2(0, 0), const ImRect* clip_rect = NULL);
    LucyGui_API void          RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align = ImVec2(0, 0), const ImRect* clip_rect = NULL);
    LucyGui_API void          RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, float clip_max_x, float ellipsis_max_x, const char* text, const char* text_end, const ImVec2* text_size_if_known);
    LucyGui_API void          RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border = true, float rounding = 0.0f);
    LucyGui_API void          RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding = 0.0f);
    LucyGui_API void          RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, float grid_step, ImVec2 grid_off, float rounding = 0.0f, ImDrawFlags flags = 0);
    LucyGui_API void          RenderNavHighlight(const ImRect& bb, LucyGuiID id, LucyGuiNavHighlightFlags flags = LucyGuiNavHighlightFlags_None); // Navigation highlight
    LucyGui_API const char*   FindRenderedTextEnd(const char* text, const char* text_end = NULL); // Find the optional ## from which we stop displaying text.
    LucyGui_API void          RenderMouseCursor(ImVec2 pos, float scale, LucyGuiMouseCursor mouse_cursor, ImU32 col_fill, ImU32 col_border, ImU32 col_shadow);

    // Render helpers (those functions don't access any LucyGui state!)
    LucyGui_API void          RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, LucyGuiDir dir, float scale = 1.0f);
    LucyGui_API void          RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col);
    LucyGui_API void          RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz);
    LucyGui_API void          RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, LucyGuiDir direction, ImU32 col);
    LucyGui_API void          RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding);
    LucyGui_API void          RenderRectFilledWithHole(ImDrawList* draw_list, const ImRect& outer, const ImRect& inner, ImU32 col, float rounding);

    // Widgets
    LucyGui_API void          TextEx(const char* text, const char* text_end = NULL, LucyGuiTextFlags flags = 0);
    LucyGui_API bool          ButtonEx(const char* label, const ImVec2& size_arg = ImVec2(0, 0), LucyGuiButtonFlags flags = 0);
    LucyGui_API bool          ColorButtonEx(const char* label, ImVec4 color, const ImVec2& size_arg = ImVec2(0, 0), LucyGuiButtonFlags flags = 0);
    LucyGui_API bool          ArrowButtonEx(const char* str_id, LucyGuiDir dir, ImVec2 size_arg, LucyGuiButtonFlags flags = 0);
    LucyGui_API bool          ImageButtonEx(LucyGuiID id, ImTextureID texture_id, const ImVec2& image_size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& bg_col, const ImVec4& tint_col, LucyGuiButtonFlags flags = 0);
    LucyGui_API void          SeparatorEx(LucyGuiSeparatorFlags flags, float thickness = 1.0f);
    LucyGui_API void          SeparatorTextEx(LucyGuiID id, const char* label, const char* label_end, float extra_width);
    LucyGui_API bool          CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value);
    LucyGui_API bool          CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value);

    // Widgets: Window Decorations
    LucyGui_API bool          CloseButton(LucyGuiID id, const ImVec2& pos);
    LucyGui_API bool          CollapseButton(LucyGuiID id, const ImVec2& pos);
    LucyGui_API void          Scrollbar(LucyGuiAxis axis);
    LucyGui_API bool          ScrollbarEx(const ImRect& bb, LucyGuiID id, LucyGuiAxis axis, ImS64* p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags);
    LucyGui_API ImRect        GetWindowScrollbarRect(LucyGuiWindow* window, LucyGuiAxis axis);
    LucyGui_API LucyGuiID       GetWindowScrollbarID(LucyGuiWindow* window, LucyGuiAxis axis);
    LucyGui_API LucyGuiID       GetWindowResizeCornerID(LucyGuiWindow* window, int n); // 0..3: corners
    LucyGui_API LucyGuiID       GetWindowResizeBorderID(LucyGuiWindow* window, LucyGuiDir dir);

    // Widgets low-level behaviors
    LucyGui_API bool          ButtonBehavior(const ImRect& bb, LucyGuiID id, bool* out_hovered, bool* out_held, LucyGuiButtonFlags flags = 0);
    LucyGui_API bool          DragBehavior(LucyGuiID id, LucyGuiDataType data_type, void* p_v, float v_speed, const void* p_min, const void* p_max, const char* format, LucyGuiSliderFlags flags);
    LucyGui_API bool          SliderBehavior(const ImRect& bb, LucyGuiID id, LucyGuiDataType data_type, void* p_v, const void* p_min, const void* p_max, const char* format, LucyGuiSliderFlags flags, ImRect* out_grab_bb);
    LucyGui_API bool          SplitterBehavior(const ImRect& bb, LucyGuiID id, LucyGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend = 0.0f, float hover_visibility_delay = 0.0f, ImU32 bg_col = 0);
    LucyGui_API bool          TreeNodeBehavior(LucyGuiID id, LucyGuiTreeNodeFlags flags, const char* label, const char* label_end = NULL);
    LucyGui_API void          TreePushOverrideID(LucyGuiID id);
    LucyGui_API void          TreeNodeSetOpen(LucyGuiID id, bool open);
    LucyGui_API bool          TreeNodeUpdateNextOpen(LucyGuiID id, LucyGuiTreeNodeFlags flags);   // Return open state. Consume previous SetNextItemOpen() data, if any. May return true when logging.
    LucyGui_API void          SetNextItemSelectionUserData(LucyGuiSelectionUserData selection_user_data);

    // Template functions are instantiated in LucyGui_widgets.cpp for a finite number of types.
    // To use them externally (for custom widget) you may need an "extern template" statement in your code in order to link to existing instances and silence Clang warnings (see #2036).
    // e.g. " extern template LucyGui_API float RoundScalarWithFormatT<float, float>(const char* format, LucyGuiDataType data_type, float v); "
    template<typename T, typename SIGNED_T, typename FLOAT_T>   LucyGui_API float ScaleRatioFromValueT(LucyGuiDataType data_type, T v, T v_min, T v_max, bool is_logarithmic, float logarithmic_zero_epsilon, float zero_deadzone_size);
    template<typename T, typename SIGNED_T, typename FLOAT_T>   LucyGui_API T     ScaleValueFromRatioT(LucyGuiDataType data_type, float t, T v_min, T v_max, bool is_logarithmic, float logarithmic_zero_epsilon, float zero_deadzone_size);
    template<typename T, typename SIGNED_T, typename FLOAT_T>   LucyGui_API bool  DragBehaviorT(LucyGuiDataType data_type, T* v, float v_speed, T v_min, T v_max, const char* format, LucyGuiSliderFlags flags);
    template<typename T, typename SIGNED_T, typename FLOAT_T>   LucyGui_API bool  SliderBehaviorT(const ImRect& bb, LucyGuiID id, LucyGuiDataType data_type, T* v, T v_min, T v_max, const char* format, LucyGuiSliderFlags flags, ImRect* out_grab_bb);
    template<typename T>                                        LucyGui_API T     RoundScalarWithFormatT(const char* format, LucyGuiDataType data_type, T v);
    template<typename T>                                        LucyGui_API bool  CheckboxFlagsT(const char* label, T* flags, T flags_value);

    // Data type helpers
    LucyGui_API const LucyGuiDataTypeInfo*  DataTypeGetInfo(LucyGuiDataType data_type);
    LucyGui_API int           DataTypeFormatString(char* buf, int buf_size, LucyGuiDataType data_type, const void* p_data, const char* format);
    LucyGui_API void          DataTypeApplyOp(LucyGuiDataType data_type, int op, void* output, const void* arg_1, const void* arg_2);
    LucyGui_API bool          DataTypeApplyFromText(const char* buf, LucyGuiDataType data_type, void* p_data, const char* format);
    LucyGui_API int           DataTypeCompare(LucyGuiDataType data_type, const void* arg_1, const void* arg_2);
    LucyGui_API bool          DataTypeClamp(LucyGuiDataType data_type, void* p_data, const void* p_min, const void* p_max);

    // InputText
    LucyGui_API bool          InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVec2& size_arg, LucyGuiInputTextFlags flags, LucyGuiInputTextCallback callback = NULL, void* user_data = NULL);
    LucyGui_API void          InputTextDeactivateHook(LucyGuiID id);
    LucyGui_API bool          TempInputText(const ImRect& bb, LucyGuiID id, const char* label, char* buf, int buf_size, LucyGuiInputTextFlags flags);
    LucyGui_API bool          TempInputScalar(const ImRect& bb, LucyGuiID id, const char* label, LucyGuiDataType data_type, void* p_data, const char* format, const void* p_clamp_min = NULL, const void* p_clamp_max = NULL);
    inline bool             TempInputIsActive(LucyGuiID id)       { LucyGuiContext& g = *GLucyGui; return (g.ActiveId == id and g.TempInputId == id); }
    inline LucyGuiInputTextState* GetInputTextState(LucyGuiID id)   { LucyGuiContext& g = *GLucyGui; return (id != 0 and g.InputTextState.ID == id) ? &g.InputTextState : NULL; } // Get input text state if active

    // Color
    LucyGui_API void          ColorTooltip(const char* text, const float* col, LucyGuiColorEditFlags flags);
    LucyGui_API void          ColorEditOptionsPopup(const float* col, LucyGuiColorEditFlags flags);
    LucyGui_API void          ColorPickerOptionsPopup(const float* ref_col, LucyGuiColorEditFlags flags);

    // Plot
    LucyGui_API int           PlotEx(LucyGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2& size_arg);

    // Shade functions (write over already created vertices)
    LucyGui_API void          ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1);
    LucyGui_API void          ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, bool clamp);
    LucyGui_API void          ShadeVertsTransformPos(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, const ImVec2& pivot_in, float cos_a, float sin_a, const ImVec2& pivot_out);

    // Garbage collection
    LucyGui_API void          GcCompactTransientMiscBuffers();
    LucyGui_API void          GcCompactTransientWindowBuffers(LucyGuiWindow* window);
    LucyGui_API void          GcAwakeTransientWindowBuffers(LucyGuiWindow* window);

    // Debug Log
    LucyGui_API void          DebugLog(const char* fmt, ...) IM_FMTARGS(1);
    LucyGui_API void          DebugLogV(const char* fmt, va_list args) IM_FMTLIST(1);
    LucyGui_API void          DebugAllocHook(LucyGuiDebugAllocInfo* info, int frame_count, void* ptr, size_t size); // size >= 0 : alloc, size = -1 : free

    // Debug Tools
    LucyGui_API void          ErrorCheckEndFrameRecover(LucyGuiErrorLogCallback log_callback, void* user_data = NULL);
    LucyGui_API void          ErrorCheckEndWindowRecover(LucyGuiErrorLogCallback log_callback, void* user_data = NULL);
    LucyGui_API void          ErrorCheckUsingSetCursorPosToExtendParentBoundaries();
    LucyGui_API void          DebugDrawCursorPos(ImU32 col = IM_COL32(255, 0, 0, 255));
    LucyGui_API void          DebugDrawLineExtents(ImU32 col = IM_COL32(255, 0, 0, 255));
    LucyGui_API void          DebugDrawItemRect(ImU32 col = IM_COL32(255, 0, 0, 255));
    LucyGui_API void          DebugLocateItem(LucyGuiID target_id);                     // Call sparingly: only 1 at the same time!
    LucyGui_API void          DebugLocateItemOnHover(LucyGuiID target_id);              // Only call on reaction to a mouse Hover: because only 1 at the same time!
    LucyGui_API void          DebugLocateItemResolveWithLastItem();
    LucyGui_API void          DebugBreakClearData();
    LucyGui_API bool          DebugBreakButton(const char* label, const char* description_of_location);
    LucyGui_API void          DebugBreakButtonTooltip(bool keyboard_only, const char* description_of_location);
    LucyGui_API void          ShowFontAtlas(ImFontAtlas* atlas);
    LucyGui_API void          DebugHookIdInfo(LucyGuiID id, LucyGuiDataType data_type, const void* data_id, const void* data_id_end);
    LucyGui_API void          DebugNodeColumns(LucyGuiOldColumns* columns);
    LucyGui_API void          DebugNodeDrawList(LucyGuiWindow* window, LucyGuiViewportP* viewport, const ImDrawList* draw_list, const char* label);
    LucyGui_API void          DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, const ImDrawList* draw_list, const ImDrawCmd* draw_cmd, bool show_mesh, bool show_aabb);
    LucyGui_API void          DebugNodeFont(ImFont* font);
    LucyGui_API void          DebugNodeFontGlyph(ImFont* font, const ImFontGlyph* glyph);
    LucyGui_API void          DebugNodeStorage(LucyGuiStorage* storage, const char* label);
    LucyGui_API void          DebugNodeTabBar(LucyGuiTabBar* tab_bar, const char* label);
    LucyGui_API void          DebugNodeTable(LucyGuiTable* table);
    LucyGui_API void          DebugNodeTableSettings(LucyGuiTableSettings* settings);
    LucyGui_API void          DebugNodeInputTextState(LucyGuiInputTextState* state);
    LucyGui_API void          DebugNodeTypingSelectState(LucyGuiTypingSelectState* state);
    LucyGui_API void          DebugNodeWindow(LucyGuiWindow* window, const char* label);
    LucyGui_API void          DebugNodeWindowSettings(LucyGuiWindowSettings* settings);
    LucyGui_API void          DebugNodeWindowsList(ImVector<LucyGuiWindow*>* windows, const char* label);
    LucyGui_API void          DebugNodeWindowsListByBeginStackParent(LucyGuiWindow** windows, int windows_size, LucyGuiWindow* parent_in_begin_stack);
    LucyGui_API void          DebugNodeViewport(LucyGuiViewportP* viewport);
    LucyGui_API void          DebugRenderKeyboardPreview(ImDrawList* draw_list);
    LucyGui_API void          DebugRenderViewportThumbnail(ImDrawList* draw_list, LucyGuiViewportP* viewport, const ImRect& bb);

    // Obsolete functions
#ifndef LucyGui_DISABLE_OBSOLETE_FUNCTIONS
    inline void     SetItemUsingMouseWheel()                                            { SetItemKeyOwner(LucyGuiKey_MouseWheelY); }      // Changed in 1.89
    inline bool     TreeNodeBehaviorIsOpen(LucyGuiID id, LucyGuiTreeNodeFlags flags = 0)    { return TreeNodeUpdateNextOpen(id, flags); }   // Renamed in 1.89

    // Refactored focus/nav/tabbing system in 1.82 and 1.84. If you have old/custom copy-and-pasted widgets which used FocusableItemRegister():
    //  (Old) LucyGui_VERSION_NUM  < 18209: using 'ItemAdd(....)'                              and 'bool tab_focused = FocusableItemRegister(...)'
    //  (Old) LucyGui_VERSION_NUM >= 18209: using 'ItemAdd(..., LucyGuiItemAddFlags_Focusable)'  and 'bool tab_focused = (g.LastItemData.StatusFlags & LucyGuiItemStatusFlags_Focused) != 0'
    //  (New) LucyGui_VERSION_NUM >= 18413: using 'ItemAdd(..., LucyGuiItemFlags_Inputable)'     and 'bool tab_focused = (g.NavActivateId == id and (g.NavActivateFlags & LucyGuiActivateFlags_PreferInput))'
    //inline bool   FocusableItemRegister(LucyGuiWindow* window, LucyGuiID id)              // -> pass LucyGuiItemAddFlags_Inputable flag to ItemAdd()
    //inline void   FocusableItemUnregister(LucyGuiWindow* window)                        // -> unnecessary: TempInputText() uses LucyGuiInputTextFlags_MergedItem
#endif
#ifndef LucyGui_DISABLE_OBSOLETE_KEYIO
    inline bool     IsKeyPressedMap(LucyGuiKey key, bool repeat = true)                   { IM_ASSERT(IsNamedKey(key)); return IsKeyPressed(key, repeat); } // Removed in 1.87: Mapping from named key is always idactor!
#endif

} // namespace LucyGui


//-----------------------------------------------------------------------------
// [SECTION] ImFontAtlas internal API
//-----------------------------------------------------------------------------

// This structure is likely to evolve as we add support for incremental atlas updates
struct ImFontBuilderIO
{
    bool    (*FontBuilder_Build)(ImFontAtlas* atlas);
};

// Helper for font builder
#ifdef LucyGui_ENABLE_STB_TRUETYPE
LucyGui_API const ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype();
#endif
LucyGui_API void      ImFontAtlasUpdateConfigDataPointers(ImFontAtlas* atlas);
LucyGui_API void      ImFontAtlasBuildInit(ImFontAtlas* atlas);
LucyGui_API void      ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, float ascent, float descent);
LucyGui_API void      ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque);
LucyGui_API void      ImFontAtlasBuildFinish(ImFontAtlas* atlas);
LucyGui_API void      ImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, const char* in_str, char in_marker_char, unsigned char in_marker_pixel_value);
LucyGui_API void      ImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, const char* in_str, char in_marker_char, unsigned int in_marker_pixel_value);
LucyGui_API void      ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_multiply_factor);
LucyGui_API void      ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels, int x, int y, int w, int h, int stride);

//-----------------------------------------------------------------------------
// [SECTION] Test Engine specific hooks (LucyGui_test_engine)
//-----------------------------------------------------------------------------

#ifdef LucyGui_ENABLE_TEST_ENGINE
extern void         LucyGuiTestEngineHook_ItemAdd(LucyGuiContext* ctx, LucyGuiID id, const ImRect& bb, const LucyGuiLastItemData* item_data);           // item_data may be NULL
extern void         LucyGuiTestEngineHook_ItemInfo(LucyGuiContext* ctx, LucyGuiID id, const char* label, LucyGuiItemStatusFlags flags);
extern void         LucyGuiTestEngineHook_Log(LucyGuiContext* ctx, const char* fmt, ...);
extern const char*  LucyGuiTestEngine_FindItemDebugLabel(LucyGuiContext* ctx, LucyGuiID id);

// In LucyGui_VERSION_NUM >= 18934: changed LucyGui_TEST_ENGINE_ITEM_ADD(bb,id) to LucyGui_TEST_ENGINE_ITEM_ADD(id,bb,item_data);
#define LucyGui_TEST_ENGINE_ITEM_ADD(_ID,_BB,_ITEM_DATA)      if (g.TestEngineHookItems) LucyGuiTestEngineHook_ItemAdd(&g, _ID, _BB, _ITEM_DATA)    // Register item bounding box
#define LucyGui_TEST_ENGINE_ITEM_INFO(_ID,_LABEL,_FLAGS)      if (g.TestEngineHookItems) LucyGuiTestEngineHook_ItemInfo(&g, _ID, _LABEL, _FLAGS)    // Register item label and status flags (optional)
#define LucyGui_TEST_ENGINE_LOG(_FMT,...)                     if (g.TestEngineHookItems) LucyGuiTestEngineHook_Log(&g, _FMT, __VA_ARGS__)           // Custom log entry from user land into test log
#else
#define LucyGui_TEST_ENGINE_ITEM_ADD(_BB,_ID)                 ((void)0)
#define LucyGui_TEST_ENGINE_ITEM_INFO(_ID,_LABEL,_FLAGS)      ((void)g)
#endif

//-----------------------------------------------------------------------------

#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

#ifdef _MSC_VER
#pragma warning (pop)
#endif

#endif // #ifndef LucyGui_DISABLE
