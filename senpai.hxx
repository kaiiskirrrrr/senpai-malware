#pragma once
#include "includes.hxx"

class interface_colors
{
public:

    ImVec4 accent = ImVec4(0.2f, 0.2f, 0.2f, 1.0f);
    ImVec4 background = ImVec4(0.733f, 0.836f, 0.935f, 1.000f);
    ImVec4 border_shadow = ImVec4(0.065f, 0.065f, 0.065f, 0.00f);
    ImVec4 filling = ImVec4(0.996f, 1.000f, 0.967f, 1.0f);
    ImVec4 text = ImVec4(1.000f, 1.000f, 1.000f, 1.000f);
    ImColor outline_color = ImColor(0, 0, 0, 255); // 197

    auto set_style() noexcept -> void 
    {
        LucyGuiStyle& style = LucyGui::GetStyle();
        ImVec4* colors = style.Colors;

        colors[LucyGuiCol_WindowBg] = this->background;
        colors[LucyGuiCol_Border] = this->accent;
        colors[LucyGuiCol_BorderShadow] = this->border_shadow;

        colors[LucyGuiCol_Text] = this->text;

        colors[LucyGuiCol_Button] = this->accent;
        colors[LucyGuiCol_ButtonHovered] = ImVec4(this->accent.x + 0.1f, this->accent.y + 0.1f, this->accent.z + 0.1f, 1.00f);
        colors[LucyGuiCol_ButtonActive] = ImVec4(this->accent.x + 0.2f, this->accent.y + 0.2f, this->accent.z + 0.2f, 1.00f);
        colors[LucyGuiCol_CheckMark] = this->text;

        colors[LucyGuiCol_FrameBg] = this->filling;
        colors[LucyGuiCol_FrameBgHovered] = ImVec4(this->filling.x + 0.1f, this->filling.y + 0.1f, this->filling.z + 0.1f, 1.00f);
        colors[LucyGuiCol_FrameBgActive] = ImVec4(this->filling.x + 0.2f, this->filling.y + 0.2f, this->filling.z + 0.2f, 1.00f);

        style.AntiAliasedFill = true;
        style.AntiAliasedLines = true;

        style.WindowRounding = 0.0f;
        style.FrameRounding = 1.0f;
        style.FrameBorderSize = 1.0f;
    }

}; inline const auto c_interface_colors = std::make_unique<interface_colors>();

class senpai_interface
{
public:

    const ImVec2 widget_child_size{650, 260}; // 260
    const ImVec2 widget_position{5.8f, 5.8f};
    std::string status_message;

    auto outlined_text(const std::string& text) const -> void
    {
        this->outlined_text(text, ImVec4(1, 1, 1, 1.f), LucyGui::GetCursorPos());
    }

    auto outlined_text(const std::string& text, const ImColor& color) const -> void
    {
        this->outlined_text(text, color, LucyGui::GetCursorPos());
    }

    auto outlined_text(const std::string& text, const ImColor& color, const ImVec2& position) const -> void
    {
        const ImVec2 offset_array[] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        for (const auto& offset : offset_array)
        {
            LucyGui::SetCursorPos(ImVec2(position.x + offset.x, position.y + offset.y));
            LucyGui::TextColored(c_interface_colors.get()->outline_color, text.c_str());
        }

        LucyGui::SetCursorPos(position);
        LucyGui::TextColored(color, text.c_str());
    }

    auto senpai_cc(const HWND& hwnd) -> void
    {
        constexpr auto flags = LucyGuiWindowFlags_NoDecoration;
        LucyGui::Begin("senpai_cc", nullptr, flags);
        {
            static bool flip = false;
            bool is_hovered = LucyGui::IsWindowHovered();

            if (is_hovered != flip)
            {
                LONG_PTR style = GetWindowLongPtr(hwnd, GWL_EXSTYLE);
                style = is_hovered ? (style & ~WS_EX_TRANSPARENT) : (style | WS_EX_TRANSPARENT);

                SetWindowLongPtr(hwnd, GWL_EXSTYLE, style);
                SetLayeredWindowAttributes(hwnd, RGB(0, 0, 0), 0, LWA_COLORKEY);
                UpdateWindow(hwnd);

                flip = is_hovered;
            }

            const auto draw_list = LucyGui::GetWindowDrawList();

            LucyGui::SetWindowSize(widget_child_size);
            {
                auto window_position = LucyGui::GetWindowPos();

                draw_list->AddRectFilled(window_position, ImVec2(window_position.x + LucyGui::GetWindowSize().x, window_position.y + 30), ImColor(204, 226, 248, 255));

                draw_list->AddText(ImVec2(window_position.x + 4, window_position.y + 7), c_interface_colors.get()->outline_color, "Totally not malware");
                draw_list->AddText(ImVec2(window_position.x + 6, window_position.y + 7), c_interface_colors.get()->outline_color, "Totally not malware");
                draw_list->AddText(ImVec2(window_position.x + 5, window_position.y + 6), c_interface_colors.get()->outline_color, "Totally not malware");
                draw_list->AddText(ImVec2(window_position.x + 5, window_position.y + 8), c_interface_colors.get()->outline_color, "Totally not malware");

                draw_list->AddText(ImVec2(window_position.x + 5, window_position.y + 7), ImColor(255, 255, 255, 255), "Totally not malware");
            }

            LucyGui::SetCursorPos({widget_child_size.x - 36, 5});
            {
                const ImVec2 button_size = ImVec2(30, 20);
                const ImVec2 button_pos = LucyGui::GetCursorScreenPos();
                const ImColor text_color = ImColor(255, 255, 255, 255);
                const char* text = "X";
                const ImVec2 text_size = LucyGui::CalcTextSize(text);
                const ImVec2 text_pos = ImVec2(button_pos.x + (button_size.x - text_size.x) * 0.5f, button_pos.y + (button_size.y - text_size.y) * 0.5f + 1);

                LucyGui::PushStyleColor(LucyGuiCol_Button, ImVec4(1.0f, 0.0f, 0.0f, 1.0f));
                if (LucyGui::Button("##hidden", button_size))
                {
                    LucyGui_ImplDX11_Shutdown();
                    LucyGui_ImplWin32_Shutdown();
                    LucyGui::DestroyContext();
                }
                LucyGui::PopStyleColor();

                const ImVec2 offset_array[] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };

                for (const auto& offset : offset_array)
                {
                    draw_list->AddText(ImVec2(text_pos.x + offset.x, text_pos.y + offset.y), c_interface_colors.get()->outline_color, text);
                }

                draw_list->AddText(text_pos, text_color, text);
            }
            LucyGui::SetCursorPosY(35);


            static const ImVec2 image_position = ImVec2(201, 219);
            LucyGui::Image(byte_loading::girl_begging, image_position, ImVec2(0, 0), ImVec2(1, 1), ImColor(255, 255, 255, 255));
            LucyGui::SameLine();

            LucyGui::BeginGroup();
            {
                LucyGui::Dummy({0, 15});

                const auto window_size = LucyGui::GetWindowSize();
                const std::vector<ImVec2> text_sizes =
                {
                    LucyGui::CalcTextSize("H-hi there..."),
                    LucyGui::CalcTextSize("Do you th-think i could have your"),
                    LucyGui::CalcTextSize("credit card information, p-please?")
                };

                const std::int32_t global_x_position = 100;

                int i = 0;
                for (const auto& text : {"H-hi there...", "Do you th-think i could have your", "credit card information, p-please?"})
                {
                    const auto& text_size = text_sizes[i++];
                    LucyGui::SetCursorPosX((window_size.x - text_size.x) / 2 + global_x_position);
                    this->outlined_text(text);
                }

                LucyGui::Dummy({0, 10});

                const float input_width = 280.0f;
                const float label_width = LucyGui::CalcTextSize("Security code:").x;
                const float x_pos = (window_size.x - input_width - label_width - LucyGui::GetStyle().ItemSpacing.x) / 2 + global_x_position;

                static char card_number[64] = "";
                static char expiry_date[32] = "";
                static char security_code[16] = "";

                bool has_error = false;
                bool has_warning = false;

                struct input
                {
                    const char* label;
                    char* buffer;
                    size_t buffer_size;
                    const char* input_id;
                    size_t max_length;
                    const char* error_message;
                };

                constexpr input input_fields[] =
                {
                    {"Card number: ", card_number, sizeof(card_number), "##input0", 19, "Senpai, that just won't fit... it's too big..."},
                    {"Expiry date:     ", expiry_date, sizeof(expiry_date), "##input1", 5, "Senpai, that just won't fit... it's too big..."},
                    {"Security code:", security_code, sizeof(security_code), "##input2", 4, "Senpai, that just won't fit... it's too big..."}
                };

                for (const auto& field : input_fields)
                {
                    LucyGui::SetCursorPosX(x_pos);
                    this->outlined_text(field.label);
                    LucyGui::SameLine();
                    LucyGui::SetNextItemWidth(input_width);
                    LucyGui::PushStyleColor(LucyGuiCol_Text, c_interface_colors.get()->accent);
                    LucyGui::InputText(field.input_id, field.buffer, field.buffer_size);
                    LucyGui::PopStyleColor();

                    const size_t buffer_length = std::strlen(field.buffer);
                    const bool is_invalid_input = std::strspn(field.buffer, "0123456789 /\\") != buffer_length;
                    const bool is_too_long = buffer_length > field.max_length;

                    if (is_invalid_input or is_too_long)
                    {
                        this->status_message = is_invalid_input ? "senpai dont put that there..." : field.error_message;
                        has_error = true;
                        has_warning = is_invalid_input;
                        
                    }
                    else if (!has_error)
                    {
                        this->status_message = "";
                    }
                }

                if (!this->status_message.empty())
                {
                    const ImColor color = has_error ? (has_warning ? ImColor(255, 174, 0) : ImColor(194, 48, 43, 200)) : ImColor(255, 174, 0);
                    this->outlined_text(this->status_message, color, ImVec2(310, 225));
                }
                else
                {
                    LucyGui::Spacing();

                    LucyGui::SetCursorPosX((window_size.x - text_sizes[0].x) / 2 + global_x_position - 20);
                    LucyGui::PushStyleColor(LucyGuiCol_Button, c_interface_colors.get()->filling);

                    ImVec2 button_size = (std::strlen(card_number) != 0 && std::strlen(expiry_date) != 0 && std::strlen(security_code) != 0) ? ImVec2(180, 28) : ImVec2(100, 28);

                    const ImVec2 button_pos = LucyGui::GetCursorScreenPos();
                    const ImColor text_color = ImColor(255, 255, 255, 255);

                    if (LucyGui::Button("", button_size))
                    {
                        // do whatevr u want, troll or sm
                    }

                    const char* text = (std::strlen(card_number) != 0 && std::strlen(expiry_date) != 0 && std::strlen(security_code) != 0) ? "Th-thanks i feel.. full..." : "Th-thanks";

                    const ImVec2 text_size = LucyGui::CalcTextSize(text);
                    const ImVec2 text_pos = ImVec2(button_pos.x + (button_size.x - text_size.x) * 0.5f, button_pos.y + (button_size.y - text_size.y) * 0.5f);

                    const ImVec2 offset_array[] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
                    for (const auto& offset : offset_array)
                    {
                        draw_list->AddText(ImVec2(text_pos.x + offset.x, text_pos.y + offset.y), c_interface_colors.get()->outline_color, text);
                    }

                    draw_list->AddText(text_pos, text_color, text);

                    LucyGui::PopStyleColor();
                }
            }
            LucyGui::EndGroup();
        }
        LucyGui::End();
    }

}; inline const auto c_interface = std::make_unique<senpai_interface>();
